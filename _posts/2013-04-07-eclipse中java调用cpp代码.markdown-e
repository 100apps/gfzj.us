---
layout: post
title: "eclipse中java调用cpp代码"
date: 2013-04-07 15:01:53
category: tech
by: zj
description: java调用dll(c++/c)开发平台：Eclipse3.3.1.1+CDT(cdt-master-4.0.3)+MinGW(MinGW-5.1.4)一、搭建环境：1:下载并安装cdt:http://www.eclipse.org/cdt/downloads.php ：选择自
permalink: /tech/64.html
---
java调用dll(c++/c)开发平台：Eclipse3.3.1.1+CDT(cdt-master-4.0.3)+MinGW(MinGW-5.1.4) 一、搭建环境： 1:下载并安装cdt :http://www.eclipse.org/cdt/downloads.php  ：选择自己eclipse 支持的cdt插件，下载，并且 通过eclipse-->software update-->find and install 安装cdt 2:下载并安装mingw :http://sourceforge.net/project/showfiles.php?group\_id=2435 然后，点击mingw.exe，选择 下载并安装  ，然后都选中(速度可能有点慢，要有耐心)， 3:环境变量配置（在系统变量或者用户变量里添加以下变量，注意路径根据实际安装的进行修改）： PATH:    C:\\\\MinGW\\\\bin C\_INCLUDE\_PATH:   C:\\\\MinGW\\\\include CPLUS\_INCLUDE\_PATH: C:\\\\MinGW\\\\include\\\\c++\\\\3.4.5;C:\\\\MinGW\\\\include\\\\c++\\\\3.4.5\\\\mingw32;C:\\\\MinGW\\\\include\\\\c++\\\\3.4.5\\\\backward;D:\\\\Program Files\\\\MinGW\\\\include LIBRARY\_PATH:   C:\\\\MinGW\\\\lib LIBRARY\_PATH 这个 变量最好加上，以前没有加，也可以编译出正确的dll，但是后来编译出来的dll就有问题，最后定位出来没有加LIBRARY\_PATH这个变量，造成编译出来的dll不能正常运行. 如果添加完所有变量 最好重启电脑。 4:相关设置 eclipse-->Window->Preferences->C/C++->New CDT project wizard->Makefile Project 找到 Binary Parser 把Elf Parser取消， 选中 PE Windows Parser. 由于在MinGW目录下的make文件名为"mingw32-make.exe"， eclipse默认的调用文件名为"make.exe" 所以先将MinGW目录下文件名为"mingw32-make.exe"做个备份，然后将该文件重命名为"make.exe" 二、调用示例，以HelloWorld为例 1、java代码：

    public class Hello {
    
     public native void sayHello();
    
     static{
      System.loadLibrary("Hello");
     }
    
     public static void main(String[] args){
      Hello h = new Hello();
      h.sayHello();
     }
    }

在保存该文件时，eclipse会自动生成class文件。 命令行：javah Hello.class 生成Hello.h 2、创建c++工程 （1）Hello.h(之前自动生成的)：

    /* DO NOT EDIT THIS FILE - it is machine generated */
    #include <jni.h>
    /* Header for class test_Hello */
    
    #ifndef _Included_Hello
    #define _Included_Hello
    #ifdef __cplusplus
    extern "C" {
    #endif
    /*
     * Class:     Hello
     * Method:    sayhello
     * Signature: ()V
     */
    JNIEXPORT void JNICALL Java_Hello_sayhello
      (JNIEnv *, jobject);
    
    #ifdef __cplusplus
    }
    #endif
    #endif

要进行修改：

    #include <jni.h> 改为#include "jni.h"

（2）新建Hello.cpp

    #include <iostream>
     #include "Hello.h"
     using namespace std;    
    
     int main()
       {
      return 1;
       }
    
     JNIEXPORT void JNICALL Java_Hello_sayHello(JNIEnv *, jobject){
      printf("Hello world!\\n");
      return ;
     }

把jni.h（在C:\\\\Program Files\\\\Java\\\\jdk1.7.0\_09\\\\include下）拷贝到c++工程目录下； 把jni\_md.h（在C:\\\\Program Files\\\\Java\\\\jdk1.7.0\_09\\\\include\\\\win32下）拷贝到c++工程目录下。 3、生成Hello.dll （1）、用eclipse c++插件的 make targets--build生成Hello.o target name 随便 make target 随便 命令默认就可以 （2）、在命令行里切换到Hello.o所在的目录 执行命令，注意参数（我的java目录C:\\\\Program Files\\\\Java\\\\）： g++ -I  -Wl,--add-stdcall-alias -shared -o Hello.dll Hello.o 4、运行 将Hello.dll拷贝到java工程的根目录下。 对于java工程，右键-->Build Path--->Sounce,展开显示的项，点击Native library location，再点击右边Edit...键，在弹出框中，点击workspace，选择Hello.dll所在文件夹即可。 设置完后，运行   5、注意： 如果测试类是在某个包下的话，例如：com.test.Hello，那我们编译class文件的时候: javac com\\\\test\\\\Hello.java 然后: javah com.test.Hello(命令行执行，到bin下)，这样生成的头文件中的方法在被调用的时候才能找到。