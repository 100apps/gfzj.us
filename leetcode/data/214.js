{
	"difficulty":"3",
	"submit_num":"196573",
	"show_id":"214",
	"leetcode_id":"214",
	"answers":[
		{
			"lc_ans_id":"60113",
			"view":"30353",
			"top":"0",
			"title":"Clean KMP solution with super detailed explanation",
			"vote":"180",
			"content":"Firstly, let me share my understanding of KMP algorithm.\\nThe key of KMP is to build a look up table that records the match result of prefix and postfix.\\nValue in the table means the max len of matching substring that exists in both prefix and postfix.\\nIn the prefix this substring should starts from 0, while in the postfix this substring should ends at current index.\\n\\nFor example, now we have a string \"ababc\"\\nThe KMP table will look like this:\\n\\n> a b a b c\\n> \\n> 0 0 1 2 0\\n\\n(Note: we will not match substring with itself, so we will skip index 0)\\n\\nSo how does this table help us search string match faster? \\n\\nWell, the answer is if we are trying to match a char after postfix with target string and failed, then we can smartly shift the string, so that the matching string in prefix will replace postfix and now we can try to match the char after prefix with this char in target. \\n\\nTake above string as an example.\\n\\nNow we try to match string \"ababc\" with \"abababc\".\\n\\nWe will initially have match as below\\n\\n> a b a b a b c                  (string x)\\n> \\n> a b a b c                        (string y)\\n> \\n> 0 1 2 3 4 5 6\\n\\nWe found char at index 4 does not match, then we can use lookup table and shift the string y wisely.\\nWe found table[3] = 2, which means we can shift the string y rightward by 2, and still have same but shorter prefix before index 4, like this:\\n\\n> a b a b a b c (string x)\\n\\n> ___a b a b c (string y)\\n> \\n> 0 1 2 3 4 5 6\\n\\nIf there is a long gap between prefix and postfix, this shift can help us save a lot of time.\\nIn the brute force way, we cannot do that because we have no information of the string. We have to compare each possible pair of chars. While in kmp, we know the information of string y so we can move smartly. We can directly jump to the next possible matching pair while discard useless pair of chars.\\n\\nWe are almost done with KMP, but we still have one special case that needs to be taken care of.\\n\\nSay now we have a input like this:\\n\\n> a a b a a a  (input String)\\n\\n> 0 1 2 3 4 5  (index)\\n\\n> 0 1 0 1 2 ? (KMP table)\\n\\nHow should we build the KMP table for this string?\\n\\nSay the pointer in prefix is \"x\", which is at index 2 now and the pointer in postfix is \"y\" which is at index 5 now. we need to match \"b\" pointed by x with \"a\" pointed by y. It is an unmatched pair, how should we update the cell?\\n\\nWell, we really don't need to reset it to 0, that will make us skip a valid shorter matching substring \"aa\". \\nWhat we do now is just to shorten the length of substring by 1 unit and try to match a shorter substring \"aa\". This can be done by moving pointer x to the index recorded in [indexOf(x)-1] while keep pointer y stay still. This is because by following the value in KMP table we can always make sure previous part of prefix and postfix is matched even we have shorten their length, so we only need to care about the char after matched part in prefix and postfix.\\n\\n\\nUse above example:\\n\\nFirstly we try to compare prefix \"aab\" with postfix \"aaa\", pointer in prefix now points to \"b\" while pointer in postfix now points to \"a\". So this means current len of postfix/prefix will not give a match, we need to shorten it.\\n\\n\\nSo in the second step, we will fix pointer in postfix, and move pointer in prefix so that we can compare shorter prefix and postfix. The movement of pointer in prefix (say at index x) is done by using KMP table. We will set pointer in prefix to be table [indexOf(x)-1].  In this case, we will move prefix pointer to index 1. So now we try to compare prefix \"aa\" with postfix \"aa\".\\n\\nFinally, we found the matching prefix and postfix, we just update the cell accordingly.\\n\\n\\nAbove is my understanding of KMP algorithm, so how could we apply KMP to this problem\\n\\n\\n\\n========================== I am just a splitter =================================\\n\\n\\n\\nThis problem asks us to add string before the input so the result string will be a palindrome.\\nWe can convert it to an alternative problem\"find the longest palindrome substring starts from index 0\".\\nIf we can get the length of such substring, then we can easily build a palindrome string by inserting the reverse part of substring after such substring before the original string. \\n\\nExample:\\n\\ninput string:\\n\\n>  abacd\\n\\nlongest palindrome substring starts from 0:\\n\\n> aba\\n\\nInsert the reverse part of substring after palindrome substring before the head:\\n\\n> dcabacd\\n\\nNow the problem becomes how to find the longest palindrome substring starts from 0.\\nWe can solve it by using a trick + KMP.\\n\\nThe trick is to build a temp string like this:\\n\\n> s + \"#\" + reverse(s)\\n\\nThen we run KMP on it, the value in last cell will be our solution. In this problem, we don't need to use KMP\\nto match strings but instead we use the lookup table in KMP to find the palindrome.\\n\\nWe add \"#\" here to force the match in reverse(s) starts from its first index\\nWhat we do in KMP here is trying to find a match between prefix in s  and a postfix in reverse(s). The match part will be palindrome substring.\\n\\nExample:\\ninput:\\n\\n> catacb\\n\\nTemp String:\\n\\n> catacb # bcatac\\n\\nKMP table:\\n\\n> c  a  t  a  c  b  #  b  c  a  t  a  c\\n> \\n> 0  0 0  0  1  0  0 0  1  2  3  4  5\\n\\nIn the last cell, we got a value  5. It means in s we have a substring of length 5 that is palindrome.\\n\\nSo, above is my understanding of KMP any solution towards this problem. Below is my code\\n\\n\\n    public String shortestPalindrome(String s) {\\n        String temp = s + \"#\" + new StringBuilder(s).reverse().toString();\\n        int[] table = getTable(temp);\\n        \\n        //get the maximum palin part in s starts from 0\\n        return new StringBuilder(s.substring(table[table.length - 1])).reverse().toString() + s;\\n    }\\n    \\n    public int[] getTable(String s){\\n        //get lookup table\\n        int[] table = new int[s.length()];\\n        \\n        //pointer that points to matched char in prefix part\\n        \\n        int index = 0;\\n        //skip index 0, we will not match a string with itself\\n        for(int i = 1; i < s.length(); i++){\\n            if(s.charAt(index) == s.charAt(i)){\\n                //we can extend match in prefix and postfix\\n                table[i] = table[i-1] + 1;\\n                index ++;\\n            }else{\\n                //match failed, we try to match a shorter substring\\n                \\n                //by assigning index to table[i-1], we will shorten the match string length, and jump to the \\n                //prefix part that we used to match postfix ended at i - 1\\n                index = table[i-1];\\n                \\n                while(index > 0 && s.charAt(index) != s.charAt(i)){\\n                    //we will try to shorten the match string length until we revert to the beginning of match (index 1)\\n                    index = table[index-1];\\n                }\\n                \\n                //when we are here may either found a match char or we reach the boundary and still no luck\\n                //so we need check char match\\n                if(s.charAt(index) == s.charAt(i)){\\n                    //if match, then extend one char \\n                    index ++ ;\\n                }\\n                \\n                table[i] = index;\\n            }\\n            \\n        }\\n        \\n        return table;\\n    }\\n\\nIf I messed up or misunderstood something, please leave comment below. Thanks ~"
		},
		{
			"lc_ans_id":"60098",
			"view":"33658",
			"top":"1",
			"title":"My 7-lines recursive Java solution",
			"vote":"138",
			"content":"The idea is to use two anchors `j` and `i` to compare the String from beginning and end.\\nIf `j` can reach the end, the String itself is Palindrome. Otherwise, we divide the String by `j`, and get `mid = s.substring(0, j)` and `suffix`.\\n\\nWe reverse `suffix` as beginning of result and recursively call `shortestPalindrome` to get result of `mid` then appedn `suffix` to get result.\\n\\n        int j = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == s.charAt(j)) { j += 1; }\\n        }\\n        if (j == s.length()) { return s; }\\n        String suffix = s.substring(j);\\n        return new StringBuffer(suffix).reverse().toString() + shortestPalindrome(s.substring(0, j)) + suffix;"
		},
		{
			"lc_ans_id":"60141",
			"view":"23014",
			"top":"2",
			"title":"C++ 8 ms KMP-based O(n) time & O(n) memory solution",
			"vote":"127",
			"content":"We can construct the following string and run KMP algorithm on it:\\n(s) + (some symbol not present in s) + (reversed string)\\n\\nAfter running KMP on that string as result we get a vector **p** with values of a prefix function for each character (for definition of a prefix function see KMP algorithm description). We are only interested in the last value because it shows us the largest suffix of the reversed string that matches the prefix of the original string. So basically all we left to do is to add the first k characters of the reversed string to the original string, where k is a difference between original string size and the prefix function for the last character of a constructed string. \\n\\n    class Solution {\\n    public:\\n        string shortestPalindrome(string s) {\\n            string rev_s = s;\\n            reverse(rev_s.begin(), rev_s.end());\\n            string l = s + \"#\" + rev_s;\\n            \\n            vector<int> p(l.size(), 0);\\n            for (int i = 1; i < l.size(); i++) {\\n                int j = p[i - 1];\\n                while (j > 0 && l[i] != l[j])\\n                    j = p[j - 1];\\n                p[i] = (j += l[i] == l[j]);\\n            }\\n            \\n            return rev_s.substr(0, s.size() - p[l.size() - 1]) + s;\\n        }\\n    };"
		},
		{
			"lc_ans_id":"60099",
			"view":"13479",
			"top":"3",
			"title":"AC in 288 ms, simple brute force",
			"vote":"85",
			"content":"    def shortestPalindrome(self, s):\\n        r = s[::-1]\\n        for i in range(len(s) + 1):\\n            if s.startswith(r[i:]):\\n                return r[:i] + s\\n\\nExample: s = `dedcba`. Then r = `abcded` and I try these overlays (the part in `(...)` is the prefix I cut off, I just include it in the display for better understanding):\\n\\n      s          dedcba\\n      r[0:]      abcded    Nope...\\n      r[1:]   (a)bcded     Nope...\\n      r[2:]  (ab)cded      Nope...\\n      r[3:] (abc)ded       Yes! Return abc + dedcba"
		},
		{
			"lc_ans_id":"60106",
			"view":"7885",
			"top":"4",
			"title":"My 9-lines three pointers Java solution with explanation",
			"vote":"54",
			"content":"## Explanation ##\\n\\nThe key point is to find the longest palindrome starting from the first character, and then reverse the remaining part as the prefix to s. Any advice will be welcome!\\n\\n\\n    public String shortestPalindrome(String s) {\\n        int i = 0, end = s.length() - 1, j = end; char chs[] = s.toCharArray();\\n        while(i < j) {\\n             if (chs[i] == chs[j]) {\\n                 i++; j--;\\n             } else { \\n                 i = 0; end--; j = end;\\n             }\\n        }\\n        return new StringBuilder(s.substring(end+1)).reverse().toString() + s;\\n    }"
		},
		{
			"lc_ans_id":"60096",
			"view":"5003",
			"top":"5",
			"title":"My easily understandable but time consuming C++ solution",
			"vote":"44",
			"content":"The key idea is to first reverse the string, then check the max length from n to 0\\n\\n    class Solution {\\n    public:\\n        string shortestPalindrome(string s) {\\n            string s2=s;\\n            reverse(s2.begin(),s2.end());\\n            int n=s.size(),l;\\n            for(l=n;l>=0;l--)\\n            {\\n                if(s.substr(0,l)==s2.substr(n-l))\\n                    break;\\n            }\\n            return s2.substr(0,n-l)+s;\\n        }\\n    };"
		},
		{
			"lc_ans_id":"60216",
			"view":"4037",
			"top":"6",
			"title":"A KMP based Java solution with explanation",
			"vote":"31",
			"content":"The Idea of using KMP to find the shortest palindrome has been proposed in the previous post but did not have a very clear explanation on how this simple piece of code works. I will post my own understanding of why KMP method works well on this problem followed by my thinking process. \\n\\nFirst of All, My origin thought on this problem is to find the longest palindrome from the starting character of the string. Then we can just adding the reverse of the remaining characters to the front of the origin string to get the required shortest palindrome. However, the time complexity for finding the longest palindrome from front can cost O(n^2) and will cause a TLE when coding in Java.\\n\\nThen I found this solution post [C++ 8 ms KMP-based O(n) time & O(n) memory solution][1]\\n\\n\\n  [1]: https://leetcode.com/discuss/36807/c-8-ms-kmp-based-o-n-time-&-o-n-memory-solution\\n \\nThe code and the idea were great but the explanation was somehow lacking some insight of how people construct this solution. After read the code as well as the provided explanation, I became quiet confused with the following questions:\\n\\n1. Why should we have a combined string and why this string should be combined like this. Can we combined the string with the reverse string first and the origin string second?\\n2. What's the use of the array/vector and what value does it store? Is the numeric value represent length or something else?\\n3. What is \"recursively\" updating the index means?\\n\\nIn order to answer these questions, we have to look back to my origin idea which is finding the longest palindrome from the front. In fact the KMP solution use a similar idea which is **finding the longest prefix which has an identical counter part string that ends at the tail of the combined string(longest suffix)**  For example, let's say we have a string \"abac#caba\", then the qualified string will be \"aba\". \\nHow can we find this string? The KMP method provide us with a way to accomplish that.The detail implementation is using an array of the length of the combined string **to store the index of the character which need to be compared with the next character if current character matches the prefix's last character**. If they are the same, the index that need to be stored for the next character will be the previous stored index+1. Otherwise, we will jump further back to the index of the index to perform the same procedure until the index become zero. Then in the end, the value-1 in the last array element will represent the longest common prefix's last index value and we find the longest common prefix. Since these two strings are reversed and identical string, it must be a palindrome which fulfills my origin goal of finding the longest palindrome from the starting character. \\n\\nOne example for the above process for the string s **\"abac#caba\"**. we will have the stored indexes be **\"0,0,1,0,0,1,2,3\"** .Let's say we are at index 7 of the string s and the character is 'b' and in the array we have 1 for the previous index 6. This means the character at index 1 will need to be compared with character b to decide whether the common prefix from the front can continue to grow or not. Since both characters at  index 1 and at index 7 are 'b', the common prefix grows into length 2 which is\"ab\". \\n\\nBack to the first question, since the KMP method will help us find the longest prefix that exist in the body of the new string and we want to find the longest palindrome prefix of the origin string. We have to have the origin string at front and reverse string follows. For the second question, the array store index of the prefix that need to be match for the next character. For the last question, the recursive update happens when the matching failure so we jump to the further back to match early index in the prefix.\\n\\nBelow is my AC code in Java \\n\\n\\n    public class Solution {\\n        public String shortestPalindrome(String s) {\\n            if(s.length()<=1) return s;\\n            String new_s = s+\"#\"+new StringBuilder(s).reverse().toString();\\n            int[] position = new int[new_s.length()];\\n            \\n            for(int i=1;i<position.length;i++)\\n            {\\n                int pre_pos = position[i-1];\\n                while(pre_pos>0 && new_s.charAt(pre_pos)!=new_s.charAt(i))\\n                    pre_pos = position[pre_pos-1];\\n                position[i] = pre_pos+((new_s.charAt(pre_pos)==new_s.charAt(i))?1:0);\\n            }\\n            \\n            return new StringBuilder(s.substring(position[position.length-1])).reverse().toString()+s;\\n        }\\n    }"
		},
		{
			"lc_ans_id":"60243",
			"view":"4469",
			"top":"7",
			"title":"Accepted 4ms c++ solution, different with KMP-based solution and easy understand.",
			"vote":"17",
			"content":"For this problem,  [KMP-based solution][1] is a very typical and classic O(n) solution. Here is a different solution, it's also O(n), and I think it is more easy to understand.\\n\\nIn order to slove this problem, the key is to get the length of the longest palindromic prefix substring. if the length of s is `len`, and the length of the longest palindromic prefix substring is `longest`, the remaining substring will be `s.substr(longest, len - longest)`, than we should reverse the remaining substring and adding it in front of s.\\n\\nFor example, if s is `\"abacbbcda\"`, so the longest palindromic prefix substring is `\"aba\"`(not `\"cbbc\"` because it's not prefix string), and the remaining substring is `\"cbbcda\"`, we reverse the remaining substring and get `\"adcbbc\"`, so the result is `\"adcbbc\" + \"abacbbcda\"`.\\n\\nThe follow is my c++ solution, only 4ms. Please note that the condition in for loop is `begin <= len / 2` instead of `begin < len`, because if `begin > len / 2`, the substring can not be prefix string, so there is no need to continue.\\n\\n**Update: I made wrong analysis, the complexity is O(N^2) but not O(N). Thanks very much for Sammax's reminder.**\\n\\n    class Solution {\\n    public:\\n        std::string shortestPalindrome(std::string s) {\\n    \\t\\tint len = s.length();\\n    \\t\\tif (len < 2)\\n    \\t\\t\\treturn s;\\n\\t\\t\\t// calculate the length of the longest palindromic prefix substring.\\n    \\t\\tint longest = 1, start, end;\\n    \\t\\tfor (int begin = 0; begin <= len / 2;) {\\n    \\t\\t\\tstart = end = begin;\\n    \\t\\t\\twhile (end < len - 1 && s[end + 1] == s[end])\\n    \\t\\t\\t\\t++end;\\n    \\t\\t\\tbegin = end + 1;\\n    \\t\\t\\twhile (end < len - 1 && start > 0 && s[end + 1] == s[start - 1]) {\\n    \\t\\t\\t\\t++end;\\n    \\t\\t\\t\\t--start;\\n    \\t\\t\\t}\\n\\t\\t\\t\\t// start == 0 means the palindromic substring is also prefix string.\\n    \\t\\t\\tif (start == 0 && longest < end - start + 1)\\n    \\t\\t\\t\\tlongest = end - start + 1;\\n    \\t\\t}\\n\\t\\t\\t// reverse the remaining substring and adding it in front of s.\\n    \\t\\tstd::string remaining = s.substr(longest, len - longest);\\n    \\t\\tstd::reverse(remaining.begin(), remaining.end());\\n    \\t\\treturn remaining + s;\\n        }\\n    };\\n\\n  [1]: https://leetcode.com/discuss/36807/c-8-ms-kmp-based-o-n-time-&-o-n-memory-solution"
		},
		{
			"lc_ans_id":"60151",
			"view":"2125",
			"top":"8",
			"title":"Accepted C++ solution, easy to understand.",
			"vote":"11",
			"content":"The general idea is very simple: reverse s at first and compare substr of s with its reversed version.\\n\\n\\n    string shortestPalindrome(string s)\\n        {\\n            int n = s.size();\\n            if(n == 0) return s;\\n            \\n            int i = n;\\n            string v = s; \\n            reverse(v.begin(), v.end());  //Reverse s.\\n            \\n            for(; i >= 1; --i)\\n            {\\n                if(s.substr(0, i) == v.substr(n - i)) break;    //palindrome?\\n            }\\n            for(; i < s.size(); i += 2) s = s[i] + s;   //Construct\\n            return s;\\n        }"
		},
		{
			"lc_ans_id":"60261",
			"view":"2529",
			"top":"9",
			"title":"Python solution(KMP)",
			"vote":"10",
			"content":"    class Solution:\\n    # @param {string} s\\n    # @return {string}\\n    def shortestPalindrome(self, s):\\n        A=s+\"*\"+s[::-1]\\n        cont=[0]\\n        for i in range(1,len(A)):\\n            index=cont[i-1]\\n            while(index>0 and A[index]!=A[i]):\\n                index=cont[index-1]\\n            cont.append(index+(1 if A[index]==A[i] else 0))\\n        return s[cont[-1]:][::-1]+s"
		}
	],
	"id":"214",
	"title":"Shortest Palindrome",
	"content":"<p>\r\nGiven a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.\r\n</p>\r\n\r\n<p>For example: </p>\r\n<p>Given <code>\"aacecaaa\"</code>, return <code>\"aaacecaaa\"</code>.</p>\r\n<p>Given <code>\"abcd\"</code>, return <code>\"dcbabcd\"</code>.</p>\r\n\r\n<p><b>Credits:</b><br />Special thanks to <a href=\"https://leetcode.com/discuss/user/ifanchu\">@ifanchu</a> for adding this problem and creating all test cases. Thanks to <a href=\"https://leetcode.com/discuss/user/Freezen\">@Freezen</a> for additional test cases.</p>",
	"frequency":"397",
	"ac_num":"49080"
}