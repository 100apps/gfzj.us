{
	"difficulty":"3",
	"submit_num":"79965",
	"show_id":"312",
	"leetcode_id":"312",
	"answers":[
		{
			"lc_ans_id":"76228",
			"view":"59740",
			"top":"0",
			"title":"Share some analysis and explanations",
			"vote":"493",
			"content":"**See [here for a better view](http://algobox.org/burst-balloons/)**\\n\\n**Be Naive First**\\n\\nWhen I first get this problem, it is far from dynamic programming to me. I started with the most naive idea the backtracking.\\n\\nWe have n balloons to burst, which mean we have n steps in the game. In the i th step we have n-i balloons to burst, i = 0~n-1. Therefore we are looking at an algorithm of O(n!). Well, it is slow, probably works for n < 12 only.\\n\\nOf course this is not the point to implement it. We need to identify the redundant works we did in it and try to optimize.\\n\\nWell, we can find that for any balloons left the maxCoins does not depends on the balloons already bursted. This indicate that we can use memorization (top down) or dynamic programming (bottom up) for all the cases from small numbers of balloon until n balloons. How many cases are there?  For k balloons there are C(n, k) cases and for each case it need to scan the k balloons to compare. The sum is quite big still. It is better than O(n!) but worse than O(2^n).\\n\\n\\n**Better idea**\\n\\nWe then think can we apply the divide and conquer technique? After all there seems to be many self similar sub problems from the previous analysis.\\n\\nWell,  the nature way to divide the problem is burst one balloon and separate the balloons into 2 sub sections one on the left and one one the right. However, in this problem the left and right become adjacent and have effects on the maxCoins in the future.\\n\\nThen another interesting idea come up. Which is quite often seen in dp problem analysis. That is reverse thinking. Like I said the coins you get for a balloon does not depend on the balloons already burst. Therefore\\ninstead of divide the problem by the first balloon to burst, we divide the problem by the last balloon to burst. \\n\\nWhy is that? Because only the first and last balloons we are sure of their adjacent balloons before hand!\\n\\nFor the first we have `nums[i-1]*nums[i]*nums[i+1]` for the last we have `nums[-1]*nums[i]*nums[n]`.\\n\\n\\nOK. Think about n balloons if i is the last one to burst, what now?\\n\\nWe can see that the balloons is again separated into 2 sections. But this time since the balloon i is the last balloon of all to burst, the left and right section now has well defined boundary and do not affect each other! Therefore we can do either recursive method with memoization or dp.\\n\\n**Final**\\n\\nHere comes the final solutions. Note that we put 2 balloons with 1 as boundaries and also burst all the zero balloons in the first round since they won't give any coins.\\nThe algorithm runs in O(n^3) which can be easily seen from the 3 loops in dp solution.\\n\\n**Java D&C with Memoization**\\n\\n    public int maxCoins(int[] iNums) {\\n        int[] nums = new int[iNums.length + 2];\\n        int n = 1;\\n        for (int x : iNums) if (x > 0) nums[n++] = x;\\n        nums[0] = nums[n++] = 1;\\n\\n\\n        int[][] memo = new int[n][n];\\n        return burst(memo, nums, 0, n - 1);\\n    }\\n\\n    public int burst(int[][] memo, int[] nums, int left, int right) {\\n        if (left + 1 == right) return 0;\\n        if (memo[left][right] > 0) return memo[left][right];\\n        int ans = 0;\\n        for (int i = left + 1; i < right; ++i)\\n            ans = Math.max(ans, nums[left] * nums[i] * nums[right] \\n            + burst(memo, nums, left, i) + burst(memo, nums, i, right));\\n        memo[left][right] = ans;\\n        return ans;\\n    }\\n    // 12 ms\\n\\n**Java DP**\\n\\n    public int maxCoins(int[] iNums) {\\n        int[] nums = new int[iNums.length + 2];\\n        int n = 1;\\n        for (int x : iNums) if (x > 0) nums[n++] = x;\\n        nums[0] = nums[n++] = 1;\\n\\n\\n        int[][] dp = new int[n][n];\\n        for (int k = 2; k < n; ++k)\\n            for (int left = 0; left < n - k; ++left) {\\n                int right = left + k;\\n                for (int i = left + 1; i < right; ++i)\\n                    dp[left][right] = Math.max(dp[left][right], \\n                    nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right]);\\n            }\\n\\n        return dp[0][n - 1];\\n    }\\n    // 17 ms\\n\\n**C++ DP**\\n\\n    int maxCoinsDP(vector<int> &iNums) {\\n        int nums[iNums.size() + 2];\\n        int n = 1;\\n        for (int x : iNums) if (x > 0) nums[n++] = x;\\n        nums[0] = nums[n++] = 1;\\n\\n\\n        int dp[n][n] = {};\\n        for (int k = 2; k < n; ++k) {\\n            for (int left = 0; left < n - k; ++left)\\n                int right = left + k;\\n                for (int i = left + 1; i < right; ++i)\\n                    dp[left][right] = max(dp[left][right],\\n                         nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right]);\\n            }\\n\\n        return dp[0][n - 1];\\n    }\\n    // 16 ms\\n\\n**Python DP**\\n\\n    def maxCoins(self, iNums):\\n        nums = [1] + [i for i in iNums if i > 0] + [1]\\n        n = len(nums)\\n        dp = [[0]*n for _ in xrange(n)]\\n\\n        for k in xrange(2, n):\\n            for left in xrange(0, n - k):\\n                right = left + k\\n                for i in xrange(left + 1,right):\\n                    dp[left][right] = max(dp[left][right],\\n                           nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right])\\n        return dp[0][n - 1]\\n\\n    # 528ms"
		},
		{
			"lc_ans_id":"76232",
			"view":"13861",
			"top":"1",
			"title":"C++ dynamic programming, O(N^3), 32 ms, with comments",
			"vote":"55",
			"content":"    int maxCoins(vector<int>& nums) {\\n        int N = nums.size();\\n        nums.insert(nums.begin(), 1);\\n        nums.insert(nums.end(), 1);\\n    \\n        // rangeValues[i][j] is the maximum # of coins that can be obtained\\n        // by popping balloons only in the range [i,j]\\n        vector<vector<int>> rangeValues(nums.size(), vector<int>(nums.size(), 0));\\n        \\n        // build up from shorter ranges to longer ranges\\n        for (int len = 1; len <= N; ++len) {\\n            for (int start = 1; start <= N - len + 1; ++start) {\\n                int end = start + len - 1;\\n                // calculate the max # of coins that can be obtained by\\n                // popping balloons only in the range [start,end].\\n                // consider all possible choices of final balloon to pop\\n                int bestCoins = 0;\\n                for (int final = start; final <= end; ++final) {\\n                    int coins = rangeValues[start][final-1] + rangeValues[final+1][end]; // coins from popping subranges\\n                    coins += nums[start-1] * nums[final] * nums[end+1]; // coins from final pop\\n                    if (coins > bestCoins) bestCoins = coins;\\n                }\\n                rangeValues[start][end] = bestCoins;\\n            }\\n        }\\n        return rangeValues[1][N];\\n    }"
		},
		{
			"lc_ans_id":"76227",
			"view":"12533",
			"top":"2",
			"title":"Java DP solution with detailed explanation, O(n^3)",
			"vote":"39",
			"content":"This solution is inspired by The_Duck with his C++ solution\\n\\nhttps://leetcode.com/discuss/72186/c-dynamic-programming-o-n-3-1100-ms-with-comments\\n\\nHowever, I would give an explanation based on my own understanding. \\n\\nThe basic idea is that we can find the maximal coins of a subrange by trying every possible final burst within that range. Final burst means that we should burst balloon i as the very last one and burst all the other balloons in whatever order. dp[i][j] means the maximal coins for range [i...j]. In this case, our final answer is dp[0][nums.length - 1]. \\n\\nWhen finding the maximal coins within a range [start...end], since balloon i is the last one to burst, we know that in previous steps we have already got maximal coins of range[start .. i - 1] and range[i + 1 .. start], and the last step is to burst ballon i and get the product of balloon to the left of i, balloon i, and ballon to the right of i. In this case, balloon to the left/right of i is balloon start - 1 and balloon end + 1. Why? Why not choosing other balloon in range [0...start - 1] and [end + 1...length] because the maximal coins may need other balloon as final burst?\\n\\nIn my opinion, it's because this subrange will only be used by a larger range when it's trying for every possible final burst. It will be like [larger start.....start - 1, [start .. end] end + 1/ larger end], when final burst is at index start - 1, the result of this sub range will be used, and at this moment, start - 1 will be there because it's the final burst and end + 1 will also be there because is out of range. Then we can guarantee start - 1 and end + 1 will be there as adjacent balloons of balloon i for coins. That's the answer for the question in previous paragraph.\\n\\n\\n    public class Solution {\\n    public int maxCoins(int[] nums) {\\n        if (nums == null || nums.length == 0) return 0;\\n        \\n        int[][] dp = new int[nums.length][nums.length];\\n        for (int len = 1; len <= nums.length; len++) {\\n            for (int start = 0; start <= nums.length - len; start++) {\\n                int end = start + len - 1;\\n                for (int i = start; i <= end; i++) {\\n                    int coins = nums[i] * getValue(nums, start - 1) * getValue(nums, end + 1);\\n                    coins += i != start ? dp[start][i - 1] : 0; // If not first one, we can add subrange on its left.\\n                    coins += i != end ? dp[i + 1][end] : 0; // If not last one, we can add subrange on its right\\n                    dp[start][end] = Math.max(dp[start][end], coins);\\n                }\\n            }\\n        }\\n        return dp[0][nums.length - 1];\\n    }\\n    \\n    private int getValue(int[] nums, int i) { // Deal with num[-1] and num[num.length]\\n        if (i < 0 || i >= nums.length) {\\n            return 1;\\n        }\\n        return nums[i];\\n    }\\n}"
		},
		{
			"lc_ans_id":"76230",
			"view":"6738",
			"top":"3",
			"title":"C++ dp detailed explanation",
			"vote":"27",
			"content":"the visualization help me to understand hope it can help you too.\\n\\n   1\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb71 \\n\\nadd two 1 at beginning and end of nums, each \\xb7 represent each number in nums.\\n\\n   len is the subinterval length, it grows from 1 to full length of orignal nums string.\\n\\n   the following illustrations demonstrate how the subinterval shift from left to right. (len = 7 in the illustration)\\n\\n   for each len, when shifted to rightmost, increase len and do the shift again. this way we can evaluate all possible subintervals.\\n\\n   for each subinterval, in the innermost for loop, find which balloon to burst LAST that will give us the most coins for that subinterval. <- IMPORTANT TO UNDERSTAND THIS\\n\\n   `dp[left][right]` is the maximum coins we can get from left to right. note when  left > right, it is 0\\n    \\n       1\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb71    (len = 7)\\n        |     |\\n      left  right\\n      \\n       1\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb71\\n               |     |\\n             left  right\\n              \\n       1\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb7\\xb71\\n                    |     |\\n                  left  right\\n\\n   \\n   for the example [3, 1, 5, 8], the dp matrix is updated like this\\n\\n    0    0    0    0    0    0\\n    0    3    0    0    0    0\\n    0    0    15   0    0    0\\n    0    0    0    40   0    0\\n    0    0    0    0    40   0\\n    0    0    0    0    0    0\\n\\nthen\\n\\n    0    0    0    0    0    0\\n    0    3    30   0    0    0\\n    0    0    15   135  0    0\\n    0    0    0    40   48   0\\n    0    0    0    0    40   0\\n    0    0    0    0    0    0\\n\\nat last\\n   \\n    0    0    0    0    0    0\\n    0    3    30   159  167  0\\n    0    0    15   135  159  0\\n    0    0    0    40   48   0\\n    0    0    0    0    40   0\\n    0    0    0    0    0    0\\nthe code is like most others.\\n\\n    class Solution {\\n    public:\\n        int maxCoins(vector<int>& nums) {\\n            int n = nums.size();\\n            nums.insert(nums.begin(), 1);\\n            nums.push_back(1);\\n            vector<vector<int>> dp(nums.size(), vector<int>(nums.size(), 0));\\n            for (int len = 1; len <= n; ++len)\\n                for (int left = 1; left <= n - len + 1; ++left) {\\n                    int right = left + len - 1;\\n                    for (int k = left; k <= right; ++k)\\n                        dp[left][right] = max(dp[left][right], nums[left-1]*nums[k]*nums[right+1] + dp[left][k-1] + dp[k+1][right]);\\n                }\\n            return dp[1][n];\\n        }\\n    };"
		},
		{
			"lc_ans_id":"76243",
			"view":"3659",
			"top":"4",
			"title":"Python DP N^3 Solutions",
			"vote":"19",
			"content":"Analysis:\\nWe need to find a way to divide the problems. If we start from the first balloon, we can't determine the left/right for the number in each sub-problem, If we start from the last balloon, we can. \\nWe can see the transformation equation is very similar to the one for matrix multiplication.\\n\\n    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j]) # i < k < j\\n\\nThis is a typical interval DP problem. Because the order of the number extracted matters, we need to do a O(n^3) DP. If we only need to expand the interval to the left or right, we only need to do a O(n^2) DP. \\n\\nTop-down:\\n\\n    class Solution(object):\\n        def maxCoins(self, nums):\\n            \"\"\"\\n            :type nums: List[int]\\n            :rtype: int\\n            \"\"\"\\n            nums = [1] + nums + [1]\\n            n = len(nums)\\n            dp = [[0] * n for _ in xrange(n)]\\n    \\n            def calculate(i, j):\\n                if dp[i][j] or j == i + 1: # in memory or gap < 2\\n                    return dp[i][j]\\n                coins = 0\\n                for k in xrange(i+1, j): # find the last balloon\\n                    coins = max(coins, nums[i] * nums[k] * nums[j] + calculate(i, k) + calculate(k, j))\\n                dp[i][j] = coins\\n                return coins\\n    \\n            return calculate(0, n-1)\\n\\nBottom-up:\\n   \\n\\n     class Solution(object):\\n            def maxCoins(self, nums):\\n                \"\"\"\\n                :type nums: List[int]\\n                :rtype: int\\n                \"\"\"\\n                nums = [1] + nums + [1] # build the complete array \\n                n = len(nums)\\n                dp = [[0] * n for _ in xrange(n)]\\n        \\n                for gap in xrange(2, n):\\n                    for i in xrange(n-gap):\\n                        j = i + gap\\n                        for k in xrange(i+1, j):\\n                            dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\\n                return dp[0][n-1]"
		},
		{
			"lc_ans_id":"76279",
			"view":"995",
			"top":"5",
			"title":"My understanding of the n^3 dp solution, comments, explanation.",
			"vote":"8",
			"content":"Honestly, I was a little confused when I read the most voted solution. I get the idea, but I had no clue how to fill in the dynamic matrix, so if you have the same confusion here, my comment might help you understand how to actually fill in the blanks.\\n\\n 1. Burst all the zeros to avoid hassles. Pad 1 on the both sides of the array, that's my `padded_arr`, and I use `nonZeroNum ` to represent the actual non-zero numbers.\\nReturn when there is 0/1 non-zero numbers.\\n\\n 2. create a dp matrix using the dimension`nonZeroNum + 2` x   `nonZeroNum + 2`, the reason is that, on the boundary condition, a.k.a, you are at the `1` on either end of the  `padded_arr`, those  `1` doesn't contribute to the coins. Since the element in the matrix is default to 0, you don't even have to internalize those elements.\\n\\n 3. In this dp matrix, we only update half of the elements, and that's the half upper triangle, when we do the update, it's from left to right, and from **bottom up**, so the last element updated is the element in the up right corner.\\n\\n 4. Ok, now comes the **important** part... The `dp[start][end] ` represents the maximum coins when you burst and only burst all the elements in the range of `[start, end], 'start' and 'end' inclusive`. In the inner loop, recursive from `start `to `end`, and that recursive element  `lastBurst` represents the last element to burst in this range. Since at that point of time, either both of   `start` and  `end` are already burst, or the `lastBurst` itself is  `start` or `end`, either way, the left and right neighbor should be `padded_arr[start -1] and padded_arr[end+1]`, rather than  `padded_arr[start] and padded_arr[end]`\\n\\n\\n        public class Solution {\\n        public int maxCoins(int[] nums) {\\n        if (nums == null || nums.length == 0) return 0;\\n    \\n        int[] padded_arr = new int[nums.length+2];\\n        int idx = 1;\\n        padded_arr[0] = 1;\\n        \\n        for(int n:nums){\\n            if(n != 0){\\n                padded_arr[idx++] = n;\\n            }\\n        }\\n        if(idx == 1) return 0;\\n        if(idx == 2) return padded_arr[1];\\n        \\n        int nonZeroNum = idx-1;\\n        padded_arr[idx++] = 1;\\n        \\n        //System.out.println(\"nonZeroNum = \"+ nonZeroNum);\\n\\n\\n        \\n        int[][] dp = new int[nonZeroNum+2][nonZeroNum+2];\\n        \\n        for(int len = 1; len<=nums.length; len++){\\n            for(int start = 1; start<=nonZeroNum-len+1; start++){\\n                int end = start + len -1;\\n                int curMaxCoin = -1;\\n                for(int lastBurset = start; lastBurset<=end; lastBurset++){\\n                    curMaxCoin = Math.max(curMaxCoin, dp[start][lastBurset-1] + dp[lastBurset+1][end] + padded_arr[lastBurset]* padded_arr[start -1] * padded_arr[end+1]);\\n                }\\n                dp[start][end] = curMaxCoin;\\n            }\\n        }\\n        \\n        return dp[1][nonZeroNum];\\n        } \\n    }"
		},
		{
			"lc_ans_id":"76281",
			"view":"1801",
			"top":"6",
			"title":"Neat Java Solution",
			"vote":"8",
			"content":"    public int maxCoins(int[] nums) {\\n        //DP: the result depends on the last burst balloon, which seprate the array into 2 subarray. \\n        //DP: by adding 1 to head and tail, DP[i,i]=0 and DP[i,i+2]=num[i]*num[i+1]*num[i+2]\\n        int n=nums.length+2;\\n        int[] newnums=new int[n];\\n        for(int i=0;i<n-2;i++){\\n            newnums[i+1]=nums[i];\\n        }\\n        newnums[0]=newnums[n-1]=1;\\n        int[][] DP=new int[n][n];\\n        for(int k=2;k<n;k++){\\n            for(int l=0;l+k<n;l++){\\n                int h=l+k;\\n                for(int m=l+1;m<h;m++){\\n                    DP[l][h]=Math.max(DP[l][h],newnums[l]*newnums[m]*newnums[h]+DP[l][m]+DP[m][h]);\\n                }\\n            }\\n        }\\n        return DP[0][n-1];\\n    }"
		},
		{
			"lc_ans_id":"76245",
			"view":"1022",
			"top":"7",
			"title":"Easiest Java Solution",
			"vote":"7",
			"content":"The subproblems are overlapped. So we can use divide and conquer + cache.\\n* Balloons `0, 1, ..., n - 1`\\n* What is the max value if we burst  all of them `[0,  n - 1]`?\\n* Let's first consider bursting `[start, end]`\\n* Imagine we burst index `i` at the end\\n* `[start, ... i - 1, (i), i + 1 ... end]`\\n* Before the end, we already bursted `[start, i - 1]` and `[i + 1, end]`\\n* Before the end, boundaries `start - 1`, `i`, `end + 1` are always there\\n* This helps us calculate coins without worrying about details inside `[start, i - 1]` and `[i + 1, end]`\\n* So the range can be divided into\\n* `start - 1`, `maxCoin(start, i - 1)`, `i`, `maxCoins(i + 1, end)`, `end + 1`\\n\\nHope it helps!\\n\\n    public int maxCoins(int[] nums) {\\n        int[][] dp = new int[nums.length][nums.length];\\n        return maxCoins(nums, 0, nums.length - 1, dp);\\n    }\\n    \\n    public int maxCoins(int[] nums, int start, int end, int[][] dp) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        if (dp[start][end] != 0) {\\n            return dp[start][end];\\n        }\\n        int max = nums[start];\\n        for (int i = start; i <= end; i++) {\\n            int val = maxCoins(nums, start, i - 1, dp) + \\n                      get(nums, i) * get(nums, start - 1) * get(nums, end + 1) + \\n                      maxCoins(nums, i + 1, end, dp);\\n                      \\n            max = Math.max(max, val);\\n        }\\n        dp[start][end] = max;\\n        return max;\\n    }\\n    \\n    public int get(int[] nums, int i) {\\n        if (i == -1 || i == nums.length) {\\n            return 1;\\n        }\\n        return nums[i];\\n    }"
		},
		{
			"lc_ans_id":"76275",
			"view":"1304",
			"top":"8",
			"title":"Java Solution with Explanations",
			"vote":"5",
			"content":"This is the kind of problem we use dynamic programming. WHY? it's very challenging to figure out what's the pattern of optimal burst order. In fact, there's no clear rule that makes sense. Shall we burst the balloon with maximum coins? Or shall we burst the one with least. This is the time we introduce Dynamic Programming, as we want to solve the big problem from small subproblem. It is clear that the amount of coins you gain relies on your previous steps. This is a clear signal of using DP.\\n\\nThe hard part is to define the subproblem. Think out what is clear in this problem? Let's scale this problem down. What is the fact you know for sure? Say if the array has only 1 balloon. The maximum coin would be the coin inside this ballon. This is the starting point! So let's move on to array with 2 balloons. Here, we have 2 cases, which of the balloon is the last one. The last one times the coins in boundary is the gain we get in the end. That is to say, last balloon is the key. Since we don't know the pattern of optimal. We just blindly iterate each balloon and check what's total gain if it's the last ballon.\\n\\nLet's use dp[i][j] to denote maximum gain from balloon range i to j. We try out each balloon as last burst in this range. Then the subproblem relation would be:\\n\\nforeach k in i to j:\\n dp[j][i] = max(array[j-1]*array[k]*array[i+1] + dp[j][k-1] + dp[k+1][i], dp[j][i]);\\n\\n    public class Solution {\\n    public int maxCoins(int[] nums) {\\n        // Extend list with head and tail (both are 1), index starts at 1\\n        int array[] = new int[nums.length + 2];\\n        array[0] = 1;\\n        array[array.length-1] = 1;\\n        for (int i = 0; i < nums.length; i++) {\\n            array[i+1] = nums[i];\\n        }\\n\\n        // Initialize DP arrays, 1 index based\\n        int dp[][] = new int[array.length][array.length]; //dp[i][j] stands for max coins at i step, burst j\\n        for (int i =0; i < array.length; i++) {\\n            for (int j = 0; j < array.length; j++) {\\n                dp[i][j] = 0;\\n            }\\n        }\\n\\n        for (int i=1; i< array.length-1; i++) {\\n            for (int j=i; j >=1; j--) {\\n                // k as last\\n                for (int k=j; k <= i; k++) {\\n                    dp[j][i] = Math.max(array[j-1]*array[k]*array[i+1] + dp[j][k-1] + dp[k+1][i], dp[j][i]);\\n                }\\n            }\\n        }\\n\\n        return dp[1][array.length-2];\\n    }\\n}\\n\\n\\n\\n\\n  [1]: http://easyleetcode.blogspot.com/?view=classic"
		},
		{
			"lc_ans_id":"76263",
			"view":"1025",
			"top":"9",
			"title":"My readable Python ~500ms accepted solution with explanation",
			"vote":"5",
			"content":"Before started, I removed all balloons with number 0, and put an additional \"1\" at the beginning and end, for that based on the definition of this problem, one can imagine there're implicitly two \"1\" balloons at the beginning and end but would never be burst. The balloon array now becomes: [1,...,x,x,x,x,x,x,...,1], where the x's are original nonzero balloons.\\n\\nI feel the trickiest part is to sort out what you really need to calculate in each DP sub-problem. In each sub-problem I have 3 pointers \"l\", \"m\" and \"r\" located as below:\\n\\n           l   m     r\\n      [...,x,x,x,x,x,x,...]\\nI focus on the region (l,r), and assign m as the last balloon to be burst in this region. I need to calculate:\\n\\n- max coins after the balloons in region (l,m) are burst\\n\\n- max coins after the balloons in region (m,r) are burst\\n\\n- nums[l]*nums[m]*nums[r]\\n\\nNote I'm using exclusive region notation, which means the lth and rth balloons are not burst in this sub-problem.\\n\\nWith each iteration I gradually increase the interval between balloons l and r. Such process is equivalent to beginning from the 1st burst balloon. As the interval to be considered increases, all the possible combination of sub-intervals within current interval would have been calculated in previous iterations.\\n\\nIn the end I just return the regional max coins excluding the first and the last balloons, which are the 2 extra balloons I appended before started (now you can see why they're needed).\\n\\n    def maxCoins(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        nums = [1]+[n for n in nums if n!=0]+[1]\\n        regional_max_coins = [[0 for i in xrange(len(nums))] for j in xrange(len(nums))]\\n        for balloons_to_burst in xrange(1, len(nums)-1): # number of balloons in (l,r) region\\n            for l in xrange(0, len(nums)-balloons_to_burst-1): # for m and r to be assigned legally\\n                r = l+balloons_to_burst+1\\n                for m in xrange(l+1,r):\\n                    regional_max_coins[l][r] = max(regional_max_coins[l][r], regional_max_coins[l][m]+regional_max_coins[m][r]+nums[l]*nums[m]*nums[r])\\n        return regional_max_coins[0][-1]"
		}
	],
	"id":"312",
	"title":"Burst Balloons",
	"content":"<p>\r\n    Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a\r\n    number on it represented by array <code>nums</code>.\r\n\r\n    You are asked to burst all the balloons. If the you burst\r\n    balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code>\r\n    and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code>\r\n    then becomes adjacent.\r\n</p>\r\n<p>\r\n    Find the maximum coins you can collect by bursting the balloons wisely.\r\n</p>\r\n<p>\r\n    <b>Note:</b> <br/>\r\n    (1) You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.<br/>\r\n    (2) 0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100\r\n</p>\r\n\r\n\r\n<p>\r\n    <b>Example:</b>\r\n</p>\r\n<p>\r\n    Given <code>[3, 1, 5, 8]</code>\r\n</p>\r\n<p>\r\n    Return <code>167</code>\r\n</p>\r\n<pre>\r\n    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []\r\n   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\r\n</pre>\r\n\r\n<p><b>Credits:</b><br />Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>",
	"frequency":"452",
	"ac_num":"34827"
}