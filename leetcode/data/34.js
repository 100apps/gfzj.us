{
	"difficulty":"2",
	"submit_num":"547616",
	"show_id":"34",
	"leetcode_id":"34",
	"answers":[
		{
			"lc_ans_id":"14699",
			"view":"48766",
			"top":"0",
			"title":"Clean iterative solution with two binary searches (with explanation)",
			"vote":"276",
			"content":"The problem can be simply broken down as two binary searches for the begining and end of the range, respectively:\\n\\nFirst let's find the left boundary of the range. We initialize the range to [i=0, j=n-1]. In each step, calculate the middle element [mid = (i+j)/2]. Now according to the relative value of A[mid] to target, there are three possibilities:\\n\\n   1. If A[mid] < target, then the range must begins on the ***right*** of mid (hence i = mid+1 for the next iteration)\\n   2. If A[mid] > target, it means the range must begins on the ***left*** of mid (j = mid-1)\\n   3. If A[mid] = target, then the range must begins ***on the left of or at*** mid  (j= mid)\\n\\nSince we would move the search range to the same side for case 2 and 3, we might as well merge them as one single case so that less code is needed:\\n\\n   2*. If A[mid] >= target, j = mid;\\n\\nSurprisingly, 1 and 2* are the only logic you need to put in loop while (i < j). When the while loop terminates, the value of i/j is where the start of the range is. Why? \\n\\nNo matter what the sequence originally is, as we narrow down the search range, eventually we will be at a situation where there are only two elements in the search range. Suppose our target is 5, then we have only 7 possible cases:\\n\\n    case 1: [5 7] (A[i] = target < A[j])\\n\\tcase 2: [5 3] (A[i] = target > A[j])\\n    case 3: [5 5] (A[i] = target = A[j])\\n    case 4: [3 5] (A[j] = target > A[i])\\n    case 5: [3 7] (A[i] < target < A[j])\\n\\tcase 6: [3 4] (A[i] < A[j] < target)\\n\\tcase 7: [6 7] (target < A[i] < A[j])\\n\\nFor case 1, 2 and 3, if we follow the above rule, since mid = i => A[mid] = target in these cases, then we would set j = mid. Now the loop terminates and i and j both point to the first 5.  \\n\\nFor case 4, since A[mid] < target, then set i = mid+1. The loop terminates and both i and j point to 5.\\n\\nFor all other cases, by the time the loop terminates, A[i] is not equal to 5. So we can easily know 5 is not in the sequence if the comparison fails.\\n\\nIn conclusion, when the loop terminates, if A[i]==target, then i is the left boundary of the range; otherwise, just return -1;\\n\\nFor the right of the range, we can use a similar idea. Again we can come up with several rules:\\n\\n   1. If A[mid] > target, then the range must begins on the ***left*** of mid (j = mid-1)\\n   2. If A[mid] < target, then the range must begins on the ***right*** of mid (hence i = mid+1 for the next iteration)\\n   3. If A[mid] = target, then the range must begins ***on the right of or at*** mid  (i= mid) \\n\\nAgain, we can merge condition 2 and 3 into:\\n\\n    2* If A[mid] <= target, then i = mid;\\n\\nHowever, the terminate condition on longer works this time. Consider the following case:\\n\\n    [5 7], target = 5\\n\\t\\nNow A[mid] = 5, then according to rule 2, we set i = mid. This practically does nothing because i is already equal to mid. As a result, the search range is not moved at all!\\n\\nThe solution is by using a small trick: instead of calculating mid as mid = (i+j)/2, we now do:\\n\\n    mid = (i+j)/2+1\\n\\t\\nWhy does this trick work? When we use mid = (i+j)/2, the mid is rounded to the lowest integer. In other words, mid is always *biased* towards the left. This means we could have i == mid when j - i == mid, but we NEVER have j == mid. So in order to keep the search range moving, you must make sure the new i is set to something different than mid, otherwise we are at the risk that i gets stuck. But for the new j, it is okay if we set it to mid, since it was not equal to mid anyways. Our two rules in search of the left boundary happen to satisfy these requirements, so it works perfectly in that situation. Similarly, when we search for the right boundary, we must make sure i won't get stuck when we set the new i to i = mid. The easiest way to achieve this is by making mid *biased* to the right, i.e. mid = (i+j)/2+1.\\n\\nAll this reasoning boils down to the following simple code:\\n\\n    vector<int> searchRange(int A[], int n, int target) {\\n        int i = 0, j = n - 1;\\n        vector<int> ret(2, -1);\\n        // Search for the left one\\n        while (i < j)\\n        {\\n            int mid = (i + j) /2;\\n            if (A[mid] < target) i = mid + 1;\\n            else j = mid;\\n        }\\n        if (A[i]!=target) return ret;\\n        else ret[0] = i;\\n        \\n        // Search for the right one\\n        j = n-1;  // We don't have to set i to 0 the second time.\\n        while (i < j)\\n        {\\n            int mid = (i + j) /2 + 1;\\t// Make mid biased to the right\\n            if (A[mid] > target) j = mid - 1;  \\n            else i = mid;\\t\\t\\t\\t// So that this won't make the search range stuck.\\n        }\\n        ret[1] = j;\\n        return ret; \\n    }"
		},
		{
			"lc_ans_id":"14701",
			"view":"25944",
			"top":"1",
			"title":"A very simple Java solution, with only one binary search algorithm",
			"vote":"127",
			"content":"    public class Solution {\\n    \\tpublic int[] searchRange(int[] A, int target) {\\n    \\t\\tint start = Solution.firstGreaterEqual(A, target);\\n    \\t\\tif (start == A.length || A[start] != target) {\\n    \\t\\t\\treturn new int[]{-1, -1};\\n    \\t\\t}\\n    \\t\\treturn new int[]{start, Solution.firstGreaterEqual(A, target + 1) - 1};\\n    \\t}\\n    \\n    \\t//find the first number that is greater than or equal to target.\\n    \\t//could return A.length if target is greater than A[A.length-1].\\n    \\t//actually this is the same as lower_bound in C++ STL.\\n    \\tprivate static int firstGreaterEqual(int[] A, int target) {\\n    \\t\\tint low = 0, high = A.length;\\n    \\t\\twhile (low < high) {\\n    \\t\\t\\tint mid = low + ((high - low) >> 1);\\n    \\t\\t\\t//low <= mid < high\\n    \\t\\t\\tif (A[mid] < target) {\\n    \\t\\t\\t\\tlow = mid + 1;\\n    \\t\\t\\t} else {\\n    \\t\\t\\t\\t//should not be mid-1 when A[mid]==target.\\n    \\t\\t\\t\\t//could be mid even if A[mid]>target because mid<high.\\n    \\t\\t\\t\\thigh = mid;\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\treturn low;\\n    \\t}\\n    }"
		},
		{
			"lc_ans_id":"14707",
			"view":"17159",
			"top":"2",
			"title":"9-11 lines O(log n)",
			"vote":"60",
			"content":"Solution 1 : **Divide and Conquer with early breaks** : 56 ms\\n\\nThe O(log n) time isn't quite obvious, so I'll explain it below. Or you can take the challenge and prove it yourself :-)\\n\\n    def searchRange(self, nums, target):\\n        def search(lo, hi):\\n            if nums[lo] == target == nums[hi]:\\n                return [lo, hi]\\n            if nums[lo] <= target <= nums[hi]:\\n                mid = (lo + hi) / 2\\n                l, r = search(lo, mid), search(mid+1, hi)\\n                return max(l, r) if -1 in l+r else [l[0], r[1]]\\n            return [-1, -1]\\n        return search(0, len(nums)-1)\\n\\nThe `search` helper function returns an index range just like the requested `searchRange` function, but only searches in `nums[lo..hi]`. It first compares the end points and immediately returns `[lo, hi]` if that whole part of `nums` is full of `target`, and immediately returns `[-1, -1]` if `target` is outside the range. The interesting case is when `target` can be in the range but doesn't fill it completely.\\n\\nIn that case, we split the range in left and right half, solve them recursively, and combine their results appropriately. Why doesn't this explode exponentially? Well, let's call the numbers in the left half `A, ..., B` and the numbers in the right half `C, ..., D`. Now if one of them immediately return their `[lo, hi]` or `[-1, -1]`, then this doesn't explode. And if neither immediately returns, that means we have `A <= target <= B` and `C <= target <= D`. And since `nums` is sorted, we actually have `target <= B <= C <= target`, so `B = C = target`. **The left half thus ends with `target` and the right half starts with it.** I highlight that because it's important. Now consider what happens further. The left half gets halved again. Call the middle elements `a` and `b`, so the left half is `A, ..., a, b, ..., B`. Then `a <= target` and:\\n\\n - If `a < target`, then the call analyzing `A, ..., a` immediately returns `[-1, -1]` and we only look further into `b, ..., B` **which is again a part that ends with `target`**.\\n - If `a == target`, then `a = b = ... = B = target` and thus the call analyzing `b, ..., B` immediately returns its `[lo, hi]` and we only look further into `A, ..., a` **which is again a part that ends with `target`**.\\n\\nSame for the right half `C, ..., D`. So in the beginning of the search, as long as `target` is only in at most one of the two halves (so the other immediately stops), we have a single path. And if we ever come across the case where `target` is in both halves, then we split into *two* paths, but then each of those remains a single path. And both paths are only O(log n) long, so we have overall runtime O(log n).\\n\\nThis is btw based on [us917's solution](https://leetcode.com/discuss/4238/can-solution-be-obtained-in-one-pass?show=4425#a4425).\\n\\n---\\n\\nSolution 2 : **Two binary searches** : 56 ms\\n\\n    def searchRange(self, nums, target):\\n        def search(n):\\n            lo, hi = 0, len(nums)\\n            while lo < hi:\\n                mid = (lo + hi) / 2\\n                if nums[mid] >= n:\\n                    hi = mid\\n                else:\\n                    lo = mid + 1\\n            return lo\\n        lo = search(target)\\n        return [lo, search(target+1)-1] if target in nums[lo:lo+1] else [-1, -1]\\n\\nHere, my helper function is a simple binary search, telling me the first index where I could insert a number `n` into `nums` to keep it sorted. Thus, if `nums` contains `target`, I can find the first occurrence with `search(target)`. I do that, and if `target` isn't actually there, then I return `[-1, -1]`. Otherwise, I ask `search(target+1)`, which tells me the first index where I could insert `target+1`, which of course is one index behind the last index containing `target`, so all I have left to do is subtract 1.\\n\\n---\\n\\nSolution 3 : **Two binary searches, using the library**\\n\\nBinary search is so good and common that many languages have it in their standard library and you just need to figure out how to apply it to the problem at hand.\\n\\n**Python:**\\n\\n    def searchRange(self, nums, target):\\n        lo = bisect.bisect_left(nums, target)\\n        return [lo, bisect.bisect(nums, target)-1] if target in nums[lo:lo+1] else [-1, -1]\\n\\n**C++:**\\n\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        auto bounds = equal_range(nums.begin(), nums.end(), target);\\n        if (bounds.first == bounds.second)\\n            return {-1, -1};\\n        return {bounds.first - nums.begin(), bounds.second - nums.begin() - 1};\\n    }\\n\\nOr:\\n\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        int lo = lower_bound(nums.begin(), nums.end(), target) - nums.begin();\\n        if (lo == nums.size() || nums[lo] != target)\\n            return {-1, -1};\\n        int hi = upper_bound(nums.begin(), nums.end(), target) - nums.begin() - 1;\\n        return {lo, hi};\\n    }\\n\\n**Java:**\\n\\nWell, Java decided to be annoying and offer `Arrays.binSearch` but with *\"If the array contains multiple elements with the specified value, there is no guarantee which one will be found\"*. So it's useless for us. I'm not good at Java, though, so maybe I'm overlooking a way to still make it work. If you manage to do so, please let me know."
		},
		{
			"lc_ans_id":"14999",
			"view":"7979",
			"top":"3",
			"title":"Simple and strict O(logn) solution in Java using recursion",
			"vote":"38",
			"content":"    public class Solution {\\n        public int[] searchRange(int[] A, int target) {\\n            int[] range = {A.length, -1};\\n            searchRange(A, target, 0, A.length - 1, range);\\n            if (range[0] > range[1]) range[0] = -1; \\n            return range;\\n        }\\n        \\n        public void searchRange(int[] A, int target, int left, int right, int[] range) {\\n            if (left > right) return;\\n            int mid = left + (right - left) / 2;\\n            if (A[mid] == target) {\\n                if (mid < range[0]) {\\n                    range[0] = mid;\\n                    searchRange(A, target, left, mid - 1, range);\\n                }\\n                if (mid > range[1]) {\\n                    range[1] = mid;\\n                    searchRange(A, target, mid + 1, right, range);\\n                }\\n            } else if (A[mid] < target) {\\n                searchRange(A, target, mid + 1, right, range);\\n            } else {\\n                searchRange(A, target, left, mid - 1, range);\\n            }\\n        }\\n    }"
		},
		{
			"lc_ans_id":"14734",
			"view":"7308",
			"top":"4",
			"title":"Easy java O(logn) solution",
			"vote":"27",
			"content":"There must be two indices in the array. Which means, we can just simply apply to binary search twice to find each index of the target element.\\n\\n\\n    public class Solution {\\n    public int[] searchRange(int[] nums, int target) {\\n        int[] result = new int[2];\\n        result[0] = findFirst(nums, target);\\n        result[1] = findLast(nums, target);\\n        return result;\\n    }\\n    \\n    private int findFirst(int[] nums, int target){\\n        int idx = -1;\\n        int start = 0;\\n        int end = nums.length - 1;\\n        while(start <= end){\\n            int mid = (start + end) / 2;\\n            if(nums[mid] >= target){\\n                end = mid - 1;\\n            }else{\\n                start = mid + 1;\\n            }\\n            if(nums[mid] == target) idx = mid;\\n        }\\n        return idx;\\n    }\\n    \\n    private int findLast(int[] nums, int target){\\n        int idx = -1;\\n        int start = 0;\\n        int end = nums.length - 1;\\n        while(start <= end){\\n            int mid = (start + end) / 2;\\n            if(nums[mid] <= target){\\n                start = mid + 1;\\n            }else{\\n                end = mid - 1;\\n            }\\n            if(nums[mid] == target) idx = mid;\\n        }\\n        return idx;\\n    }\\n}"
		},
		{
			"lc_ans_id":"14717",
			"view":"3812",
			"top":"5",
			"title":"C++ binary search solution (lower_bound implementation).",
			"vote":"24",
			"content":"        \\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        int idx1 = lower_bound(nums, target);\\n        int idx2 = lower_bound(nums, target+1)-1;\\n        if (idx1 < nums.size() && nums[idx1] == target)\\n            return {idx1, idx2};\\n        else\\n            return {-1, -1};\\n    }\\n    \\n    int lower_bound(vector<int>& nums, int target) {\\n        int l = 0, r = nums.size()-1;\\n        while (l <= r) {\\n            int mid = (r-l)/2+l;\\n            if (nums[mid] < target)\\n                l = mid+1;\\n            else\\n                r = mid-1;\\n        }\\n        return l;\\n    }"
		},
		{
			"lc_ans_id":"14770",
			"view":"2966",
			"top":"6",
			"title":"The standard and clean c++ binary search implementation.",
			"vote":"15",
			"content":"Yeah, binary search is quite simple, but many people write complex and error-prone code.\\n\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        int start = 0, end = nums.size(), mid, left, right;\\n        while (start < end) {\\n            mid = (start + end) / 2;\\n            if (nums[mid] >= target)\\n                end = mid;\\n            else\\n                start = mid + 1;\\n        }\\n        left = start;\\n        start = 0, end = nums.size();\\n        while (start < end) {\\n            mid = (start + end) / 2;\\n            if (nums[mid] > target)\\n                end = mid;\\n            else\\n                start = mid + 1;\\n        }\\n        right = start;\\n        return left == right ? vector<int> {-1,-1} : vector<int> {left,right-1};\\n    }"
		},
		{
			"lc_ans_id":"14713",
			"view":"2403",
			"top":"7",
			"title":"Search for the position target-0.5 and target+0.5, a simple python code with a little trick",
			"vote":"14",
			"content":"    class Solution:\\n    # @param A, a list of integers\\n    # @param target, an integer to be searched\\n    # @return a list of length 2, [index1, index2]\\n    def searchRange(self, arr, target):\\n        start = self.binary_search(arr, target-0.5)\\n        if arr[start] != target:\\n            return [-1, -1]\\n        arr.append(0)\\n        end = self.binary_search(arr, target+0.5)-1\\n        return [start, end]\\n\\n    def binary_search(self, arr, target):\\n        start, end = 0, len(arr)-1\\n        while start < end:\\n            mid = (start+end)//2\\n            if target < arr[mid]:\\n                end = mid\\n            else:\\n                start = mid+1\\n        return start\\n\\nfor search the target+0.5 position we add something whatever to the list end\\n to get the right position for the edge case\\n\\ntake ([0,1,2,3,4,5], 5) for example:\\n\\nwe append 0 to the list end\\n\\n[0,1,2,3,4,5,0]\\n\\n[4,5,0]# start now is 4, end is 6, mid is 5,  start = mid+1 = 6, end the while loop\\n\\nfinally we get the 5.5 position == start == 6"
		},
		{
			"lc_ans_id":"14708",
			"view":"3749",
			"top":"8",
			"title":"Share my Concise Java O(logN) solution, just 1 time Binary Search, easy to understand",
			"vote":"12",
			"content":"This solution is to find the start and end index of target number with using just one time binary search\\n    \\n    public int[] searchRange(int[] nums, int target) {\\n    \\t\\tint[] res = {-1, -1};\\n    \\t\\tint lo = 0, hi = nums.length - 1;\\n    \\n    \\t\\t//lo is the start index of target\\n    \\t\\t//hi is the end index of target\\n    \\t\\twhile(nums[lo] < nums[hi]) {\\n    \\t\\t\\tint mid = lo + (hi - lo)/2;\\n    \\t\\t\\tif(nums[mid] > target) {//target is in the left half\\n    \\t\\t\\t\\thi = mid - 1;\\n    \\t\\t\\t} else if(nums[mid] < target) {// target is in the right half\\n    \\t\\t\\t\\tlo = mid + 1;\\n    \\t\\t\\t} else {//find target, then need to find the start and end point\\n    \\t\\t\\t\\tif(nums[lo] == nums[mid]) {\\n    \\t\\t\\t\\t\\thi--;\\n    \\t\\t\\t\\t}else {\\n    \\t\\t\\t\\t\\tlo++;\\n    \\t\\t\\t\\t}\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\t//check whether find the target number\\n    \\t\\tif(nums[lo] == nums[hi] && nums[lo]== target) {\\n    \\t\\t\\tres[0] = lo;\\n    \\t\\t\\tres[1] = hi;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn res;\\n    \\t}"
		},
		{
			"lc_ans_id":"15056",
			"view":"1246",
			"top":"9",
			"title":"My 2 binary search solution without too many \"if\" checks",
			"vote":"11",
			"content":"\\n\\n        public int[] searchRange(int[] A, int target) {\\n        int[] ret = {-1, -1};\\n        \\n        // the first binary search to find the left boundary\\n        int l = 0, r = A.length-1;\\n        while(l < r) {\\n            int mid = (l+r)/2;\\n            if (A[mid] < target)\\n                l = mid + 1;\\n            else\\n                r = mid;\\n        }\\n        \\n        // if target can not be found, return {-1, -1}\\n        if (A[l] != target)\\n            return ret;\\n        \\n        ret[0] = l;\\n        // second binary search to find the right boundary\\n        r = A.length-1;\\n        while(l < r) {\\n            // mid is calculated differently\\n            int mid = (l + r+1)/2;\\n            if (A[mid] > target)\\n                r = mid - 1;\\n            else\\n                l = mid;\\n        }\\n        ret[1] = l;\\n        return ret;\\n    }"
		}
	],
	"id":"34",
	"title":"Search for a Range",
	"content":"<p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.</p>\r\n\r\n<p>Your algorithm's runtime complexity must be in the order of <i>O</i>(log <i>n</i>).</p>\r\n\r\n<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>\r\n\r\n<p>\r\nFor example,<br />\r\nGiven <code>[5, 7, 7, 8, 8, 10]</code> and target value 8,<br />\r\nreturn <code>[3, 4]</code>.\r\n</p>",
	"frequency":"375",
	"ac_num":"172981"
}