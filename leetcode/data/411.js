{
	"difficulty":"3",
	"submit_num":"20601",
	"show_id":"411",
	"leetcode_id":"411",
	"answers":[
		{
			"lc_ans_id":"89880",
			"view":"10657",
			"top":"0",
			"title":"C++ Bit Manipulation + DFS solution",
			"vote":"42",
			"content":"The key idea of my solution is to preprocess the dictionary to transfer all the words to bit sequences (int):\\nPick the words with same length as target string from the dictionary and compare the characters with target. If the characters are different, set the corresponding bit to 1, otherwise, set to 0.\\nEx: \"abcde\", [\"abxdx\", \"xbcdx\"] => [00101, 10001]\\n\\nThe problem is now converted to find a bit mask that can represent the shortest abbreviation, so that for all the bit sequences in dictionary, mask & bit sequence > 0.\\nEx: for [00101, 10001], the mask should be [00001]. if we mask the target string with it, we get \"****e\" (\"4e\"), which is the abbreviation we are looking for.\\n\\nTo find the bit mask, we need to perform DFS with some optimizations. But which bits should be checked? We can perform \"or\" operation for all the bit sequences in the dictionary and do DFS for the \"1\" bits in the result.\\nEx: 00101 | 10001 = 10101, so we only need to take care of the 1st, 3rd, and 5th bit.\\n\\nHere is a C++ implementation, the running time should be about 3ms. Any suggestions would be appreciated.\\n\\n```\\nclass Solution {\\n    int n, cand, bn, minlen, minab;\\n    vector<int> dict;\\n    \\n    // Return the length of abbreviation given bit sequence\\n    int abbrLen(int mask) {\\n        int count = 0;\\n        for (int b = 1; b < bn;) {\\n            if ((mask & b) == 0)\\n                for (; b < bn and (mask & b) == 0; b <<= 1);\\n            else b <<= 1;\\n            count ++;\\n        }\\n        return count;\\n    }\\n\\n    // DFS backtracking\\n    void dfs(int bit, int mask) {\\n        int len = abbrLen(mask);\\n        if (len >= minlen) return;\\n        bool match = true;\\n        for (auto d : dict) {\\n            if ((mask & d) == 0) {\\n                match = false;\\n                break;\\n            }\\n        }\\n        if (match) {\\n            minlen = len;\\n            minab = mask;\\n        }\\n        else\\n            for (int b = bit; b < bn; b <<= 1)\\n                if (cand & b) dfs(b << 1, mask + b);\\n    }\\n\\npublic:\\n    string minAbbreviation(string target, vector<string>& dictionary) {\\n        n = target.size(), bn = 1 << n, cand = 0, minlen = INT_MAX;\\n        string res;\\n        \\n        // Preprocessing with bit manipulation\\n        for (auto w : dictionary) {\\n            int word = 0;\\n            if (w.size() != n) continue;\\n            for (int i = n-1, bit = 1; i >= 0; --i, bit <<= 1)\\n                if (target[i] != w[i]) word += bit;\\n            dict.push_back(word);\\n            cand |= word;\\n        }\\n        dfs(1, 0);\\n\\n        // Reconstruct abbreviation from bit sequence\\n        for (int i = n-1, pre = i; i >= 0; --i, minab >>= 1) {\\n            if (minab & 1) {\\n                if (pre-i > 0) res = to_string(pre-i) + res;\\n                pre = i - 1;\\n                res = target[i] + res;\\n            }\\n            else if (i == 0) res = to_string(pre-i+1) + res;\\n        }\\n        return res;\\n    }\\n};\\n```\\n**UPDATE**: a better way to determine the length of abbreviation mentioned by @StefanPochmann \\n```\\nint abbrLen(int mask) {\\n    int count = n;\\n    for (int b = 3; b < bn; b <<= 1)\\n        if ((mask & b) == 0)\\n            count --;\\n    return count;\\n}\\n```"
		},
		{
			"lc_ans_id":"89884",
			"view":"3136",
			"top":"1",
			"title":"Python with bit masks",
			"vote":"23",
			"content":"Gets accepted in ~130 ms.\\n\\n    def minAbbreviation(self, target, dictionary):\\n        m = len(target)\\n        diffs = {sum(2**i for i, c in enumerate(word) if target[i] != c)\\n                 for word in dictionary if len(word) == m}\\n        if not diffs:\\n            return str(m)\\n        bits = max((i for i in range(2**m) if all(d & i for d in diffs)),\\n                   key=lambda bits: sum((bits >> i) & 3 == 0 for i in range(m-1)))\\n        s = ''.join(target[i] if bits & 2**i else '#' for i in range(m))\\n        return re.sub('#+', lambda m: str(len(m.group())), s)\\n\\nIf the target is `apple` and the dictionary contains `apply`, then the abbreviation must include the `e` as the letter `e`, not in a number. It's the only letter distinguishing these two words. Similarly, if the dictionary contains `tuple`, then the abbreviation must include the `a` or the first `p` as a letter.\\n\\nFor each dictionary word (of correct size), I create a diff-number whose bits tell me which of the word's letters differ from the target. Then I go through the 2<sup>m</sup> possible abbreviations, represented as number from 0 to 2<sup>m</sup>-1, the bits representing which letters of target are in the abbreviation. An abbreviation is ok if it doesn't match any dictionary word. To check whether an abbreviation doesn't match a dictionary word, I simply check whether the abbreviation number and the dictionary word's diff-number have a common 1-bit. Which means that the abbreviation contains a letter where the dictionary word differs from the target.\\n\\nThen from the ok abbreviations I find one that maximizes how much length it saves me. Two consecutive 0-bits in the abbreviation number mean that the two corresponding letters will be encoded as the number 2. It saves length 1. Three consecutive 0-bits save length 2, and so on. To compute the saved length, I just count how many pairs of adjacent bits are zero.\\n\\nNow that I have the number representing an optimal abbreviation, I just need to turn it into the actual abbreviation. First I turn it into a string where each 1-bit is turned into the corresponding letter of the target and each 0-bit is turned into `#`. Then I replace streaks of `#` into numbers."
		},
		{
			"lc_ans_id":"89885",
			"view":"3709",
			"top":"2",
			"title":"Trie + Bruteforce",
			"vote":"15",
			"content":"\\nAbbreviation number is pretty like wild card and it can match all the characters appearing in the trie.\\nThere's 3 functions:\\n**addTrie**:  add string to the trie\\n**search**: search a string to determine if that's the one in the trie (wild card mode)\\n**abbrGenerator**: generate all the possible abbreviations given certain length (which is *num* parameter).\\n\\nPS: the search function is pretty ugly. hope someone can help it :P\\n\\n```\\nclass Trie{\\n        Trie[] next = new Trie[26];\\n        boolean isEnd = false;\\n    }\\n    Trie root = new Trie();\\n    List<String> abbrs;\\n    public String minAbbreviation(String target, String[] dictionary) {\\n        for(String s:dictionary) {\\n            addTrie(s);\\n        }\\n        for(int i=0; i<target.length(); i++) {\\n            abbrs = new ArrayList<>();\\n            abbrGenerator(target, 0, \"\", 0, i+1);\\n            for(String s:abbrs) {\\n                if(search(s, root, 0, 0)==false) return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n    public void addTrie(String s) {\\n        Trie cur = root;\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(cur.next[c-'a']==null) {\\n                cur.next[c-'a']=new Trie();\\n            }\\n            cur = cur.next[c-'a'];\\n        }\\n        cur.isEnd = true;\\n    }\\n    public boolean search(String target, Trie root, int i, int loop) {\\n        if(root==null) return false;\\n\\n        if(loop!=0) {\\n            for(int a=0; a<26; a++) {\\n                if(search(target, root.next[a], i, loop-1)) return true;\\n            }\\n            return false;\\n        }\\n        if(i==target.length()) {\\n            if(root.isEnd) return true;\\n            return false;\\n        }\\n        if(Character.isDigit(target.charAt(i))) {\\n            int tmp = 0;\\n            while(i<target.length()&&Character.isDigit(target.charAt(i))) {\\n                tmp = tmp*10 + target.charAt(i)-'0';\\n                i++;\\n            }\\n            return search(target, root, i, tmp);\\n        } else {\\n            return search(target, root.next[target.charAt(i)-'a'], i+1, 0);\\n        }\\n    }\\n    public void abbrGenerator(String target, int i, String tmp, int abbr, int num) {\\n        if(i==target.length()) {\\n            if(num==0&&abbr==0) abbrs.add(tmp);\\n            if(num==1&&abbr!=0) abbrs.add(tmp+abbr);\\n            return;\\n        }\\n        if(num<=0) return;\\n        char cur = target.charAt(i);\\n        abbrGenerator(target, i+1, abbr==0?tmp+cur:tmp+abbr+cur, 0, abbr==0?num-1:num-2);\\n        abbrGenerator(target, i+1, tmp, abbr+1, num);\\n    }\\n```"
		},
		{
			"lc_ans_id":"89902",
			"view":"5641",
			"top":"3",
			"title":"It's NP-hard",
			"vote":"12",
			"content":"I think this problem is NP-hard. For proof, I'll reduce the [**set cover**](https://en.wikipedia.org/wiki/Set_cover_problem) decision problem to it. The example there is:\\n```\\nU = {1, 2, 3, 4, 5}\\nS = {{1, 2, 3}, {2, 4}, {3, 4}, {4, 5}}\\n```\\nNow I'd encode that for **Minimum Unique Word Abbreviation** like this:\\n```\\ntarget: \"oooo\"\\ndict:   \"looo\" (word 1)\\n        \"lloo\" (word 2)\\n        \"lolo\" (word 3)\\n        \"olll\" (word 4)\\n        \"oool\" (word 5)\\n```\\nThe five dictionary words correspond to the five elements of U. And every word has four letters, corresponding to the four subsets in S. You can see for example the second subset {2, 4} encoded as the second colum in the dictionary, which has `l` in words 2 and 4 (and otherwise only `o`).\\n\\n(Side note: You can build an abbreviation by picking letters and then replacing the unpicked ones with numbers. For example, when you have `leetcode` and pick the letters `l`, `t` and the last `e`, you get `l2t3e`. This way you can get all 2<sup>|word|</sup> possible abbreviations from the 2<sup>|word|</sup> possible ways of picking, as I've done in the [first solution here](https://discuss.leetcode.com/topic/32108/python-solutions).)\\n\\nNow an optimal abbreviation for the target is \"o2o\", which we get by picking the first \"o\" because that distinguishes the target from words {1, 2, 3} and by picking the last \"o\" because that distinguishes the target from words {4, 5}. Just like picking the subsets {1, 2, 3} and {4, 5} cover all of U in the set cover problem.\\n\\nA little problem is that if I switch the third and fourth element of S,  then an optimal abbreviation picks the first and *third* \"o\", so instead of \"o2o\" we'd get \"o1o1\". That's a different length. So instead of the above encoding, I'd really do this, inserting \"x\" before and after each letter:\\n```\\ntarget: \"xoxoxoxox\"\\ndict:   \"xlxoxoxox\"\\n        \"xlxlxoxox\"\\n        \"xlxoxlxox\"\\n        \"xoxlxlxlx\"\\n        \"xoxoxoxlx\"\\n```\\nNow \"1o5o1\" is an optimal abbreviation, and when I switch third and fourth element of S again, I instead get \"1o3o3\", which still has the same length.\\n\\nTo be precise and usable: When I pick k letters, the optimal abbreviation will have those k letters as well as k+1 numbers, so length 2k+1. That means minimizing the abbreviation length is equivalent to minimizing the number of picked letters, which is equivalent to minimizing the number of picked elements of S in the decision problem.\\n\\n**Summary:** To solve a given **set cover** decision problem instance, I translate it to a **Minimum Unique Word Abbreviation** instance like above, and then from the computed optimal abbreviation, I subtract 1 from its length and divide it by 2 to get the number of picked letters, which is the minimum number of elements of S that cover U. And with that, I can directly answer the original set cover instance.\\n\\n**Moral of the story:** Don't feel bad about writing a brute force solution :-)"
		},
		{
			"lc_ans_id":"89883",
			"view":"3963",
			"top":"4",
			"title":"Java DFS+Trie+Binary Search 90ms",
			"vote":"11",
			"content":"1. Use Trie to build a dictionary with a function to check abbreviation.\\n2. Use DFS with backtracking to generate the abbreviations of a given length.\\n3. Use binary search to find the smallest possible length.\\n\\n```\\npublic class Solution {\\n    class Node{ // Trie Node\\n        Node[] nodes;\\n        boolean isWord;\\n        Node(){\\n            nodes = new Node[26];\\n            isWord = false;\\n        }\\n        void add(String str){ // add a word to Trie\\n            if (str.length() == 0) isWord=true; // end of a word\\n            else {\\n                int idx = str.charAt(0)-'a'; // insert a new node\\n                if (nodes[idx] == null) nodes[idx] = new Node();\\n                nodes[idx].add(str.substring(1));\\n            }\\n        }\\n        boolean isAbbr(String abbr, int num){\\n            if ( num > 0){ // number of '*'\\n                for (Node node : nodes){ \\n                    if (node != null && node.isAbbr(abbr, num-1)) return true; \\n                }\\n                return false; // not exist in the dictionary\\n            } else {\\n                if (abbr.length()==0) return isWord; // at the end of the addr\\n                int idx=0; // get the number of '*' at the start of the abbr\\n                while (idx < abbr.length() && abbr.charAt(idx) >='0' && abbr.charAt(idx) <='9' ) {\\n                    num = (num*10) + (abbr.charAt(idx++)-'0'); \\n                }\\n                if (num>0) return isAbbr(abbr.substring(idx),num); // start with number\\n                else { // start with non-number\\n                    if (nodes[abbr.charAt(0)-'a'] != null )   \\n                        return nodes[abbr.charAt(0)-'a'].isAbbr(abbr.substring(1), 0);\\n                    else return false; // not exist in the dictionary \\n                }\\n            }\\n        }\\n    }\\n    \\n    void getAbbs(char[] cc, int s, int len, StringBuilder sb, List<String> abbs){ //DFS with backtracking\\n        boolean preNum = (sb.length() > 0 ) && (sb.charAt(sb.length()-1) >= '0') && (sb.charAt(sb.length()-1) <= '9');\\n        if (len == 1)  { \\n            if ( s  < cc.length) {\\n                if (s==cc.length-1) abbs.add(sb.toString() + cc[s]); // add one char\\n                if (! preNum ) abbs.add(sb.toString() + (cc.length-s) ); // add a number\\n            }\\n        } else if (len > 1 ) {\\n            int last = sb.length();\\n            for (int i=s+1; i < cc.length; i++ ){\\n                if (! preNum) { // add a number\\n                    sb.append(i-s);\\n                    getAbbs(cc, i, len-1, sb, abbs);\\n                    sb.delete(last, sb.length());\\n                }\\n                if (i==s+1) { // add one char\\n                    sb.append(cc[s]);\\n                    getAbbs(cc, i, len-1, sb, abbs);\\n                    sb.delete(last, sb.length());\\n                }\\n            }\\n        }\\n    }\\n    \\n    public String minAbbreviation(String target, String[] dictionary) {\\n        List<String> dict = new ArrayList();\\n        int len = target.length();\\n        for (String str : dictionary) if (str.length() == len ) dict.add(str);\\n        if (dict.isEmpty()) return \"\"+len;\\n        Node root = new Node();\\n        for (String str : dict) root.add(str);\\n        char[] cc = target.toCharArray();\\n        String ret = null;\\n\\n        int min = 1, max = len; \\n        while (max >= min) {\\n            int mid = min+( (max-min)/2 );\\n            List<String> abbs = new ArrayList();\\n            getAbbs(cc, 0, mid, new StringBuilder(), abbs);\\n            boolean conflict = true;\\n            for (String abbr: abbs){\\n                if ( ! root.isAbbr(abbr,0) ) {\\n                    conflict = false;\\n                    ret = abbr;\\n                    break;\\n                } \\n            }\\n            if (conflict) {\\n                min = mid+1;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return ret;\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"89882",
			"view":"1415",
			"top":"5",
			"title":"Java bit mask + DFS with pruning",
			"vote":"7",
			"content":"\\nI referenced http://bookshadow.com/weblog/2016/10/02/leetcode-minimum-unique-word-abbreviation/ for bit mask settings, and http://www.itdadao.com/articles/c15a534651p0.html for DFS pruning then provide my own implementation. Hope it helps! This problem is almost the hardest one I have ever had in leetcode using bit mask.\\n'''' \\n\\n    private int minLen;\\n    private int result;\\n\\n    public String minAbbreviation(String target, String[] dictionary) {\\n        // only keep words whose length == target in new dict, then compute their bit masks\\n        Set<Integer> maskSet = new HashSet<>();\\n        for(String s: dictionary){\\n            if(target.length() == s.length()){\\n                maskSet.add(getBitMask(s,target));\\n            }\\n        }\\n\\n        // dfs with pruning\\n        minLen = target.length()+1;\\n        result = -1;\\n\\n        dfs(target,maskSet,0,0,0);\\n\\n        if(minLen > target.length()){\\n            return \"\";\\n        }\\n\\n        // convert result to word\\n        int zeroCnt = 0;\\n        String res = \"\";\\n        for (int i = target.length()-1; i>=0; i--) {\\n            //\\u9047\\u52300\\u8981\\u7d2f\\u52a0\\u8fde\\u7eed\\u96f6\\u4e2a\\u6570,\\u9047\\u52301\\u586b\\u539fchar\\n            int digit = (result & 1);\\n            if(digit == 0){\\n                ++zeroCnt;\\n            } else {\\n                if(zeroCnt > 0){\\n                    res = zeroCnt + res;\\n                    zeroCnt =0;\\n                }\\n                res = target.charAt(i) + res;\\n            }\\n            result >>= 1;\\n        }\\n        if(zeroCnt > 0) res = zeroCnt + res;\\n        return res;\\n    }\\n\\n    /**\\n     *\\n     * @param target\\n     * @param maskSet masks of words in dict\\n     * @param start idx at target\\n     * @param curLen current abbr's length\\n     */\\n    private void dfs(String target,Set<Integer> maskSet,int start,int curLen,int curResult){\\n        // pruning, no need to continue, already not min length\\n        if(curLen >= minLen) return;\\n\\n        if(start == target.length()){\\n            // check whether curResult mask conflicts with words in dict\\n            for(int mask:maskSet){\\n                /**\\n                 * \\u5355\\u8bcdmanipulation\\u7684\\u7f29\\u5199m2ip6n\\u53ef\\u4ee5\\u8f6c\\u5316\\u4e3a100110000001\\n                 *  m a n i p u l a t i o n\\n                    m  2  i p      6      n\\n                    1 0 0 1 1 0 0 0 0 0 0 1\\n                 * 0\\u4ee3\\u8868\\u968f\\u610f\\u4e0dcare,\\u5982\\u679c\\u8fd9\\u4e2amask\\u548cdict\\u4e2d\\u67d0\\u4e2amask\\u7684\\u6240\\u67091\\u91cd\\u5408\\u4ee3\\u8868\\u5728\\u610f\\u7684\\u4f4d\\u7f6e\\u5b8c\\u5168\\u76f8\\u540c,\\n                 * \\u8bf4\\u660e\\u8fd9\\u4e2amask\\u548cdict\\u4e2d\\u90a3\\u4e2a\\u8bcd\\u51b2\\u7a81\\n                 * \\u6211\\u4eec\\u8981\\u627e\\u7684\\u662f\\u4e0d\\u51b2\\u7a81\\u7684mask\\n                 */\\n                if((curResult & mask) == curResult){\\n                    return; // conflict\\n                }\\n            }\\n            // no conflict happens, can use\\n            if(minLen > curLen){\\n                minLen = curLen;\\n                result = curResult;\\n            }\\n            return;\\n        }\\n\\n        // case 1: replace chars from start in target with number\\n        for (int i = start; i < target.length(); i++) {\\n            //\\u88abreplace\\u6389\\u7684char\\u4f4d\\u7f6e\\u75310\\u4ee3\\u66ff\\u6240\\u4ee5\\u662fcurResult<<(i+1-start),\\u6ca1replace\\u6389\\u7684\\u8fd9\\u91cc\\u4e0d\\u7ba1,\\u6211\\u4eec\\u53ea\\u7ba1\\u5230i,\\u4e4b\\u540e\\u7684\\u7531backtrack\\u5185\\u51b3\\u5b9a\\n            //\\u6ce8\\u610f:\\u4e0d\\u5141\\u8bb8word => w11d\\u8fd9\\u79cd\\u7528\\u6570\\u5b57\\u4ee3\\u66ff\\u4f46\\u542b\\u4e49\\u4e0d\\u540c\\n            if(curLen == 0 || (curResult &1) == 1){\\n                //\\u540e\\u8005\\u5373\\u4e0a\\u4e00\\u6b21\\u662f\\u4fdd\\u7559\\u4e86\\u5b57\\u6bcd\\n                dfs(target,maskSet,i+1,curLen+1,curResult<<(i+1-start));\\n            }\\n        }\\n\\n        // case 2: no replace from start (curResult << 1)+1\\u4ee3\\u8868\\u65b0\\u7684\\u8fd9\\u4f4d\\u4fdd\\u7559\\u4e86char,\\u6240\\u4ee5\\u662f\\u52a0\\u4e00\\n        dfs(target,maskSet,start+1,curLen+1,(curResult << 1)+1);\\n    }\\n\\n    // \\u6bd4\\u5982apple \\u548c amper \\u5b57\\u6bcd\\u76f8\\u540c\\u8bbe1,\\u4e0d\\u540c\\u8bbe0,\\u6240\\u4ee5\\u5f97\\u523010100\\n    private int getBitMask(String s1,String s2){\\n        int mask = 0;\\n        for (int i = 0; i < s1.length(); i++) {\\n            mask <<= 1;\\n            if(s1.charAt(i) == s2.charAt(i)){\\n                mask += 1;\\n            }\\n        }\\n        return mask;\\n    }\\n''''"
		},
		{
			"lc_ans_id":"89892",
			"view":"1183",
			"top":"6",
			"title":"What a lovely test case",
			"vote":"7",
			"content":"\\n```\\n\"usaandchinaarefriends\"\\n[]\\n```\\n```\\n\"usa and china are friends\"\\n```"
		},
		{
			"lc_ans_id":"89879",
			"view":"763",
			"top":"7",
			"title":"Python DFS Solution with Bit Manipulation",
			"vote":"5",
			"content":"Words in *dictionary* can be converted to numbers using bit manipulation.\\n\\nFor example, if *target* is *apple*, a dictionary word *amble* could be converted to a binary number bin(*10011*), by determining whether the letters in the same position between *target* and *word* are equal or not.\\n*****\\n```\\na p p l e\\na m b l e\\n1 0 0 1 1\\n```\\n*****\\n*Abbrviation* can also be converted to binary number. The letters in abbr could be converted to binary one, and the digits could be converted to zeros.\\nFor example, one of the abbriviations of word *manipulation* is *m2ip6n*, could be converted to binary number bin(*100110000001*)\\n```\\nm a n i p u l a t i o n\\nm  2  i p      6      n\\n1 0 0 1 1 0 0 0 0 0 0 1\\n```\\n***\\nWe can use **bitwise and operator** to test whether an abbreviation *abbr* matched some words in the dictionary. If *abbr & word == abbr*, then *abbr* matched *word*.\\n\\n**Python code:**\\n```\\nclass Solution(object):\\n    def minAbbreviation(self, target, dictionary):\\n        \"\"\"\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        \"\"\"\\n        self.size = len(target)\\n        self.wlist = [self.toNumber(target, d) \\\\\\n                      for d in dictionary \\\\\\n                      if len(d) == self.size]\\n        self.ans = (1 << self.size) - 1\\n        self.length = self.size\\n        self.dfs(0, 0, 0)\\n        return self.toWord(self.ans)\\n    def dfs(self, number, depth, length):\\n        if length >= self.length: return\\n        if depth == self.size:\\n            if not any(number & w == number for w in self.wlist):\\n                self.ans = number\\n                self.length = length\\n            return\\n        self.dfs((number << 1) + 1, depth + 1, length + 1)\\n        if length == 0 or number & 1:\\n            for x in range(2, self.size - depth + 1):\\n                self.dfs(number << x, depth + x, length + 1)\\n    def toNumber(self, target, word):\\n        ans = 0\\n        for x in range(self.size):\\n            ans <<= 1\\n            ans += target[x] == word[x]\\n        return ans\\n    def toWord(self, number):\\n        ans = ''\\n        cnt = 0\\n        for x in range(self.size):\\n            if number & (1 << self.size - x - 1):\\n                if cnt:\\n                    ans += str(cnt)\\n                    cnt = 0\\n                ans += target[x]\\n            else:\\n                cnt += 1\\n        return ans + str(cnt or '')\\n```"
		},
		{
			"lc_ans_id":"89922",
			"view":"1249",
			"top":"8",
			"title":"Insights / Optimizing / Hacking :-)",
			"vote":"4",
			"content":"I found two simple optimizations that helped me get [**my solution**](https://discuss.leetcode.com/topic/61352/lazy-python-solution-with-reuse-regular-expressions-and-optimizations) accepted:\\n- Filter out all dictionary words that don't have the same length as the target. They can never have the same abbreviation, because an abbreviation tells you exactly how long the abbreviated word is.  \\nIf after this no dictionary words are left, just abbreviate the target by a single number.\\n- Filter out all dictionary words that don't match the target at any position. For example, \"leetcode\" and \"codeleet\" have no common abbreviation (other than \"8\"), as they don't have the same character at any of their eight positions. The reason is that an abbreviation tells you exactly where its letters are, for example \"3t2d1\" tells you that the fourth letter is a \"t\" and the seventh letter is a \"d\".  \\nIf after this no dictionary words are left, just abbreviate the target by its first letter and a single number for the rest (if any).\\n\\nThe two by far largest dictionaries in the test suite have 1000 words each, and with the above optimizations, they get reduced to 347 and 5 words, respectively. And for example the test case `\"chinaandusaarefre\", [\"china\",\"are\",\"and\",\"usa\",\"friends\",\"us\",\"en\",\"ar\"]` gets reduced to the trivial `\"chinaandusaarefre\", []` (that one was bad for me, because my solution computes and sorts all abbreviations of the target word, but thanks to the optimizations I don't have to do that at all in this case).\\n\\nHere's some Python code taking advantage of these optimizations:\\n\\n    def minAbbreviation(self, target, dictionary):\\n\\n        # Throw out wrong-length words\\n        dictionary = [word for word in dictionary\\n                      if len(word) == len(target)]\\n        if not dictionary:\\n            return str(len(target))\\n\\n        # Throw out words not matching the target in any position.\\n        dictionary = [word for word in dictionary\\n                      if any(map(operator.eq, word, target))]\\n        if not dictionary:\\n            return target if len(target) < 2 else target[0] + str(len(target) - 1)\\n\\n        # Regular solution\\n        ...\\n\\nAnd here's the effect of the optimizations on the test suite's 45 test cases:\\n```\\n   1 => 1    dictionary words of length 5\\n   3 => 2    dictionary words of length 5\\n   1 => 0    dictionary words of length 5\\n   1 => 0    dictionary words of length 5\\n   2 => 1    dictionary words of length 5\\n   3 => 3    dictionary words of length 6\\n   4 => 0    dictionary words of length 5\\n   2 => 2    dictionary words of length 7\\n   1 => 1    dictionary words of length 11\\n   5 => 5    dictionary words of length 5\\n   2 => 2    dictionary words of length 5\\n   5 => 2    dictionary words of length 5\\n   5 => 2    dictionary words of length 5\\n   5 => 2    dictionary words of length 5\\n   5 => 0    dictionary words of length 4\\n   5 => 0    dictionary words of length 4\\n   5 => 0    dictionary words of length 8\\n   3 => 3    dictionary words of length 3\\n   6 => 0    dictionary words of length 7\\n   6 => 0    dictionary words of length 8\\n   7 => 0    dictionary words of length 8\\n   8 => 0    dictionary words of length 9\\n   4 => 0    dictionary words of length 8\\n   4 => 0    dictionary words of length 4\\n   4 => 0    dictionary words of length 14\\n   6 => 0    dictionary words of length 16\\n  12 => 0    dictionary words of length 8\\n   8 => 0    dictionary words of length 17\\n   7 => 6    dictionary words of length 5\\n   6 => 6    dictionary words of length 8\\n  13 => 12   dictionary words of length 3\\n   0 => 0    dictionary words of length 21\\n  12 => 8    dictionary words of length 4\\n   9 => 8    dictionary words of length 9\\n  18 => 14   dictionary words of length 4\\n   7 => 6    dictionary words of length 3\\n  12 => 11   dictionary words of length 4\\n  12 => 11   dictionary words of length 4\\n  16 => 0    dictionary words of length 1\\n  12 => 11   dictionary words of length 8\\n   6 => 3    dictionary words of length 4\\n  10 => 10   dictionary words of length 6\\n   9 => 9    dictionary words of length 11\\n1000 => 347  dictionary words of length 10\\n1000 => 5    dictionary words of length 10\\n```\\nI found out those numbers by submitting this solution, which \"hacks\" the judge a bit. It collects the optimization statistics and prints them during the last test case, where it intentionally returns something wrong so the judge shows me the output:\\n```\\nclass Solution(object):\\n    optimizations = []\\n    def minAbbreviation(self, target, dictionary):\\n        self.optimizations.append((len(dictionary),\\n                                   sum(len(word) == len(target) and any(map(operator.eq, word, target))\\n                                       for word in dictionary),\\n                                   len(target)))\\n        if len(self.optimizations) == 45:\\n            for opt in self.optimizations:\\n                print '%4d => %-4d dictionary words of length %d' % opt\\n            return None\\n\\n        (and then here follows my actual solution)\\n```"
		},
		{
			"lc_ans_id":"89887",
			"view":"468",
			"top":"9",
			"title":"3ms C++ bit manipulation solution beat 100%",
			"vote":"3",
			"content":"Inspired by @topcoder007 and @StefanPochmann\\n\\nPlease refer [@topcoder007's post](https://discuss.leetcode.com/topic/61457/c-bit-manipulation-dfs-solution) about the basic idea of bit manipulation.\\n\\nThe idea is to **find all valid masks with minimum bits set first, and then find the minimum abbreviation recursively**. \\nFor each bit in a ```key``` built from diff of ```target``` and ```word```, there could be below cases:\\n\\n* If a bit is ```0```, which means the char in ```word``` is same as the corresponding char in ```target```, the bit has no effect to the final result on this ```word```\\n* If a bit is 1 and it is the only bit set, i.e. the only difference from ```target```, then that char is required, i.e. the bit must be set in final result\\n* If there are 2 or more bits set, all the bits are optional, i.e. as long as one of them is set in final result, it will make the abbreviation distinct between ```target``` and this ```word```.\\n* If a bit is optional for ```word1``` but required for ```word2```, we can ignore ```word1``` because it is already covered by ```word2```. For example ```\"apple\" [\"xpple\", \"xpplx\"] ``` => ```[10000, 10001]``` => ```[10000]``` => ```\"a4```\\n* if a bit is optional for both ```word1``` and ```word2```, we can take that bit to cover both words and at same time, minimize the number of set bits. For example ```\"apple\" [\"xppze\", \"xpplx\"] ``` => ```[10010, 10001]``` => ```[10000]``` => ```\"a4```\\n\\nTherefore, a valid abbreviation key will be ```[required bits] | [ a mask with minimum number of '1' which ensure at least one optional bit set for each word]```, steps as below:\\n1. Generate keys for each word dictionary, if required (only 1 bit set), put it to ```required``` mask. If optional, put to the ```distinct``` list.\\n2. Check all keys in  ```distinct```  list, if covered by ```required``` , remove from the list\\n3. Make all keys **distinct**, i.e.  ```distinct[i] & distinct[j] == 0``` if ```i != j``` \\n4. For remaining keys in  ```distinct```, take ```required``` as base mask and then pick up 1 optional bit from each key recursively, and check the length of the abbreviation.\\n\\nRefer inline comments for more details. Please correct me if I am wrong. Thanks\\n\\n```\\nclass Solution {\\npublic:\\n    string minAbbreviation(string target, vector<string>& dictionary) {\\n        int n = target.size();\\n        vector<int> distinct;\\n        int required = 0;\\n        for (auto word : dictionary) {\\n            if (word.size() != n) continue;\\n            int key = getKey(target, word);\\n            if ((key & (key-1)) == 0) required |= key; // only 1 distinct char, so it is requried\\n            else distinct.push_back(key);\\n        }\\n\\n        // check if the required bits can cover any keys\\n        if (required) { \\n            vector<int> tmp;\\n            for (auto x : distinct) {\\n                // if no overlapped bits, it is not covered\\n                // need to handle them later\\n                if ((x & required) == 0) tmp.push_back(x);\\n            }\\n            distinct.swap(tmp);\\n        }\\n        \\n        // make all remaining keys distinct each other\\n        vector<int> tmp;\\n        for (auto x : distinct) {\\n            bool merged = false;\\n            for (int i = 0; i < tmp.size(); i++) {\\n                if (tmp[i] & x) {\\n                    tmp[i] &= x;\\n                    merged = true;\\n                    break;\\n                }\\n            }\\n            if (!merged) tmp.push_back(x);\\n        }\\n        distinct.swap(tmp);\\n\\n        // now only distinct keys left, recursively check the length of each valid key \\n        int res = pow(2, n) - 1;\\n        solve(distinct, 0, required, n, res);\\n        return getAbbre(target, res);\\n    }\\n\\n    void solve(vector<int>& v, int idx, int key, int len, int& out) {\\n        // all keys combined, check length\\n        if (idx == v.size()) {\\n            if (getLen(key, len) < getLen(out, len)) {\\n                out = key;\\n            }\\n        }\\n        else { // append remaining keys\\n            int cand = v[idx];\\n            while(cand) {\\n                int mask = cand;\\n                cand &= cand-1;\\n                mask ^= cand;\\n                solve(v, idx+1, key | mask, len, out);\\n            }\\n        }\\n    }\\n    \\n    string getAbbre(string& target, int key) {\\n        int n = target.size();\\n        string res;\\n        int count = 0;\\n        for (int i = 0; i < n; i++) {\\n            if ((key & (1 << (n-1-i)))) {\\n                if (count) res += to_string(count);\\n                res.push_back(target[i]);\\n                count = 0;\\n            }\\n            else count++;\\n        }\\n        if (count) res += to_string(count);\\n        return res;\\n    }\\n    \\n    int getLen(int key, int len) {\\n        int count = len;\\n        int n = 1 << len;\\n        for (int i = 3; i < n; i <<= 1) {\\n            if ((key & i) == 0) count--;\\n        }\\n        return count;\\n    }\\n    \\n    int getKey(string& s1, string& s2) {\\n        int key = 0;\\n        for (int i = 0; i < s1.size(); i++) {\\n            key <<= 1;\\n            key += s1[i] == s2[i] ? 0 : 1;\\n        }\\n        return key;\\n    }\\n};\\n```"
		}
	],
	"id":"411",
	"title":"Minimum Unique Word Abbreviation",
	"content":"<p>A string such as <code>\"word\"</code> contains the following abbreviations:</p>\r\n\r\n<pre>[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\r\n</pre>\r\n\r\n<p>Given a target string and a set of strings in a dictionary, find an abbreviation of this target string with the <b><i>smallest possible</i></b> length such that it does not conflict with abbreviations of the strings in the dictionary. </p>\r\n\r\n<p>Each <b>number</b> or letter in the abbreviation is considered length = 1. For example, the abbreviation \"a32bc\" has length = 4.</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>In the case of multiple answers as shown in the second example below, you may return any one of them.</li>\r\n<li>Assume length of target string = <b>m</b>, and dictionary size = <b>n</b>. You may assume that <b>m &le; 21</b>, <b>n &le; 1000</b>, and <b>log<sub>2</sub>(n) + m</sup> &le; 20</b>.</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Examples:</b><br />\r\n<pre>\r\n\"apple\", [\"blade\"] -> \"a4\" (because \"5\" or \"4e\" conflicts with \"blade\")\r\n\r\n\"apple\", [\"plain\", \"amber\", \"blade\"] -> \"1p3\" (other valid answers include \"ap3\", \"a3e\", \"2p2\", \"3le\", \"3l1\").\r\n</pre>\r\n</p>",
	"frequency":"100",
	"ac_num":"6958"
}