{
	"difficulty":"2",
	"submit_num":"25425",
	"show_id":"505",
	"leetcode_id":"505",
	"answers":[
		{
			"lc_ans_id":"98392",
			"view":"9716",
			"top":"0",
			"title":"Similar to The Maze. Easy-understanding Java bfs solution.",
			"vote":"30",
			"content":"Solution of *The Maze*: https://discuss.leetcode.com/topic/77471/easy-understanding-java-bfs-solution\\nSolution of *The Maze III*: https://discuss.leetcode.com/topic/77474/similar-to-the-maze-ii-easy-understanding-java-bfs-solution\\n\\nWe need to use `PriorityQueue` instead of standard queue, and record the minimal length of each point.\\n``` java\\npublic class Solution {\\n    class Point {\\n        int x,y,l;\\n        public Point(int _x, int _y, int _l) {x=_x;y=_y;l=_l;}\\n    }\\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n        int m=maze.length, n=maze[0].length;\\n        int[][] length=new int[m][n]; // record length\\n        for (int i=0;i<m*n;i++) length[i/n][i%n]=Integer.MAX_VALUE;\\n        int[][] dir=new int[][] {{-1,0},{0,1},{1,0},{0,-1}};\\n        PriorityQueue<Point> list=new PriorityQueue<>((o1,o2)->o1.l-o2.l); // using priority queue\\n        list.offer(new Point(start[0], start[1], 0));\\n        while (!list.isEmpty()) {\\n            Point p=list.poll();\\n            if (length[p.x][p.y]<=p.l) continue; // if we have already found a route shorter\\n            length[p.x][p.y]=p.l;\\n            for (int i=0;i<4;i++) {\\n                int xx=p.x, yy=p.y, l=p.l;\\n                while (xx>=0 && xx<m && yy>=0 && yy<n && maze[xx][yy]==0) {\\n                    xx+=dir[i][0];\\n                    yy+=dir[i][1];\\n                    l++;\\n                }\\n                xx-=dir[i][0];\\n                yy-=dir[i][1];\\n                l--;\\n                list.offer(new Point(xx, yy, l));\\n            }\\n        }\\n        return length[destination[0]][destination[1]]==Integer.MAX_VALUE?-1:length[destination[0]][destination[1]];\\n    }\\n}\\n```\\n<hr />\\n\\n**Modified 2017/3/27**:\\n*Why using PriorityQueue?*\\n\\nWe can consider this question as a shortest-route graph problem, that is, each stoppable point is a vertical, where every possible path between two nodes is an edge.\\nIn this way, we can using Dijkstra algorithm to solve this problem, and that's why we use `PriorityQueue`."
		},
		{
			"lc_ans_id":"98398",
			"view":"1847",
			"top":"1",
			"title":"Python Solution with explanation (Dijkstra's algorithm)",
			"vote":"6",
			"content":"I tried DFS, BFS but got TLE then I found that we need to use heap instead of list to store the current nodes (Dijkstra's algorithm). You may check this link: \\n\\nhttps://en.wikipedia.org/wiki/Dijkstra's_algorithm\\n\\nHere is my code: (Thank @rougutou for his advice.)\\n```\\nclass Solution(object):\\n    def shortestDistance(self, maze, start, destination):\\n        \"\"\"\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: int\\n        \"\"\"\\n        dest=tuple(destination)\\n        m=len(maze)\\n        n=len(maze[0])\\n        res=None \\n        def go(start, direction):\\n            # return the stop position and length\\n            i, j = start\\n            ii, jj = direction\\n            l=0\\n            while 0<=i+ii<m and 0<=j+jj<n and maze[i+ii][j+jj]!=1:\\n                i+=ii\\n                j+=jj\\n                l+=1\\n            return l, (i,j)\\n        # bfs (dijkstra: https://en.wikipedia.org/wiki/Dijkstra's_algorithm)\\n        visited={}\\n        q=[]\\n        heapq.heappush(q, (0, tuple(start)))\\n        while q:\\n            length, cur = heapq.heappop(q)\\n            if cur in visited and visited[cur]<=length:\\n                continue # if cur is visited and with a shorter length, skip it.\\n            visited[cur]=length\\n            if cur == dest:\\n                return length\\n            for direction in [(-1, 0), (1, 0), (0,-1), (0,1)]:\\n                l, np = go(cur, direction)\\n                heapq.heappush(q, (length+l, np))\\n        return -1\\n```"
		},
		{
			"lc_ans_id":"98453",
			"view":"1902",
			"top":"2",
			"title":"Java BFS with Some optimizations, 19 ms (with comments)",
			"vote":"6",
			"content":"The idea is similar to the Dijkstra's  shortest Path Algorithm.\\n\\n```\\npublic class Solution {\\n    private int[][] maze;\\n    private int[][] minSteps;//memorize the minimus steps to reach each position\\n    private int[][] dirs={{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\\n    \\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n        this.maze=maze;\\n        this.minSteps=new int[maze.length][maze[0].length];\\n        /*Initiallize minSteps matrix*/\\n        for(int i=0; i<maze.length; i++){\\n            for(int j=0; j<maze[0].length; j++){\\n                minSteps[i][j]=Integer.MAX_VALUE;\\n            }\\n        }\\n        /*Optimization: check if the destination is impossible to Reach*/\\n        boolean desL=canRoll(destination[0], destination[1], dirs[0]);\\n        boolean desR=canRoll(destination[0], destination[1], dirs[1]);\\n        boolean desD=canRoll(destination[0], destination[1], dirs[2]);\\n        boolean desU=canRoll(destination[0], destination[1], dirs[3]);\\n        if(desL && desR && desD && desU) return -1; //all neighbors are walls\\n        else if(!(desL||desR||desD||desU)) return -1; //all neighbors are empty spaces\\n        else if(desL && desR && !desU && !desD) return -1; //two opposite neigbhors are walls, and the other two are empty spaces\\n        else if(!desL && !desR && desU && desD) return -1;//two opposite neigbhors are walls, and the other two are empty spaces\\n        \\n        minSteps[start[0]][start[1]]=0;\\n        /*BFS; Optimization: use PriorityQueue based on the steps instead of Queue*/\\n        PriorityQueue<Position> pq=new PriorityQueue<>();\\n        pq.offer(new Position(start[0], start[1], 0));\\n        while(!pq.isEmpty()){\\n            Position pos=pq.poll();\\n            /*optimization: if the destination is at the head of the queue, we are done*/\\n            if(pos.r==destination[0] && pos.c==destination[1]) return pos.steps;\\n            for(int[] dir: dirs){\\n                int r=pos.r, c=pos.c, currSteps=0;\\n                while(canRoll(r, c, dir)){\\n                    r+=dir[0];\\n                    c+=dir[1];\\n                    currSteps++;\\n                }\\n                int totalSteps=pos.steps+currSteps;\\n                if(totalSteps<minSteps[r][c] && totalSteps<minSteps[destination[0]][destination[1]]){\\n                    minSteps[r][c]=totalSteps;\\n                    pq.offer(new Position(r, c, totalSteps));\\n                }\\n            }\\n        }\\n        /*May not be able to reach the destination*/\\n        return minSteps[destination[0]][destination[1]]==Integer.MAX_VALUE? -1: minSteps[destination[0]][destination[1]];\\n    }\\n    \\n    private boolean canRoll(int r, int c, int[] dir){\\n        r+=dir[0];\\n        c+=dir[1];\\n        if(r<0 || c<0 || r>=maze.length || c>=maze[0].length || maze[r][c]==1) return false;\\n        return true;\\n    }\\n}\\n\\nclass Position implements Comparable<Position>{\\n    public int r;\\n    public int c;\\n    public int steps;\\n    \\n    public Position(int r, int c, int s){\\n        this.r=r;\\n        this.c=c;\\n        this.steps=s;\\n    }\\n    @Override\\n    public int compareTo(Position other){\\n        return this.steps-other.steps;\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"98393",
			"view":"2276",
			"top":"3",
			"title":"simple C++ BFS, using queue",
			"vote":"6",
			"content":"My BFS using queue. Use matrix to store the distance. If smaller distance is found, need to process the position[i,j] one more time.\\n```\\nclass Solution {\\npublic:\\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\\n\\tint m = maze.size();\\n\\tint n = maze[0].size();\\n\\tint minDist = INT_MAX;\\n\\n\\tvector<vector<int>> dists(m, vector<int>(n, -1));\\n\\tqueue<pair<int, int>> q;\\n\\n\\tvector<pair<int, int>> incr = { { 1,0 },{ 0,-1 },{ 0,1 },{ -1,0 } };\\n\\n\\tq.push({ start[0], start[1] });\\n\\tdists[start[0]][start[1]] = 0;\\n\\n\\twhile (!q.empty())\\n\\t{\\n\\t\\tauto curr = q.front();\\n\\t\\tq.pop();\\n\\t\\tint x = curr.first;\\n\\t\\tint y = curr.second;\\n\\t\\tint dist = dists[x][y];\\n\\n\\t\\tfor (int k = 0; k < 4; ++k)\\n\\t\\t{\\n\\t\\t\\tint i = x;\\n\\t\\t\\tint j = y;\\n\\t\\t\\tint step = 0;\\n\\t\\t\\tint d_i = incr[k].first;\\n\\t\\t\\tint d_j = incr[k].second;\\n\\t\\t\\tint tempMin = INT_MAX;\\n\\n\\t\\t\\twhile (i + d_i < m && i + d_i >= 0 && j + d_j >= 0 && j + d_j <n && maze[i + d_i][j + d_j] == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\t++step;\\n\\t\\t\\t\\ti += incr[k].first;\\n\\t\\t\\t\\tj += incr[k].second;\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\tif (dists[i][j] == -1) // visited first time\\n\\t\\t\\t{\\n\\t\\t\\t\\tdists[i][j] = dist + step;\\n\\t\\t\\t\\tq.push({ i,j });\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (dists[i][j] > dist + step) // not the first time, but generate smaller dist, process one more time\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tdists[i][j] = dist + step;\\n\\t\\t\\t\\t\\tq.push({ i,j });\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dists[destination[0]][destination[1]];        \\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"98401",
			"view":"2389",
			"top":"4",
			"title":"JAVA, Accepted DFS",
			"vote":"4",
			"content":"```\\nstatic final int[] DIRS = {0, 1, 0, -1, 0};\\npublic int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n    int[][] dist = new int[maze.length][maze[0].length];\\n    dist[start[0]][start[1]] = 1;\\n    dfs(start[0], start[1], destination, maze, dist);\\n    return dist[destination[0]][destination[1]] - 1;\\n}\\nvoid dfs(int row, int col, int[] dest, int[][] maze, int[][] dist) {\\n    if (row == dest[0] && col == dest[1]) return;\\n    int m = maze.length, n = maze[0].length;\\n    for (int d = 0; d < 4; ++d) {\\n        int i = row, j = col, p = DIRS[d], q = DIRS[d + 1], len = dist[row][col];\\n        while (i + p >= 0 && i + p < m && j + q >= 0 && j + q < n && maze[i + p][j + q] == 0) {\\n            i += p;\\n            j += q;\\n            len++;\\n        }\\n        if (dist[i][j] > 0 && len >= dist[i][j]) continue;\\n        dist[i][j] = len;\\n        dfs(i, j, dest, maze, dist);\\n    }\\n}\\n\\n```"
		},
		{
			"lc_ans_id":"98418",
			"view":"164",
			"top":"5",
			"title":"Simple Java Solution BFS",
			"vote":"3",
			"content":"```\\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n        Queue<int[]> q = new LinkedList<>();\\n        int m = maze.length, n = maze[0].length;\\n        int[][] dist = new int[m][n];\\n        for (int i = 0; i < m; i++) {\\n            Arrays.fill(dist[i], Integer.MAX_VALUE);\\n        }\\n        int[] dx = new int[] {-1, 0, 1, 0};\\n        int[] dy = new int[] { 0, 1, 0, -1};\\n        \\n        q.offer(start);\\n        dist[start[0]][start[1]] = 0;\\n        \\n        while (!q.isEmpty()) {\\n            int[] p = q.poll();\\n            for (int i = 0; i < 4; i++) {\\n                int x = p[0] + dx[i], y = p[1] + dy[i];\\n                int cnt = 1;\\n                \\n                while (x >=0 && x < m && y >= 0 && y < n && maze[x][y] != 1) {\\n                    x += dx[i];\\n                    y += dy[i];\\n                    cnt++;\\n                }\\n                x -= dx[i];\\n                y -= dy[i];\\n                cnt--;\\n                if (dist[p[0]][p[1]] + cnt < dist[x][y]) {\\n                    dist[x][y] = dist[p[0]][p[1]] + cnt;\\n                    q.offer(new int[] {x, y});\\n                }\\n            }\\n        }\\n        return dist[destination[0]][destination[1]] == Integer.MAX_VALUE ? -1 : dist[destination[0]][destination[1]];\\n    }"
		},
		{
			"lc_ans_id":"98413",
			"view":"117",
			"top":"6",
			"title":"Use Dijkstra's algorithms to solve this problem, a normal way to solve shortest path under a weighted graph!",
			"vote":"1",
			"content":"```\\npublic class Solution {\\n    public class point{\\n        int x;\\n        int y;\\n        int distance;\\n        public point(int x,int y,int dis){\\n            this.x=x;\\n            this.y=y;\\n            this.distance=dis;\\n        }\\n    }\\n    \\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n           if(maze==null || maze.length<1){\\n               return -1;\\n           }\\n           point[][] points = new point[maze.length][maze[0].length];\\n           for(int i=0;i<points.length;i++){\\n               for(int j=0;j<points[0].length;j++){\\n                   points[i][j]=new point(i,j,Integer.MAX_VALUE);\\n               }\\n           }\\n           points[start[0]][start[1]].distance=0;\\n           PriorityQueue<point> pq = new PriorityQueue<>(1,new Comparator<point>(){\\n                  public int compare(point a,point b){\\n                      return a.distance-b.distance;\\n                  } \\n           });\\n          \\n          pq.offer(points[start[0]][start[1]]);\\n          bfsSearch(pq,points,maze,start,destination);\\n          if(points[destination[0]][destination[1]].distance!=Integer.MAX_VALUE){\\n              return points[destination[0]][destination[1]].distance;\\n          }\\n          return -1;\\n    }\\n    \\n    public void bfsSearch(PriorityQueue<point> pq,point[][] points,int[][] maze,int[] start,int[] destination){\\n             int[][] dirs = new int[][]{{-1,0},{1,0},{0,1},{0,-1}};\\n             while(pq.size()!=0){\\n                  point t = pq.poll();\\n                  for(int[] dir:dirs){\\n                      int i=t.x;\\n                      int j=t.y;\\n                      while(i+dir[0]>=0&&i+dir[0]<maze.length&&j+dir[1]>=0&&j+dir[1]<maze[0].length&&maze[i+dir[0]][j+dir[1]]!=1){\\n                          i+=dir[0];\\n                          j+=dir[1];\\n                      }\\n                      \\n                      if(i==t.x&&j==t.y){\\n                          continue;\\n                      }\\n                      int steps = Math.abs(t.x-i)+Math.abs(t.y-j);\\n                      if(t.distance+steps<points[i][j].distance){\\n                          points[i][j].distance=steps+t.distance;\\n                          pq.offer(new point(i,j,t.distance+steps));\\n                      }\\n                  }\\n             }\\n    }   \\n}\\n```"
		},
		{
			"lc_ans_id":"98421",
			"view":"119",
			"top":"7",
			"title":"Java solution using priority search",
			"vote":"1",
			"content":"```\\npublic class Solution {\\n    class Point{\\n        int x, y, l;\\n        public Point(int x, int y,int l){\\n            this.x = x;\\n            this.y = y;\\n            this.l = l;\\n        }\\n    }\\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n        int m = maze.length, n = maze[0].length;\\n        int[][] visited = new int[m][n];\\n        PriorityQueue<Point> pq = new PriorityQueue<>((o1,o2)->(o1.l - o2.l));\\n        pq.offer(new Point(start[0], start[1], 0));\\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\\n        while(!pq.isEmpty()){\\n            Point tmp = pq.poll();\\n            if(tmp.x == destination[0] && tmp.y == destination[1]) return tmp.l;\\n            if(tmp.l > visited[tmp.x][tmp.y]) continue;\\n            for(int[] dir : directions){\\n                int tmpX = tmp.x, tmpY = tmp.y;\\n                int cnt = 0;\\n                while(tmpX + dir[0] >= 0 && tmpX + dir[0] < maze.length && tmpY + dir[1] >= 0 && tmpY + dir[1] < maze[0].length && maze[tmpX +  dir[0]][tmpY + dir[1]] == 0){\\n                    tmpX += dir[0];\\n                    tmpY += dir[1];\\n                    cnt++;\\n                }\\n                if(tmpX == start[0] && tmpY == start[1]) continue;\\n                if(visited[tmpX][tmpY] == 0 || visited[tmpX][tmpY] > cnt + tmp.l){\\n                    visited[tmpX][tmpY] = cnt + tmp.l;\\n                    pq.offer(new Point(tmpX, tmpY, tmp.l + cnt));\\n                }\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"98427",
			"view":"221",
			"top":"8",
			"title":"2 Solutions: BFS and Dijkstra's. Detailed explanation.. But why is BFS faster?",
			"vote":"1",
			"content":"\\nWe need to explore ALL the paths and find the shortest distance, but we can prune paths where the distance to reach a square is more than the currently shortest distance.\\nBecause of that, we can use either BFS or DFS since it doesnt matter as we need to explore ALL the paths.. The main difference is when each path will be pruned.  In the average case, BFS would be a much better result cause more paths will be pruned since the first few moves to a particular square will generally yield the shortest distance.\\n\\nWe use a distance[][] array that keeps track of the minimum distance to reach that square..\\nAnd prune any visits to that square if the distance is more than the minimum distance.\\n\\n```\\npublic class Solution {\\n    int[][] steps = new int[][]{{-1,0}, {1, 0}, {0, -1}, {0, 1}}; //up down left right\\n    \\n    \\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n        int m = maze.length;\\n        int n = maze[0].length;\\n        \\n        int[][] distance = new int[m][n];  //can also use a hashmap\\n        for(int i = 0; i < m; i++) {\\n            Arrays.fill(distance[i], Integer.MAX_VALUE);\\n        }\\n        \\n        Queue<int[]> queue = new LinkedList();\\n        distance[start[0]][start[1]] = 0;\\n        queue.add(start);\\n        while (!queue.isEmpty()) {\\n            int[] pos = queue.poll();\\n            for (int i=0; i<4; i++) {\\n                int[] newPos = move(i, pos[0], pos[1], maze);\\n                int totalDistance = distance[pos[0]][pos[1]] + newPos[2];\\n                if (totalDistance < distance[newPos[0]][newPos[1]]) {\\n                    distance[newPos[0]][newPos[1]]  =  totalDistance;\\n                    if (newPos[0] == destination[0] && newPos[1] == destination[1]) { \\n                        continue;\\n                    }\\n                    queue.add(newPos);\\n                }\\n            }\\n        }\\n        int shortest_distance = distance[destination[0]][destination[1]];\\n        return shortest_distance == Integer.MAX_VALUE ? -1 : shortest_distance; \\n    }\\n    \\n    public int[] move(int dir,  int x, int y, int[][] maze) {\\n        int[] pos = new int[]{x, y, 0};\\n        while (isValid(maze, pos[0] + steps[dir][0] , pos[1] +  steps[dir][1])) {\\n            pos[0] += steps[dir][0];\\n            pos[1] += steps[dir][1];\\n            pos[2] += 1;\\n        }\\n        \\n        return pos;\\n    }\\n    \\n    \\n    public boolean isValid(int[][] maze, int x, int y) {\\n        if (!(x>=0 && y >=0 && x < maze.length && y < maze[0].length)) { return false; }\\n        return maze[x][y] != 1; //not a wall\\n    }\\n    \\n}\\n```\\n\\nAnother way to look at it is to model this as a Graph problem with weighted edges.  Thus we want to find the shortest distance from a single source to the goal.  Thus, it is the shortest path problem.\\nThis can be solved by **Dijkstra's Algorithm**.   This is similar to what we did previously. Except that \\n\\n1. **It uses a Priority Queue instead of a normal Queue to find the Node with the least distance from the starting point**\\n2. **Once that node is pop out from the queue, we know that the distance is definately the LEAST from the starting point and that value cannot be altered anymore.  Thus, it can be marked as visited.**\\n3. **Thus, we can terminate once we the destination node is polled from the queue.  If that doesnt happen, means it didnt reach the destination**\\n\\n\\n```\\n public int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n        int m = maze.length;\\n        int n = maze[0].length;\\n        \\n        int[][] distance = new int[m][n];  //can also use a hashmap\\n        for (int i = 0; i < m; i++) {\\n            Arrays.fill(distance[i], Integer.MAX_VALUE);\\n        }\\n       \\n        PriorityQueue<int[]> pq = new PriorityQueue<>((p1, p2) -> p1[2] - p2[2]); \\n        distance[start[0]][start[1]] = 0;\\n        pq.add(new int[]{start[0], start[1], 0});\\n        \\n        while (!pq.isEmpty()) {\\n            int[] pos = pq.poll();\\n            //visit.. Optional but help decrease runtime... \\n            if (maze[pos[0]][pos[1]] == 2) { continue; }  //this is here because we might have inserted the same node twice in the PQ.\\n            maze[pos[0]][pos[1]] = 2; \\n            \\n            if (pos[0] == destination[0] && pos[1] == destination[1]) { \\n                return distance[pos[0]][pos[1]]; //this is now the shortest distance in the pq. \\n                //thus, this IS the shortest distance from the source to the destination.\\n            }\\n            for (int i=0; i<4; i++) {\\n                int[] newPos = move(i, pos[0], pos[1], maze);\\n                int totalDistance = distance[pos[0]][pos[1]] + newPos[2];\\n                if (totalDistance < distance[newPos[0]][newPos[1]] && \\n                    maze[newPos[0]][newPos[1]] != 2) {  //not visited.. dont need to add visited node into queue anymore, since we already foudn their shortest distance\\n                    distance[newPos[0]][newPos[1]]  =  totalDistance;\\n                    newPos[2] = totalDistance;\\n                    pq.add(newPos);\\n                }\\n            }\\n        }\\n        return -1;  // Does not reach destination\\n    }\\n    \\n```\\n\\nDijkstra's Algo seems to be an optimization of the first solution, since \\n1.we always select the node with the least cost\\n2. do not revisit visited nodes.. We might revisit nodes multiple times in the first solution.. \\n3. terminate straight away when we find the destination.\\n\\nHowever, the running time for the Dijkstra's algo  is around 100-150ms while the first solution is 90-100ms. \\nDoes anyone know why?"
		},
		{
			"lc_ans_id":"98447",
			"view":"411",
			"top":"9",
			"title":"BFS intuitive Java solution",
			"vote":"1",
			"content":"My answer is not short, but easy to understand.  The basic idea is simple:\\nAccording  to the rule of the question, the ball will start rolling from ```start```. So it will roll to any directions if there is no wall and not boundary.\\n\\nIf it is starting rolling, it will not stop until hitting a wall or boundary. So we need to record the direction of rolling in the ```Node``` object, then we will first try the direction of last movement.\\n\\nWhile it hitting a wall or boundary,  we will try the other two directions. At the same time, we mark this turning point as ```visited```.\\n\\nThere is another rule, so we only check if is the ```destination``` when it is a turning point.\\n\\nAfter we traverse all the paths in the maze, if the ```destination``` cannot be found on any turning point, we just return ```-1```.\\n```\\npublic int shortestDistance(int[][] maze, int[] start, int[] destination) {\\n\\n\\tint m = maze.length;\\n\\tif(m ==  0) return -1;\\n\\tint n = maze[0].length, level = 0;\\n\\n\\tQueue<Node> q = new LinkedList();\\n\\tNode snode = new Node(start[0],  start[1]), dnode = new Node(destination[0], destination[1]);\\n\\tSet<Node> visited = new HashSet<>();\\n\\tq.offer(snode);\\n\\tvisited.add(snode);\\n\\twhile(!q.isEmpty()){\\n\\n\\t\\tint size = q.size();\\n\\t\\tfor(int i = 0; i < size; i++){\\n\\t\\t\\tNode node = q.poll();\\n\\t\\t\\tString chooseDirection = null;\\n\\t\\t\\tif(\"left\".equals(node.direction)){\\n\\t\\t\\t\\tif(!offerNode(maze, node.x - 1, node.y, m, n, q, \"left\")) chooseDirection = \"left\";\\n\\t\\t\\t} else if(\"right\".equals(node.direction)){\\n\\t\\t\\t\\tif(!offerNode(maze, node.x + 1, node.y, m, n, q, \"right\")) chooseDirection = \"right\";\\n\\t\\t\\t} else if(\"up\".equals(node.direction)){\\n\\t\\t\\t\\tif(!offerNode(maze, node.x, node.y + 1, m, n, q, \"up\")) chooseDirection = \"up\";\\n\\t\\t\\t} else if(\"down\".equals(node.direction)){\\n\\t\\t\\t\\tif(!offerNode(maze, node.x, node.y - 1, m, n, q, \"down\")) chooseDirection = \"down\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tofferNode(maze, node.x + 1, node.y, m, n, q, \"right\");\\n\\t\\t\\t\\tofferNode(maze, node.x - 1, node.y, m, n, q, \"left\");\\n\\t\\t\\t\\tofferNode(maze, node.x, node.y + 1, m, n, q, \"up\");\\n\\t\\t\\t\\tofferNode(maze, node.x, node.y - 1, m, n, q, \"down\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(chooseDirection != null){\\n\\t\\t\\t\\tif(dnode.equals(node)) return level;\\n\\t\\t\\t\\tif(visited.contains(node)) continue;\\n\\t\\t\\t\\tvisited.add(node);\\n\\t\\t\\t\\tif(chooseDirection.equals(\"left\") || chooseDirection.equals(\"right\")) {\\n\\t\\t\\t\\t\\tofferNode(maze, node.x, node.y + 1, m, n, q, \"up\");\\n\\t\\t\\t\\t\\tofferNode(maze, node.x, node.y - 1, m, n, q, \"down\");\\n\\t\\t\\t\\t}  else {\\n\\t\\t\\t\\t\\tofferNode(maze, node.x + 1, node.y, m, n, q, \"right\");\\n\\t\\t\\t\\t\\tofferNode(maze, node.x - 1, node.y, m, n, q, \"left\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tlevel++;\\n\\t}\\n\\treturn -1;\\n}\\n\\nprivate boolean offerNode(int[][] maze, int x, int y, int m, int n, Queue<Node> q, String direction) {\\n\\tNode node = new Node(x, y);\\n\\tnode.direction = direction;\\n\\tif(0 <= x && x < m && 0 <= y && y < n && maze[x][y] == 0) {\\n\\t\\tq.offer(node);\\n\\t\\treturn true;\\n\\t} else return false;\\n}\\n\\nclass Node{\\n\\tString direction;\\n\\tint x, y;\\n\\tNode(int xx, int yy){\\n\\t\\tx = xx;\\n\\t\\ty = yy;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int hashCode() {\\n\\t\\treturn x * 31 + y;\\n\\t}\\n\\n\\t@Override\\n\\tpublic boolean equals(Object nn){\\n\\t\\tNode n = (Node) nn;\\n\\t\\treturn (n.x == x) && (n.y == y);\\n\\t}\\n}"
		}
	],
	"id":"495",
	"title":"The Maze II",
	"content":"<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b>, <b>down</b>, <b>left</b> or <b>right</b>, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\r\n\r\n<p>Given the ball's <b>start position</b>, the <b>destination</b> and the <b>maze</b>, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of <b>empty spaces</b> traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.</p>\r\n\r\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\r\n\r\n<p>\r\n<b>Example 1</b>\r\n<pre>\r\n<b>Input 1:</b> a maze represented by a 2D array\r\n\r\n0 0 1 0 0\r\n0 0 0 0 0\r\n0 0 0 1 0\r\n1 1 0 1 1\r\n0 0 0 0 0\r\n\r\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\r\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (4, 4)\r\n\r\n<b>Output:</b> 12\r\n<b>Explanation:</b> One shortest way is : left -> down -> left -> down -> right -> down -> right.\r\n             The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\r\n<img src=\"/static/images/problemset/maze_1_example_1.png\" width = \"30%\" />\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Example 2</b>\r\n<pre>\r\n<b>Input 1:</b> a maze represented by a 2D array\r\n\r\n0 0 1 0 0\r\n0 0 0 0 0\r\n0 0 0 1 0\r\n1 1 0 1 1\r\n0 0 0 0 0\r\n\r\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\r\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (3, 2)\r\n\r\n<b>Output:</b> -1\r\n<b>Explanation:</b> There is no way for the ball to stop at the destination.\r\n<img src=\"/static/images/problemset/maze_1_example_2.png\" width = \"30%\" />\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>There is only one ball and one destination in the maze.</li>\r\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\r\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\r\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.</li>\r\n</ol>\r\n</p>",
	"frequency":"63",
	"ac_num":"9937"
}