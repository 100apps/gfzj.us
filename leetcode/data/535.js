{
	"difficulty":"3",
	"submit_num":"20186",
	"show_id":"552",
	"leetcode_id":"552",
	"answers":[
		{
			"lc_ans_id":"101643",
			"view":"4297",
			"top":"0",
			"title":"Share my O(n) C++ DP solution with thinking process and explanation",
			"vote":"60",
			"content":"---\\n## 1. Problem\\n\\n---\\nGiven a positive integer **n**, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10\\u2079 + 7.\\n\\nA student attendance record is a string that only contains the following three characters:\\n\\n  1.  **'A'** : Absent.\\n  2.  **'L'** : Late.\\n  3.  **'P'** : Present.\\n\\nA record is regarded as rewardable if it doesn't contain **more than one 'A' (absent)** or **more than two continuous 'L' (late)**.\\n\\n---\\n## 2. Thinking process\\n\\n---\\n#### 2.1 Divide the whole problem into sub-problems\\n\\n---\\nBefore introducing the way to calculate the number of all possible attendance records with length n, we divide the problem into **3 parts**.\\n\\n---\\nAs the attendance records is made by **3 characters ('P', 'L', 'A')**, the total number can be divided into\\n\\n>#### **Total = ended with P + ended with L + ended with A**.\\n\\n---\\nIf we define following series\\n\\n>#### **T(n) is the total number of all possible attendance records with length n.**\\n\\n>#### **P(n) is the total number of all possible attendance records ended with 'P' with length n.**\\n\\n>#### **L(n) is the total number of all possible attendance records ended with 'L' with length n.**\\n\\n>#### **A(n) is the total number of all possible attendance records ended with 'A' with length n.**\\n\\n---\\nIt can be inferred that\\n\\n>#### **T(n) = A(n) + P(n) + L(n), n \\u2265 1.**\\n\\n---\\n#### 2.2 Solve the sub-problems by dynamic programming\\n\\n---\\nAs I use dynamic programming, I need to find out the **recursive relation** in 3 sub-problems.\\n\\n---\\n##### 2.2.1 Calculate P(n)\\n\\n---\\nIt can be inferred that\\n\\n---\\n>#### If we **add a 'P' to an attendance records with length n - 1**, we will **get an attendance records ended with 'P' with length n**.\\n\\n---\\nFor an attendance record **with length n - 1**,\\n\\n- #### If its (n - 1)th character is 'P' ---- **CAN** add 'P'. (\"PP\")\\n\\n- #### If its (n - 1)th character is 'A' ---- **CAN** add 'P'. (\"AP\")\\n\\n- #### If its (n - 1)th character is 'L' ---- **CAN** add 'P'. (\"LP\")\\n\\n---\\nwhich means\\n\\n>#### **P(n) = A(n - 1) + P(n - 1) + L(n - 1), n \\u2265 2.**\\n\\n---\\nand we have initial value for the recursive relation\\n\\n>#### **A(1) = P(1) = L(1) = 1.**\\n\\n---\\n##### 2.2.2 Calculate L(n)\\n\\n---\\nSimilarly,\\n\\n>#### If we **add a 'L' to an attendance records with length n - 1**, we will **get an attendance records ended with 'L' with length n**.\\n\\nBut the resulting attendance records must be regarded as rewardable!\\n\\n---\\nAs the rule is that a record is regarded as rewardable if it doesn't contain\\n\\n> ####  **more than two continuous 'L' (late)**.\\n\\n---\\nWe need to consider the situations when we can add 'L' to an attendance record **with length n - 1** and it's still regarded as rewardable.\\n\\n---\\nFor an attendance record **with length n - 1**,\\n\\n- #### If its (n - 1)th character is 'P' ---- **CAN** add 'L'. (\"PL\")\\n\\n- #### If its (n - 1)th character is 'A' ---- **CAN** add 'L'. (\"AL\")\\n\\n---\\n- #### If its (n - 1)th character is 'L':\\n\\n   - #### If its (n - 2)th character is 'A' ---- **CAN** add 'L'. (\"ALL\")\\n    \\n   - #### If its (n - 2)th character is 'P' ---- **CAN** add 'L'. (\"PLL\")\\n\\n   - #### If its (n - 2)th character is 'L' ---- **CAN NOT** add 'L'. (**\"LLL\" breaks the rule**)\\n\\n---\\nwhich means\\n\\n>#### **L(n) = A(n - 1) + P(n - 1) + A(n - 2) + P(n - 2), n \\u2265 3**\\n\\n---\\nand we have initial value for the recursive relation\\n\\n>#### **A(1) = P(1) = 1.**\\n>#### **A(2) = 2, P(2) = 3.**\\n\\nand\\n\\n>#### **L(1) = 1, L(2) = 3.**\\n\\n---\\n##### 2.2.3 Calculate A(n)\\n\\n---\\nSimilarly,\\n\\n>#### If we **add a 'A' to an attendance records with length n - 1**, we will **get an attendance records ended with 'A' with length n**.\\n\\nBut the resulting attendance records must be regarded as rewardable!\\n\\n---\\nAs the rule is that a record is regarded as rewardable if it doesn't contain\\n\\n> ####  **more than one 'A' (absent)**.\\n\\n---\\nWe need to consider the situations when we can add 'A' to an attendance record **with length n - 1** and it's still regarded as rewardable.\\n\\n---\\nFor an attendance record **with length n - 1**,\\n\\n- If its (n - 1)th character is 'A' ---- **CAN NOT** add 'A'. (**\"AA\" breaks the rule**)\\n\\n- If its (n - 1)th character is 'P' **and has no 'A'** ---- **CAN** add 'A'.\\n\\n- If its (n - 1)th character is 'L' **and has no 'A'** ---- **CAN** add 'A'.\\n\\n---\\nIf we define series\\n\\n>#### **noA**P(n) is the total number of all possible attendance records ended with 'P' **with length n** and **with no 'A'**.\\n\\n>#### **noA**L(n) is the total number of all possible attendance records ended with 'L' **with length n** and **with no 'A'**.\\n\\n---\\nIt can be inferred that\\n\\n>#### **A(n) = noAP(n - 1) + noAL(n - 1), n \\u2265 2.**\\n\\nand we have initial value for the recursive relation\\n\\n>#### **A(1) = 1.**\\n>#### **noAP(1) = noAL(1) = 1.**\\n\\n---\\n##### 2.2.4 Calculate noAP(n) and noAL(n)\\n\\n---\\nIn **2.2.3**, 2 new series noAP(n) and noAL(n) is introduced. Now, we focus on the recursive relation in noAP(n) and noAL(n).\\n\\n---\\nFor **noAP(n)**, we need to consider the situations when we can add 'P' to an attendance record **with length n - 1 and no 'A'** and it's still regarded as rewardable.\\n\\n---\\nSince noAP(n) has no 'A', we don't need to consider the situation when its (n - 1)th character is 'A'.\\n\\n---\\nFor an attendance record **with length n - 1**, we can get **only 2 situations**\\n\\n- If its (n - 1)th character is 'P' **and has no 'A'** ---- **CAN** add 'P'.\\n\\n- If its (n - 1)th character is 'L' **and has no 'A'** ---- **CAN** add 'P'.\\n\\n---\\nwhich means\\n\\n>#### **noAP(n) = noAP(n - 1) + noAL(n - 1), n \\u2265 2.**\\n\\nand we have initial value for the recursive relation\\n\\n>#### **noAP(1) = noAL(1) = 1.**\\n\\n---\\nFor **noAL(n)**, we need to consider the situations when we can add 'L' to an attendance record **with length n - 1 and no 'A'** and it's still regarded as rewardable.\\n\\n---\\nSince noAL(n) has no 'A', we don't need to consider the situation when its (n - 1)th character is 'A'.\\n\\n---\\nFor an attendance record **with length n - 1**, we can get\\n\\n- If its (n - 1)th character is 'P' **and has no 'A'** ---- **CAN** add 'L'.(\"PL\")\\n\\n- If its (n - 1)th character is 'L' **and has no 'A'**.\\n\\n    - If its (n - 2)th character is 'P' **and has no 'A'** ----  **CAN** add 'L'.(\"PLL\")\\n\\n    - If its (n - 2)th character is 'L' **and has no 'A'** ----  **CAN NOT** add 'L'.(**\"LLL\" breaks the rule.**)\\n\\n---\\nwhich means\\n\\n> #### **noAL(n) = noAP(n - 1) + noAP(n - 2), n \\u2265 3.**\\n\\nand we have initial value for the recursive relation\\n\\n> #### **noAP(1) = noAL(1) = 1.**\\n\\nand\\n\\n> #### **noAL(2) = 2.**\\n\\n---\\n#### 2.3 Recursive relationship summarization\\n\\n---\\nThe answer to the whole problem is T(n), and\\n\\n>#### **T(n) = A(n) + P(n) + L(n), n \\u2265 1.**\\n\\n---\\nRecursive formula:\\n\\n>#### **P(n) = A(n - 1) + P(n - 1) + L(n - 1), n \\u2265 2.**\\n>#### **A(n) = noAP(n - 1) + noAL(n - 1), n \\u2265 2.**\\n>#### **noAP(n) = noAP(n - 1) + noAL(n - 1), n \\u2265 2.**\\n>#### **L(n) = A(n - 1) + P(n - 1) + A(n - 2) + P(n - 2), n \\u2265 3.**\\n>#### **noAL(n) = noAP(n - 1) + noAP(n - 2), n \\u2265 3.**\\n\\nwith Initial value\\n\\n>#### **A(1) = P(1) = L(1) = 1.**\\n>#### **noAP(1) = noAL(1) = 1.**\\n\\n>#### **L(2) = 3.**\\n>#### **noAL(2) = 2.**\\n\\n---\\n#### 2.4 Simplifying\\n\\n---\\nWhen **n \\u2265 4**, the 3 formulas\\n\\n>#### **A(n) = noAP(n - 1) + noAL(n - 1), n \\u2265 2.**\\n>#### **noAP(n) = noAP(n - 1) + noAL(n - 1), n \\u2265 2.**\\n>#### **noAL(n) = noAP(n - 1) + noAP(n - 2), n \\u2265 3.**\\n\\ncan be simplified to\\n\\n>#### **A(n) = A(n - 1) + A(n - 2) + A(n - 3), n \\u2265 4.**\\n\\n---\\nFinally, the recursive formula group becomes\\n\\n>#### **P(n) = A(n - 1) + P(n - 1) + L(n - 1), n \\u2265 2.**\\n>#### **L(n) = A(n - 1) + P(n - 1) + A(n - 2) + P(n - 2), n \\u2265 3.**\\n>#### **A(n) = A(n - 1) + A(n - 2) + A(n - 3), n \\u2265 4.**\\n\\nHere, **noAP(n) and noAL(n) disappeared.**\\n\\n---\\nwith Initial value\\n> #### **P(1) = 1.**\\n> #### **L(1) = 1, L(2) = 3.**\\n> #### **A(1) = 1, A(2) = 2, A(3) = 4.**\\n\\n---\\n#### 2.5 Do modulus\\n\\n---\\nThe result need to be returned after mod 10\\u2079 + 7.\\n\\nSince the result is generated by adding a lot of middle results together, in order to make sure that every middle result and the final result won't exceed INT_MAX, we need to do mod for **every middle result**, and for **every 2-middle-result-addition**.\\n\\n---\\n## 3. Complexity analysis\\n\\n---\\n#### 3.1 Time complexity\\n\\n---\\nSince the algorithm is one-pass from 1 to n.\\n\\n> #### **The time complexity is O(n)**.\\n\\n---\\n#### 3.2 Space complexity\\n\\n---\\nSince **3 arrays** are used to save P(n), L(n), A(n), the total size is **3n**.\\n\\n> #### **The space complexity is O(n)**.\\n\\n---\\n## 4. Code\\n\\n---\\n```\\nclass Solution {\\npublic:\\n    int checkRecord(int n) {\\n        int m = 1000000007;\\n        int *A = new int [n];\\n        int *P = new int [n];\\n        int *L = new int [n];\\n        \\n        P[0] = 1;\\n        L[0] = 1;\\n        L[1] = 3;\\n        A[0] = 1;\\n        A[1] = 2;\\n        A[2] = 4;\\n        \\n        if(n == 1) return 3;\\n        \\n        for(int i = 1; i < n; i++)\\n        {\\n            A[i - 1] %= m;\\n            P[i - 1] %= m;\\n            L[i - 1] %= m;\\n            \\n            P[i] = ((A[i - 1] + P[i - 1]) % m + L[i - 1]) % m;\\n            \\n            if(i > 1) L[i] = ((A[i - 1] + P[i - 1]) % m + (A[i - 2] + P[i - 2]) % m) % m;\\n            \\n            if(i > 2) A[i] = ((A[i - 1] + A[i - 2]) % m + A[i - 3]) % m;\\n        }\\n        \\n        return ((A[n - 1] % m + P[n - 1] % m) % m + L[n - 1] % m) % m;\\n    }\\n};\\n```\\n---"
		},
		{
			"lc_ans_id":"101633",
			"view":"7644",
			"top":"1",
			"title":"Improving the runtime from O(n) to O(log n)",
			"vote":"53",
			"content":"Let `f[i][j][k]` denote the # of valid sequences of length `i` where:\\n1) There can be at most `j` A's in the entire sequence.\\n2) There can be at most `k` **trailing** L's.\\n\\nWe give the recurrence in the following code, which should be self-explanatory, and the final answer is `f[n][1][2]`.\\n```Java\\npublic int checkRecord(int n) {\\n    final int MOD = 1000000007;\\n    int[][][] f = new int[n + 1][2][3];\\n\\n    f[0] = new int[][]{{1, 1, 1}, {1, 1, 1}};\\n    for (int i = 1; i <= n; i++)\\n        for (int j = 0; j < 2; j++)\\n            for (int k = 0; k < 3; k++) {\\n                int val = f[i - 1][j][2]; // ...P\\n                if (j > 0) val = (val + f[i - 1][j - 1][2]) % MOD; // ...A\\n                if (k > 0) val = (val + f[i - 1][j][k - 1]) % MOD; // ...L\\n                f[i][j][k] = val;\\n            }\\n    return f[n][1][2];\\n}\\n```\\nThe runtime of this solution is clearly O(n), using linear space (which can be easily optimized to O(1) though). Now, let's see how to further improve the runtime.\\n\\nIn fact, if we treat `f[i][][]` and `f[i-1][][]` as two vectors, we can represent the recurrence of `f[i][j][k]` as follows:\\n```\\nf[i][0][0]   | 0 0 1 0 0 0 |   f[i-1][0][0]\\nf[i][0][1]   | 1 0 1 0 0 0 |   f[i-1][0][1]\\nf[i][0][2] = | 0 1 1 0 0 0 | * f[i-1][0][2]\\nf[i][1][0]   | 0 0 1 0 0 1 |   f[i-1][1][0]\\nf[i][1][1]   | 0 0 1 1 0 1 |   f[i-1][1][1]\\nf[i][1][2]   | 0 0 1 0 1 1 |   f[i-1][1][2]\\n```\\nLet `A` be the matrix above, then `f[n][][] = A^n * f[0][][]`, where `f[0][][] = [1 1 1 1 1 1]`. The point of this approach is that we can compute `A^n` using [exponentiating by squaring](https://en.wikipedia.org/wiki/Exponentiation_by_squaring) (thanks to @StefanPochmann for the name correction), which will take O(6^3 * log n) = O(log n) time. Therefore, the runtime improves to O(log n), which suffices to handle the case for much larger `n`, say 10^18.\\n***Update:*** The final answer is `f[n][1][2]`, which involves multiplying the last row of `A^n` and the column vector `[1 1 1 1 1 1]`. Interestingly, it is also equal to `A^(n+1)[5][2]` as the third column of `A` is just that vector. Credit to @StefanPochmann.\\n\\nJava Code:\\n```Java\\nfinal int MOD = 1000000007;\\nfinal int M = 6;\\n\\nint[][] mul(int[][] A, int[][] B) {\\n    int[][] C = new int[M][M];\\n    for (int i = 0; i < M; i++)\\n        for (int j = 0; j < M; j++)\\n            for (int k = 0; k < M; k++)\\n                C[i][j] = (int) ((C[i][j] + (long) A[i][k] * B[k][j]) % MOD);\\n    return C;\\n}\\n\\n\\nint[][] pow(int[][] A, int n) {\\n    int[][] res = new int[M][M];\\n    for (int i = 0; i < M; i++)\\n        res[i][i] = 1;\\n    while (n > 0) {\\n        if (n % 2 == 1)\\n            res = mul(res, A);\\n        A = mul(A, A);\\n        n /= 2;\\n    }\\n    return res;\\n}\\n\\npublic int checkRecord(int n) {\\n    int[][] A = {\\n            {0, 0, 1, 0, 0, 0},\\n            {1, 0, 1, 0, 0, 0},\\n            {0, 1, 1, 0, 0, 0},\\n            {0, 0, 1, 0, 0, 1},\\n            {0, 0, 1, 1, 0, 1},\\n            {0, 0, 1, 0, 1, 1},\\n    };\\n    return pow(A, n + 1)[5][2];\\n}\\n```"
		},
		{
			"lc_ans_id":"101634",
			"view":"3481",
			"top":"2",
			"title":"Python DP with explanation",
			"vote":"20",
			"content":"```dp[i]```the number of  all possible attendance (without ```'A'```) records with length ```i``` :\\n- end with ```\"P\"```: ```dp[i-1]```\\n- end with ```\"PL\"```: ```dp[i-2]```\\n- end with ```\"PLL\"```: ```dp[i-3]```\\n- end with ```\"LLL\"```: is not allowed\\n\\nso ```dp[i] = dp[i-1] + dp[i-2] + dp[i-3]```\\n\\n\\nthe number of  all possible attendance (with ```'A'```) records with length ```n```:\\n```\\u2211dp[i] *dp[n-1-i]```   ```i = 0,1,...,n-1```\\n\\nTime Complexity ```O(n)```\\nSpace Complexity ```O(n)```\\n\\n(In code ```nums[i+1]``` means ```dp[i]```)\\n```\\nclass Solution(object):\\n    def checkRecord(self, n):\\n        if n == 1:\\n            return 3\\n        if n == 0:\\n            return 0\\n        nums = [1, 1, 2]\\n        i = 2\\n        while i < n:\\n            nums.append((nums[i] + nums[i-1] + nums[i-2])% 1000000007)\\n            i += 1\\n        result = (nums[n] + nums[n-1] + nums[n-2]) % 1000000007\\n        for i in range(n):\\n            result += nums[i+1] * nums[n-i] % 1000000007\\n            result %= 1000000007\\n        return result\\n```"
		},
		{
			"lc_ans_id":"101638",
			"view":"3464",
			"top":"3",
			"title":"Simple Java O(n) solution",
			"vote":"16",
			"content":"```\\nstatic final int M = 1000000007;\\n\\npublic int checkRecord(int n) {\\n    long[] PorL = new long[n + 1]; // ending with P or L, no A\\n    long[] P = new long[n + 1]; // ending with P, no A\\n    PorL[0] = P[0] = 1; PorL[1] = 2; P[1] = 1;\\n\\n    for (int i = 2; i <= n; i++) {\\n        P[i] = PorL[i - 1];\\n        PorL[i] = (P[i] + P[i - 1] + P[i - 2]) % M;\\n    }\\n    \\n    long res = PorL[n];\\n    for (int i = 0; i < n; i++) { // inserting A into (n-1)-length strings\\n    \\tlong s = (PorL[i] * PorL[n - i - 1]) % M;\\n        res = (res + s) % M;\\n    }\\n    \\n    return (int) res;\\n}\\n```"
		},
		{
			"lc_ans_id":"101671",
			"view":"2662",
			"top":"4",
			"title":"O(n) time O(1) space solution",
			"vote":"9",
			"content":"axly represents number of strings containing x A's and ending with y L's.\\n\\n```\\npublic class Solution {\\n    long M = 1000000007;\\n    public int checkRecord(int n) {\\n        long a0l0 = 1, a0l1 = 0, a0l2 = 0, a1l0 = 0, a1l1 = 0, a1l2 = 0;\\n        for (int i = 0; i <= n; i++) {\\n            long a0l0_ = (a0l0 + a0l1 + a0l2) % M;\\n            a0l2 = a0l1;\\n            a0l1 = a0l0;\\n            a0l0 = a0l0_;\\n            long a1l0_ = (a0l0 + a1l0 + a1l1 + a1l2) % M;\\n            a1l2 = a1l1;\\n            a1l1 = a1l0;\\n            a1l0 = a1l0_;\\n        }\\n        return (int) a1l0;\\n    }\\n}"
		},
		{
			"lc_ans_id":"101645",
			"view":"278",
			"top":"5",
			"title":"Python O(n) solution using simple recurrence formula with explanation",
			"vote":"4",
			"content":"```\\nfrom collections import deque\\n\\nclass Solution(object):\\n    def checkRecord(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        MOD = 1000000007\\n        withA = deque([1, 3, 8])\\n        withoutA = deque([1, 2, 4])\\n        if n < 3:\\n            return withA[n]\\n        for i in range(3, n+1):\\n            withoutA.append(sum(withoutA) % MOD)\\n            withA.append((sum(withA) + withoutA[-1]) % MOD)\\n            withoutA.popleft()\\n            withA.popleft()\\n        return withA[-1]\\n```\\nRecurrence formula:\\nLet Q(n) be the solution of the the question, namely the number of all rewardable records.\\nLet R(n) be the number of all rewardable records without A.\\n\\nThinking the problem as replacing Ps and As on an array of Ls instead. Since the constraint is no more than 3 continuous Ls is allowed. For a n-size array, let's just look into the first 3 places, since there must be at least on replacement been taken place there:\\n\\nFirst, let's consider the case we replacing with P. There're 3 cases:\\n\\n1. P??: meaning we replace the first L with P. Doing so will shrink the problem size by one, so the number of this case is Q(n-1);\\n2. LP?: meaning we replace the second L with P. The first place got to be L since the case where P in the first place is being considered above. So the number of this case is Q(n-2);\\n3. LLP: meaning we replace the third L with P. Leaving us the number of Q(n-3);\\n\\nNow let's consider the case we replacing with A:\\n \\n4. A??: This we narrow down the problem size by one, and for the rest places there must be no As. So the number is R(n-1);\\n5. LA?: this will be R(n-2);\\n6. LLA: this will be R(n-3);\\n\\nIt's easy to see that the recurrence formula of R is just similar to the first 3 cases combined, namely:\\nR(n) = R(n-1) + R(n-2) + R(n-3)\\n\\nSo the recurrence formula of Q is:\\n```\\nQ(n) = Q(n-1) + Q(n-2) + Q(n-3) + R(n-1) + R(n-2) + R(n-3)\\n     = Q(n-1) + Q(n-2) + Q(n-3) + R(n)\\n```"
		},
		{
			"lc_ans_id":"101650",
			"view":"733",
			"top":"6",
			"title":"[552. Student Attendance Record II] C++_with explanation_from DFS to DP",
			"vote":"4",
			"content":"This problem is not so hard... but you have to be aware of lots of details, like memory limit, number's out of range and etc.\\n\\nFirst, I tried the DFS method. Of course, it is TLE.\\n\\n    class Solution {\\n    public:\\n    int checkRecord(int n) {\\n        long long res = 0;\\n        dfs(n, 0, 0, 0, res);\\n        return res % (int(pow(10,9))+7);\\n    }\\n    void dfs(int n, int s, int A, int L, long long& res){\\n        if(s == n){\\n            res++;\\n            return;\\n        }\\n        dfs(n, s+1, A, 0, res);//add \"P\"\\n        if(A < 1){\\n            dfs(n, s+1, A + 1, 0, res);\\n        }\\n        if(L <= 1){\\n            dfs(n, s+1,A, L + 1, res);\\n        }\\n    }\\n    };\\n\\n\\nSo I switched to Dynamic Programming, the status functions are:\\n**dp[n][j][k]** : The current total length of our string is n, in current string s, the number of 'A' is j, of course j = 0 or 1, and the number of continuous L at the end of our string is k, k = 0, 1, 2.\\nEach time we will add one char at the end of our current string.\\n           \\n     (1) dp[n][0][0] = dp[n-1][0][0] + dp[n-1][0][1] + dp[n-1][0][2] \\n     3 ways we can get length n string with 0 'A' and 0 continuous L at the end of string s: add 1 \"P\" at the end of  dp[n-1][0][0], dp[n-1][0][1], dp[n-1][0][2]\\n\\n     (2) dp[n][0][1] = dp[n-1][0][0]\\n     We could only reach this status from dp[n-1][0][0] by add one 'L'\\n\\n     (3) dp[n][0][2] = dp[n-1][0][1] \\n     We could only reach this status from dp[n-1][0][1] by add one 'L'\\n      \\n     (4) dp[n][1][0] = dp[n-1][0][0] (add one 'A' after the 'P') + \\n                         dp[n-1][0][1](add one 'A' after the 'L') + \\n                         dp[n-1][0][2](add one 'A' after the 'LL')\\n                         dp[n-1][1][0](add one 'P' after 'P') + \\n                         dp[n-1][1][1](add one 'P' after 'L') + \\n                         dp[n-1][1][2](add one 'P' after 'LL')\\n\\n\\n     (5) dp[n][1][0] = dp[n-1][0][0] (add one 'A' after 'P') + \\n                          dp[n-1][0][1](add one 'A' after 'L') + \\n                          dp[n-1][0][2](add one 'A' after 'LL')\\n                          dp[n-1][1][0](add one 'P' after 'P') + \\n                          dp[n-1][1][1](add one 'P' after 'L') + \\n                          dp[n-1][1][2](add one 'P' after 'LL')\\n                  \\n     (6) dp[n][1][1] = dp[n-1][1][0]\\n      (add one 'L' after 'P' or 'A', and at n-1, we've already have one 'A' in our string)\\n\\n     (7) dp[n][1][2] = dp[n-1][1][1]\\n       (add one 'L' after 'L', and at n-1, we've already have one 'A' in our string)\\n\\n     (initial) dp[1] = [\\n                 [1,1,0], \\n //no 'A' in our string: The ending have 0 continuous 'L', which is 'P';\\n                                                   The ending have 1 continuous 'L', which is 'L';\\n                                                   The ending have 2 continuous 'L', which is impossible.\\n\\n                 [1,0,0]\\n//one 'A' in our string: The ending have 0 continuous 'L', which is 'A';\\n                                                   The ending have 1 continuous 'L', which is impossible;\\n                                                   The ending have 2 continuous 'L', which is impossible.\\n                 ]\\n\\n\\nWhat's more, we notice that dp is only dependent on n-1, so we can use 2-dimensional vector to conduct our dynamic programming.\\n\\nOne thing we mush be aware is that number in our vector will be pretty large!!! So just try to **mod M** at each summation step.\\n\\nThe C++ code:\\n\\n     class Solution {\\n     public:\\n    int checkRecord(int n) {\\n        const int M = 1000000007;\\n        vector< vector<long> > dp(2, vector<long>(3, 0));\\n        dp = {{1,1,0},{1,0,0}};\\n        for(int i = 1; i < n; ++i){\\n            vector< vector<long> > tmp(2, vector<long>(3, 0));\\n            tmp[0][0] = ((dp[0][0] + dp[0][1] + dp[0][2])%M);\\n            tmp[0][1] = dp[0][0]%M;\\n            tmp[0][2] = dp[0][1];\\n            tmp[1][0] = (((dp[0][0] + dp[0][1] + dp[0][2])%M + (dp[1][0] + dp[1][1] + dp[1][2])%M))%M;\\n            tmp[1][1] = dp[1][0]%M;\\n            tmp[1][2] = dp[1][1]%M;\\n            dp = tmp;\\n        }\\n        long res = 0;\\n        for(int A = 0; A < 2; ++A){\\n            for(int L = 0; L < 3; ++L){\\n                res += dp[A][L]%M;\\n            }\\n        }\\n        return res%M;\\n    }\\n    };"
		},
		{
			"lc_ans_id":"101639",
			"view":"120",
			"top":"7",
			"title":"Pure math and easy to understand python O(n) solution",
			"vote":"3",
			"content":"Well, this problem is a pure math solution ,which can be solved by **recursion formula of arithmetic sequences** , and the sequence is represented by array **res**, and in every iteration, based on the formula we update array. Let me explain the array res:\\n\\nres[0]   ---> the number of answer which includes 'A' , not ending with 'L'\\nres[1]   ---> the number of answer which includes 'A', ending with one 'L'\\nres[2]   ---> the number of answer which includes 'A', ending with two 'L'\\nres[3]   ---> the number of answer which don't include 'A' , not ending with 'L'\\nres[4]   ---> the number of answer which don't include 'A' , ending with one 'L'\\nres[5]   ---> the number of answer which don't include 'A' , ending with two 'L'\\n\\nthus when n=1, res should be initialized as :[1,0,0,1,1,0]  ( ['A','L','P'] )\\n\\nAnd the recursion formula is totally based on the requirement , every time we just need to update the array res. Below is my code:\\n\\n```\\nclass Solution(object):\\n    def checkRecord(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        res=[1,0,0,1,1,0]\\n        for i in range(1,n):\\n            temp=[0,0,0,0,0,0]\\n            temp[0]=sum(res)%(10**9+7)\\n            temp[1]=res[0]%(10**9+7)\\n            temp[2]=res[1]%(10**9+7)\\n            temp[3]=(res[3]+res[4]+res[5])%(10**9+7)\\n            temp[4]=res[3]%(10**9+7)\\n            temp[5]=res[4]%(10**9+7)\\n            res=temp\\n        return sum(res)%(10**9+7)\\n            \\n        ```"
		},
		{
			"lc_ans_id":"101651",
			"view":"492",
			"top":"8",
			"title":"Python, Straightforward DP with Explanation",
			"vote":"3",
			"content":"At time t where every report is length t, Let ```a, b, c``` be sequence types *without* an 'A' ending in N, NL, LL; and ```d,e,f``` be sequence types *with* an 'A' ending in N, NL, LL.  (Here, N will denote a non-'L' character.)  These types are disjoint, and exhaustive (their union is the set of all valid reports.)  At the beginning when t = 1, ```a = b = d = 1``` and we should compute N-1 more steps.\\n\\nFrom a sequence of type a, b, c, we can write an 'A' to give us a sequence of type d, or a 'P' to give us a sequence of type a.  From a sequence of type d, e, f, we can write a 'P' to give us a sequence of type d.  From a sequence of type a, b, d, e, we can write an 'L' to give a sequence of (respectively) b, c, e, f.  These are all the letters we could write in any situation.  Working backwards, we can get the sums for ```a,b,c,d,e,f``` written below.\\n  \\n```\\ndef checkRecord(self, N):\\n    MOD = 10**9 + 7\\n    a = b = d = 1\\n    c = e = f = 0\\n    for _ in xrange(N-1):\\n        a, b, c, d, e, f = (a+b+c)%MOD, a, b, (a+b+c+d+e+f)%MOD, d, e\\n    \\n    return (a+b+c+d+e+f)%MOD\\n```"
		},
		{
			"lc_ans_id":"101652",
			"view":"281",
			"top":"9",
			"title":"Java 4 lines DP solution with state transition table explained",
			"vote":"2",
			"content":"Let ```AnLn``` denote number of strings containing n ```A```'s and ending with n ```L```'s\\nFor example:\\n\\nWhen ```n = 1``` we have:\\n```\\n\\t A0L0: P\\n\\t A0L1: L\\n\\t A0L2:\\n\\t A1L0: A\\n\\t A1L1:\\n\\t A1L2:\\n\\t Done:\\n```\\nWhen ```n = 2``` we have:\\n```\\n\\t A0L0: LP, PP\\n\\t A0L1: PL\\n\\t A0L2: LL\\n\\t A1L0: AP, LA, PA\\n\\t A1L1: AL\\n\\t A1L2:\\n\\t Done: AA\\n\\t\\n```\\nIn general we have this transition table:\\n```\\n\\t -----+---------------\\n\\t INIT | A -- L -- P --\\n\\t -----+---------------\\n\\t A0L0 | A1L0 A0L1 A0L0\\n\\t A0L1 | A1L0 A0L2 A0L0\\n\\t A0L2 | A1L0 Done A0L0\\n\\t A1L0 | Done A1L1 A1L0\\n\\t A1L1 | Done A1L2 A1L0\\n\\t A1L2 | Done Done A1L0\\n```\\nFrom the transition table we see that:\\n```A0L0``` of ```n``` can result from ```A0L0 + A0L1 + A0L2``` of ```n - 1``` by appending ```P```\\n```A0L1``` of ```n``` can only result from ```A0L0``` of ```n - 1``` by appending ```L```\\nand so on...\\n\\nThat's why in each iteration we update:\\n```dp[0] = dp[0] + dp[1] + dp[2]```\\n```dp[1] = dp[0]```\\nand so on...\\n\\n\\n```\\npublic int checkRecord(int n) {\\n    int[] dp = { 1, 1, 0, 1, 0, 0 }; // init table for n = 1\\n    for (int i = 2; i <= n; i++) // updating table for n = i\\n        dp = new int[] { sum(dp, 0, 2), dp[0], dp[1], sum(dp, 0, 5), dp[3], dp[4] };\\n    return sum(dp, 0, 5);       \\n}                                   \\n\\nstatic int sum(int[] arr, int l, int h) {\\n    int s = 0;  \\n    for (int i = l; i <= h; i++) \\n        s = (s + arr[i]) % 1000000007;  \\n    return s;                   \\n} \\n```"
		}
	],
	"id":"535",
	"title":"Student Attendance Record II",
	"content":"<p>Given a positive integer <b>n</b>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\r\n\r\n<p>A student attendance record is a string that only contains the following three characters:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>'A'</b> : Absent. </li>\r\n<li><b>'L'</b> : Late.</li>\r\n<li> <b>'P'</b> : Present. </li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nA record is regarded as rewardable if it doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 2\r\n<b>Output:</b> 8 \r\n<b>Explanation:</b>\r\nThere are 8 records with length 2 will be regarded as rewardable:\r\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\r\nOnly \"AA\" won't be regarded as rewardable owing to more than one absent times. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe value of <b>n</b> won't exceed 100,000.\r\n</p>\r\n\r\n\r\n",
	"frequency":"55",
	"ac_num":"6352"
}