{
	"difficulty":"2",
	"submit_num":"19997",
	"show_id":"640",
	"leetcode_id":"640",
	"answers":[
		{
			"lc_ans_id":"105311",
			"view":"4974",
			"top":"0",
			"title":"Concise Java Solution",
			"vote":"24",
			"content":"```\\npublic String solveEquation(String equation) {\\n    int[] res = evaluateExpression(equation.split(\"=\")[0]),  \\n  \\t  res2 = evaluateExpression(equation.split(\"=\")[1]);\\n    res[0] -= res2[0];\\n    res[1] = res2[1] - res[1];\\n    if (res[0] == 0 && res[1] == 0) return \"Infinite solutions\";\\n    if (res[0] == 0) return \"No solution\";\\n    return \"x=\" + res[1]/res[0];\\n}  \\n\\npublic int[] evaluateExpression(String exp) {\\n    String[] tokens = exp.split(\"(?=[-+])\"); \\n    int[] res =  new int[2];\\n    for (String token : tokens) {\\n        if (token.equals(\"+x\") || token.equals(\"x\")) res[0] += 1;\\n\\telse if (token.equals(\"-x\")) res[0] -= 1;\\n\\telse if (token.contains(\"x\")) res[0] += Integer.parseInt(token.substring(0, token.indexOf(\"x\")));\\n\\telse res[1] += Integer.parseInt(token);\\n    }\\n    return res;\\n}\\n```"
		},
		{
			"lc_ans_id":"105362",
			"view":"2365",
			"top":"1",
			"title":"Simple 2-liner (and more)",
			"vote":"16",
			"content":"```\\ndef solve_equation(equation)\\n  a, x = eval('i = 1i;' + equation.gsub('x', 'i').sub('=', '-(') + ')').rect\\n  \"x=#{-a/x}\" rescue a != 0 ? 'No solution' : 'Infinite solutions'\\nend\\n```\\nIt's easy to change an equation like `2+3x=5x-7` to an expression for a complex number like `2+3i-(5i-7)`. Then I let Ruby evaluate that and it gives me the total of \"x numbers\" and the total of \"non-x numbers\" as the imaginary and real part of the complex number.\\n\\nSame in Python:\\n\\n    def solveEquation(self, equation):\\n        z = eval(equation.replace('x', 'j').replace('=', '-(') + ')', {'j': 1j})\\n        a, x = z.real, -z.imag\\n        return 'x=%d' % (a / x) if x else 'No solution' if a else 'Infinite solutions'\\n\\nAnd here's a completely different one using a regular expression to parse the tokens:\\n\\n    def solveEquation(self, equation):\\n        x = a = 0\\n        side = 1\\n        for eq, sign, num, isx in re.findall('(=)|([-+]?)(\\\\d*)(x?)', equation):\\n            if eq:\\n                side = -1\\n            elif isx:\\n                x += side * int(sign + '1') * int(num or 1)\\n            elif num:\\n                a -= side * int(sign + num)\\n        return 'x=%d' % (a / x) if x else 'No solution' if a else 'Infinite solutions'"
		},
		{
			"lc_ans_id":"105351",
			"view":"1287",
			"top":"2",
			"title":"C++, Two pointers, concise solution",
			"vote":"7",
			"content":"The idea is using two pointers to update two parameters: the coefficient of x and the total sum. On the left and right side of '=', we have to use opposite signs for each numbers, so I define a sign variable, which will flip if '=' is seen.\\n```\\nclass Solution {\\npublic:\\n    string solveEquation(string equation) {\\n        int n = equation.size(), sign = 1, coeff = 0, tot = 0, i = 0;\\n        for (int j = 0; j < n; j++) {\\n            if (equation[j] == '+' || equation[j] == '-') {\\n                if (j > i) tot += sign*stoi(equation.substr(i, j-i));\\n                i = j;\\n            }\\n            // corner case: x, -x, +x\\n            else if (equation[j] == 'x') {\\n                if ((i == j) || equation[j-1] == '+')\\n                    coeff += sign;\\n                else if (equation[j-1] == '-')\\n                    coeff -= sign;\\n                else \\n                    coeff += sign*stoi(equation.substr(i, j-i));\\n                i = j+1;\\n            }\\n           // flip sign\\n            else if (equation[j] == '=') {\\n                if (j > i) tot += sign*stoi(equation.substr(i, j-i));\\n                sign = -1;\\n                i = j+1;\\n            }\\n        }\\n        // there may be a number in the end\\n        if (i < n) tot += sign*stoi(equation.substr(i));\\n        if (coeff == 0 && tot == 0) return \"Infinite solutions\";\\n        if (coeff == 0 && tot) return \"No solution\";\\n        int ans = -tot/coeff;\\n        return \"x=\"+to_string(ans);\\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"105310",
			"view":"661",
			"top":"3",
			"title":"Python via helper function",
			"vote":"5",
			"content":"Here I used ```helper``` to convert left and right equations into the ```coef``` and ```const``` which represent the coefficient of ```x``` and remaining constant.\\n```\\nclass Solution(object):\\n    def solveEquation(self, equation):\\n        \"\"\"\\n        :type equation: str\\n        :rtype: str\\n        \"\"\"\\n        def helper(s):\\n            sign, n = 1, len(s)\\n            # i, coef, const stand for current index, and accumulative 'x' coefficient and constant\\n            i = coef = const = 0\\n            while i < n:\\n                if s[i] == '+':\\n                    sign = 1\\n                elif s[i] == '-':\\n                    sign = -1\\n                elif s[i].isdigit():\\n                    j = i\\n                    while j < n and s[j].isdigit():\\n                        j += 1\\n                    tmp = int(s[i:j])\\n                    if j < n and s[j] == 'x':\\n                        coef += tmp * sign\\n                        j += 1\\n                    else:\\n                        const += tmp * sign\\n                    i = j-1\\n                else:\\n                    coef += 1 * sign\\n                i += 1\\n            return coef, const\\n            \\n        left, right = equation.split('=')\\n        k1, b1 = helper(left)\\n        k2, b2 = helper(right)\\n        # k1x + b1 = k2x + b2\\n        ans = 'x=' + str((b2 - b1) / (k1 - k2)) if k1 != k2 and b1 != b2 \\\\\\n              else \"Infinite solutions\" if k1 == k2 and b1 == b2 \\\\\\n              else \"No solution\" if b2 != b1 else 'x=0'\\n        return ans\\n```"
		},
		{
			"lc_ans_id":"105366",
			"view":"660",
			"top":"4",
			"title":"Python Regex Solution explained",
			"vote":"4",
			"content":"The idea is to split the equation into 2 parts Left hand side(LHS) and Right hand Side(RHS) and then extract the coefficients and numbers from both the parts. \\n\\n**Coefficients are defined by the following regex**\\n```'-?\\\\d*x'```\\n\\n```-?``` - An optional negative sign\\n```\\\\d*``` - 0 or more digits\\n```x``` - literal x\\n\\n**Regex for number:**\\n```'-?\\\\d*'``` Again, this is as explained above.\\n\\n**An example**\\nBefore the program, here's a small example for the equation : ```x+5-3+x=6+x-2```\\n\\nLHS: ```x+5-3+x```\\nRHS: ```6+x-2```\\n\\nLHS coefficients: ```['x', 'x']```\\nRHS coefficients: ```['x']```\\n\\nJust the numbers on the LHS ```['', '', '5', '-3', '', '', '']```\\nJust the numbers on the RHS ```['6', '', '', '-2', '']```\\n\\nLHS SUM of the numbers: ```2```\\nRHS SUM of the numbers: ```4```\\n\\nLHS Coeff sum: ```2```\\nRHS Coeff sum: ```1```\\n\\nFinal Answer:  ```x=2```\\n\\n**Now the code**\\n```\\n def solveEquation(self, equation):\\n        \"\"\"\\n        :type equation: str\\n        :rtype: str\\n        \"\"\"\\n        # define the patterns\\n        co_p = re.compile('-?\\\\d*x')\\n        num_p = re.compile('-?\\\\d*')\\n\\n        # split the 2 parts of the equation.\\n        lhs = equation.split('=')[0]\\n        rhs = equation.split('=')[1]\\n\\n        # find the list of coefficients with x(in both lhs and rhs)\\n        lhs_co = co_p.findall(lhs)\\n        rhs_co = co_p.findall(rhs)\\n\\n        # find the list of all signed numbers after removing the coefficient\\n        # Notice that, I replace the coeffiecients with an '*' symbol to extract the remaining numbers. \\n        # And I retrieve the numbers with the sign.\\n        lhs_num_list = num_p.findall(re.sub('-?\\\\d*x', '*', lhs))\\n        rhs_num_list = num_p.findall(re.sub('-?\\\\d*x', '*', rhs))\\n\\n        # Now, simply add the numbers on the LHS and RHS\\n        lhs_sum = 0\\n        rhs_sum = 0\\n\\n        for i in lhs_num_list:\\n            if i:\\n                lhs_sum += int(i)\\n\\n        for i in rhs_num_list:\\n            if i:\\n                rhs_sum += int(i)\\n\\n        # Add the Coefficients on both LHS and RHS.\\n        lhs_coeff_sum = 0\\n        rhs_coeff_sum = 0\\n        \\n        # While adding coefficients, 'x' and '-x' wil be replaced by 1 and -1 respectively.\\n        for i in lhs_co:\\n                i = i.replace('x', '')\\n                if not i:\\n                    i = 1\\n                elif i == '-':\\n                    i = -1\\n                lhs_coeff_sum += int(i)\\n\\n        for i in rhs_co:\\n                i = i.replace('x', '')\\n                if not i:\\n                    i = 1\\n                elif i == '-':\\n                    i = -1\\n                rhs_coeff_sum += int(i)\\n        \\n        # Now, this is simple math and check the conditions to handle the edge cases.\\n        if lhs_sum == rhs_sum and lhs_coeff_sum == rhs_coeff_sum:\\n            return \"Infinite solutions\"\\n\\n        if lhs_coeff_sum == rhs_coeff_sum:\\n            return \"No solution\"\\n        result = (rhs_sum - lhs_sum) / (lhs_coeff_sum - rhs_coeff_sum)\\n        return \"x=\" + str(result)\\n```\\nDo let me know your feedback, Thanks!"
		},
		{
			"lc_ans_id":"105314",
			"view":"1302",
			"top":"5",
			"title":"Easiest Java solution, self-explanatory",
			"vote":"3",
			"content":"```\\npublic class Solution {\\n    public String solveEquation(String equation) {\\n        if(equation == null || equation.length() == 0) {\\n\\t    return equation;\\n\\t}\\n\\n\\tString[] parts = equation.split(\"=\");\\n\\tString left = parts[0];\\n\\tString right = parts[1];\\n\\n\\tint[] lco = process(left);\\n\\tint[] rco = process(right);\\n\\n\\tint x = lco[0] - rco[0];\\n\\tint co = rco[1] - lco[1];\\n\\n\\tif(x == 0) {\\n\\t    if(co == 0) {\\n        \\treturn \"Infinite solutions\";\\n       \\t    } else {\\n\\t\\treturn \"No solution\";\\n\\t    }\\n\\t} else if(co == 0) {\\n\\t    return \"x=0\";\\n\\t} else {\\n\\t    return \"x=\" + \"\" + String.valueOf((int) (co/x));\\n\\t}\\n    }\\n\\n    public int[] process(String left) {\\n        char[] array = left.toCharArray();\\n\\tint length = array.length;\\n\\tint prev = 1;\\n\\tint x = 0;\\n\\tint co = 0;\\n\\tint cur = 0;\\n\\t\\n\\tfor(int i = 0; i < length; ++i) {\\n            if(array[i] != 'x') {\\n\\t\\tif(array[i] == '-') {\\n\\t\\t    prev = -1;\\n\\t\\t} else if(array[i] == '+') {\\n\\t\\t    prev = 1;\\n\\t\\t} else {\\n\\t\\t    cur = 0;\\n\\t            while(i < length && array[i] != '+' && array[i] != '-' && array[i] != 'x') {\\n\\t\\t        cur = cur * 10 + ((int)(array[i] - '0'));\\n\\t\\t\\ti++;\\n\\t\\t    }\\n\\t\\t    if(i < length && array[i] == 'x') {\\n\\t\\t        x = x + prev * ((int) (cur));\\n\\t\\t\\ti++;\\n\\t\\t    } else {\\n\\t\\t\\tco = co + prev * ((int) (cur));\\n\\t\\t    }\\n\\t\\t    --i;\\n\\t\\t    }\\n\\t    } else {\\n\\t        x += prev;\\n\\t    }\\n        }\\n\\treturn new int[]{x, co};\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"105333",
			"view":"93",
			"top":"6",
			"title":"AC C++, Straight forward",
			"vote":"2",
			"content":"```cpp\\nclass Solution {\\npublic:\\n    string solveEquation(string equation) {\\n        int i =0;\\n        int para=0, xpara=0;\\n        int flag = 1;\\n        while(i<equation.size())\\n        {\\n            int sign = 1;\\n            int temp = 0;\\n            if(equation[i] == '=') \\n            {\\n                flag = -1;\\n                i++;\\n            }\\n            if(equation[i] == '-') \\n            {\\n                sign = -1; \\n                i++;\\n            }\\n            if(equation[i] == '+') \\n            {\\n                sign = 1;\\n                i++;\\n            }\\n            \\n            if(isdigit(equation[i]))\\n            {\\n                while(i<equation.size() && isdigit(equation[i]))\\n                {\\n                    temp = temp*10 + equation[i]-'0';\\n                    i++;\\n                }\\n                if(i< equation.size() && equation[i] == 'x')\\n                {\\n                    xpara += flag*sign*temp;\\n                    i++;\\n                } \\n                else \\n                    para += flag*sign*temp;\\n            } \\n            else //x\\n            {\\n                xpara += flag*sign;\\n                i++;\\n            }\\n            \\n        }\\n        string res;\\n        //cout<<para<<\", \"<<xpara<<endl;\\n        if(para == 0 && xpara == 0) \\n            res = \"Infinite solutions\";\\n        else if(xpara == 0) \\n            res = \"No solution\";\\n        else\\n            res = \"x=\"+to_string(para/xpara*-1);\\n        return res;\\n    }\\n};"
		},
		{
			"lc_ans_id":"105348",
			"view":"220",
			"top":"7",
			"title":"Very simple Java solution with full comments",
			"vote":"2",
			"content":"```\\n/*\\n* Algorithm:\\n* split the equation to two side\\n*\\n* try all x from -1000 to 1000 and calc value of each side\\n*\\n* if result of two side is equal, then totalAnswer increase\\n*\\n* if totalAnswer == 0 mean No solution\\n* if totalAnswer > 1 mean Infinite solutions\\n* if totalAnswer == 1 mean we have only one answer\\n* */\\npublic String solveEquation(String equation) {\\n    // split equation to two side\\n    String[] side = equation.split(\"=\");\\n\\n    // define totalAnswer and lastAnswer\\n    int totalAnswer = 0;\\n    int lastAnswer = 0;\\n\\n    // try all x from -1000 to 1000\\n    for (int x = -1000; x <= 1000; x++) {\\n        if (calc(x, side[0]) == calc(x, side[1])) {\\n            totalAnswer++;\\n            lastAnswer = x;\\n        }\\n    }\\n\\n    if (totalAnswer == 0) {\\n        return \"No solution\";\\n    }\\n\\n    if (totalAnswer > 1) {\\n        return \"Infinite solutions\";\\n    }\\n\\n    return \"x=\" + lastAnswer;\\n}\\n\\nprivate long calc(int x, String s) {\\n    long answer = 0;\\n    int idx = 0;\\n    char c = '+';\\n    boolean haveBefore;\\n\\n    while (idx < s.length()) {\\n        long val = 0;\\n        haveBefore = false;\\n        \\n        // try to parse string to int\\n        // example: \"21\" to 21, \"2x\" to 2 * x, \"x\" to x\\n        while (idx < s.length() && !\"+-\".contains(s.charAt(idx) + \"\")) {\\n            if (s.charAt(idx) != 'x') {\\n                val *= 10;\\n                val += s.charAt(idx) - '0';\\n                haveBefore = true;\\n            } else {\\n                if (haveBefore) {\\n                    val *= x;\\n                } else {\\n                    val = x;\\n                }\\n            }\\n            idx++;\\n        }\\n        \\n        // sum val to final answer\\n        if (c == '+') {\\n            answer += val;\\n        } else {\\n            answer -= val;\\n        }\\n\\n        if (idx < s.length()) {\\n            c = s.charAt(idx);\\n            idx++;\\n        }\\n    }\\n\\n    return answer;\\n}\\n````"
		},
		{
			"lc_ans_id":"105332",
			"view":"551",
			"top":"8",
			"title":"Concise C++ solution with Regular Expression, 12 lines",
			"vote":"2",
			"content":"```\\nstring solveEquation(string equation) {\\n    // normalize the equation, add 1 for x's which have no coefficient: x => 1x\\n    equation = regex_replace(equation, regex(\"(^|[+=-])x\"), \"$011x\");\\n\\n    // calculate coefficients for both sides\\n    auto pos = equation.find('=');\\n    auto l = coef(equation.substr(0, pos));\\n    auto r = coef(equation.substr(pos + 1));\\n\\n    // l.first x + l.second = r.first x + r.second => ax = b\\n    int a = l.first - r.first, b = r.second - l.second;\\n\\n    return a != 0 ? \"x=\" + to_string(b/a) : b != 0 ? \"No solution\" : \"Infinite solutions\";\\n}\\n\\npair<int, int> coef(string s) {\\n    // split the side into form of (+/-)123x\\n    auto e = regex(\"(^|[+-])\\\\\\\\d+x?\");\\n    regex_token_iterator<string::iterator> it(s.begin(), s.end(), e), end;\\n\\n    int a = 0, b = 0;\\n    for (; it != end; it++)\\n        (it->str().back() == 'x' ? a : b) += stoi(*it);\\n\\n    return {a, b};\\n}\\n```"
		},
		{
			"lc_ans_id":"105364",
			"view":"246",
			"top":"9",
			"title":"Python, Straightforward with Explanation",
			"vote":"2",
			"content":"Our goal is to get the coefficients of ```A``` and ```B``` in the reduced equation ```Ax+B=0```.  From there, we can read off the answer.\\n\\nEvery time we find a ```+ or -```, we should change our sign.  This sign is reversed if we have already seen the ```=```.  Otherwise, we should parse the word appropriately: if it ends with an x, then it is a coefficient of x, otherwise it is a constant.\\n\\n\\n```\\ndef solveEquation(self, equation):\\n    left = True\\n    sign = 1\\n    A = B = 0\\n    for k, v in itertools.groupby(equation, key = lambda x: x in '+-='):\\n        w = \"\".join(v)\\n        if k:\\n            for x in w:\\n                if x == '=': left = False\\n                sign = 1 if x != '-' else -1\\n                sign *= 1 if left else -1\\n        else:\\n            if w[-1] == 'x':\\n                A += sign * (int(w[:-1]) if w[:-1] else 1)\\n            else:\\n                B += sign * int(w)\\n\\n    if A == B == 0:\\n        return \"Infinite solutions\"\\n    elif A == 0:\\n        return \"No solution\"\\n    else:\\n        return \"x={}\".format(-B/A)\\n```"
		}
	],
	"id":"618",
	"title":"Solve the Equation",
	"content":"<p>\r\nSolve a given equation and return the value of <code>x</code> in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable <code>x</code> and its coefficient.\r\n</p>\r\n\r\n<p>\r\nIf there is no solution for the equation, return \"No solution\".\r\n</p>\r\n<p>\r\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\r\n</p>\r\n<p>\r\nIf there is exactly one solution for the equation, we ensure that the value of <code>x</code> is an integer.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x+5-3+x=6+x-2\"\r\n<b>Output:</b> \"x=2\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x=x\"\r\n<b>Output:</b> \"Infinite solutions\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"2x=x\"\r\n<b>Output:</b> \"x=0\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"2x+3x-6x=x+2\"\r\n<b>Output:</b> \"x=-1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 5:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x=x+2\"\r\n<b>Output:</b> \"No solution\"\r\n</pre>\r\n</p>",
	"frequency":"107",
	"ac_num":"7825"
}