{
	"difficulty":"2",
	"submit_num":"10317",
	"show_id":"722",
	"leetcode_id":"722",
	"answers":[
		{
			"lc_ans_id":"109195",
			"view":"1397",
			"top":"0",
			"title":"1-liners",
			"vote":"11",
			"content":"This problem *begs* for a regular expression solution...\\n\\nRuby:\\n```\\ndef remove_comments(source)\\n  source.join($/).gsub(%r(//.*|/\\\\*(.|\\\\n)*?\\\\*/), '').split($/).reject(&:empty?)\\nend\\n```\\nPython:\\n\\n    def removeComments(self, source):\\n        return filter(None, re.sub('//.*|/\\\\*(.|\\\\n)*?\\\\*/', '', '\\\\n'.join(source)).split('\\\\n'))"
		},
		{
			"lc_ans_id":"109217",
			"view":"744",
			"top":"1",
			"title":"C++ O(N) (one pass)",
			"vote":"5",
			"content":"```\\nclass Solution {\\npublic:\\n    vector<string> removeComments(vector<string>& s) {\\n        vector<string> ans;\\n        bool inBlock = false;\\n        string sf;\\n        for (auto &t:s) {\\n            for (int i = 0; i < t.size();) {\\n                if (!inBlock) {\\n                    if (i + 1 == t.size()) sf += t[i++];\\n                    else {\\n                        string m = t.substr(i,2);\\n                        if (m == \"/*\") inBlock = 1, i+=2;\\n                        else if (m == \"//\") break;\\n                        else sf += t[i++];\\n                    }\\n                }\\n                else {\\n                    if (i + 1 == t.size()) i++;\\n                    else {\\n                        string m = t.substr(i,2);\\n                        if (m == \"*/\") inBlock = 0, i+=2;\\n                        else i++;\\n                    }\\n                }\\n            }\\n            if (sf.size() && !inBlock) ans.push_back(sf), sf = \"\";\\n        }\\n        return ans;\\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"109197",
			"view":"907",
			"top":"2",
			"title":"One pass solution in Java",
			"vote":"5",
			"content":"We only need to check for two things:\\n1. If we see '//' we stop reading the current line, and add whatever characters we have seen to the result.\\n2. If we see '/\\\\*' then we start the multiline comment mode and we keep on ignoring characters until we see '\\\\*/'.\\n3. If the current character is neither of the above two and the multiline comment mode is off, then we add that character to the current line. \\n\\nOnce we parse one line (source[i]), then if the mode is off, we add the currently generated line (StringBuilder) to the result and repeat for source[i + 1].\\n\\nWe need to be careful not to insert empty lines in the result.\\n\\n\\n\\n```\\nclass Solution {\\n    public List<String> removeComments(String[] source) {\\n        List<String> res = new ArrayList<>();\\n        StringBuilder sb = new StringBuilder();     \\n        boolean mode = false;\\n        for (String s : source) {\\n            for (int i = 0; i < s.length(); i++) {\\n                if (mode) {\\n                    if (s.charAt(i) == '*' && i < s.length() - 1 && s.charAt(i + 1) == '/') {\\n                        mode = false;\\n                        i++;        //skip '/' on next iteration of i\\n                    }\\n                }\\n                else {\\n                    if (s.charAt(i) == '/' && i < s.length() - 1 && s.charAt(i + 1) == '/') {\\n                        break;      //ignore remaining characters on line s\\n                    }\\n                    else if (s.charAt(i) == '/' && i < s.length() - 1 && s.charAt(i + 1) == '*') {\\n                        mode = true;\\n                        i++;           //skip '*' on next iteration of i\\n                    }\\n                    else    sb.append(s.charAt(i));     //not a comment\\n                }\\n            }\\n            if (!mode && sb.length() > 0) {\\n                res.add(sb.toString());\\n                sb = new StringBuilder();   //reset for next line of source code\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```\\nThanks to @ihaveayaya for suggestion to remove some duplicate code."
		},
		{
			"lc_ans_id":"109210",
			"view":"380",
			"top":"3",
			"title":"Simple Python one-pass with clear inline explanation!!!",
			"vote":"4",
			"content":"The main idea is simple - Go through each character, if we meet a special character, check whether the next character is one that is of interest to us (comment tokens) and then toggle some states that will determine whether we append the character to the final source.\\n\\nSome insights:\\n\\n1. There are three important tokens we want to identify within the source code `//`, `/*` and `*/`. \\n2. We use a variable called `buffer` that acts as a buffer to store the characters that will definitely go into the final source code. This buffer can contain characters from multiple lines because of block comments. \\n3. We use another variable `block_comments_open` to keep track of whether we are inside a block comment or not.\\n4. At the end of each source line, we simply have to check whether we are inside of a block comment or not (i.e. `block_comments_open` is `True`) to decide whether we want to flush the buffer and append it to the results.\\n\\nIn each loop, we have to check that:\\n\\n1. `//` - If it is a line comment and not part of a block comment, skip the rest of the line by shifting the pointer to the end of the line.\\n2. `/*` - If it is an opening block comment token and not part of a block comment, set `block_comments_open` to `True`.\\n3. `*/` - If it is a closing block comment token and part of a block comment, set `block_comments_open` to `False`.\\n4. Else append to `buffer` if not part of a block comment.\\n\\n**Bonus**\\n\\nThere are many parsing/compiler type questions in LeetCode, and here are some tips on handling them:\\n\\n1. Use a pointer to read each character so that you can skip characters if the current token is made by more than one character, such as `//`, `/*` and `*/`.\\n2. For Python, use a `while` loop. You can't skip characters if you used `for i in range(...)` unlike in C++ or Java where you can have control of how you want to increment `i` at the end of each loop.\\n\\n*By Yangshun*\\n\\n```\\nclass Solution(object):\\n    def removeComments(self, source):\\n        \"\"\"\\n        :type source: List[str]\\n        :rtype: List[str]\\n        \"\"\"\\n        res, buffer, block_comment_open = [], '', False\\n        for line in source:\\n            i = 0\\n            while i < len(line):\\n                char = line[i]\\n                # \"//\" -> Line comment.\\n                if char == '/' and (i + 1) < len(line) and line[i + 1] == '/' and not block_comment_open:\\n                    i = len(line) # Advance pointer to end of current line.\\n                # \"/*\" -> Start of block comment.\\n                elif char == '/' and (i + 1) < len(line) and line[i + 1] == '*' and not block_comment_open:\\n                    block_comment_open = True\\n                    i += 1\\n                # \"*/\" -> End of block comment.\\n                elif char == '*' and (i + 1) < len(line) and line[i + 1] == '/' and block_comment_open:\\n                    block_comment_open = False\\n                    i += 1\\n                # Normal character. Append to buffer if not in block comment.\\n                elif not block_comment_open:\\n                    buffer += char\\n                i += 1\\n            if buffer and not block_comment_open:\\n                res.append(buffer)\\n                buffer = ''\\n        return res\\n```"
		},
		{
			"lc_ans_id":"109216",
			"view":"274",
			"top":"4",
			"title":"Simple C++ Solution One pass with explanation",
			"vote":"4",
			"content":"The idea is to just separate it into 4 cases.\\n1. If the current character and next one forms a \"//\" and we are not in a block comment.\\nIt means we ignore the current line and just move on to the next line.\\n2. If the current character and next one forms a new block comment and we are not currently in a block comment.\\nIt means we can ignore all the next characters until we find a closing block comment.\\n3. If the current character and next one forms a closing block comment and we are currently still in a block comment.\\nIt means we close the block comment and continue appending characters to string as usual.\\n4. Else this is just a normal character, append it to our string.\\nEverytime we hit a new line and we are not in a block comment currently, we can push the string into a vector of answer.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> removeComments(vector<string>& source) {\\n        vector<string> ans;\\n        string s;\\n        bool comment = false;\\n        for(int i = 0; i < source.size(); i++) {\\n            for(int j = 0; j < source[i].size(); j++) {\\n                if(!comment && j + 1 < source[i].size() && source[i][j] == '/' && source[i][j+1]=='/') break;\\n                else if(!comment && j + 1 < source[i].size() && source[i][j] == '/' && source[i][j+1]=='*') comment = true, j++;\\n                else if(comment && j + 1 < source[i].size() && source[i][j] == '*' && source[i][j+1]=='/') comment = false, j++;\\n                else if(!comment) s.push_back(source[i][j]);\\n            }\\n            \\n            if(!comment && s.size()) ans.push_back(s), s.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"109199",
			"view":"86",
			"top":"5",
			"title":"c++ regex",
			"vote":"1",
			"content":"Inspired by the solution @StefanPochmann \\n1. we join the vector of string into one string using \\\\n\\n2. regex replace the comments using empty string\\n3. split the string into vector of string using \\\\n\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> removeComments(vector<string>& source) {\\n        stringstream ss;\\n        const char* delim=\"\\\\n\";\\n        copy(source.begin(),source.end(),ostream_iterator<string>(ss,delim));\\n        string s=ss.str();\\n        //cout<<s;\\n        regex e(\"//.*|/\\\\\\\\*(.|\\\\n)*?\\\\\\\\*/\");\\n        string ns=regex_replace(s,e,\"\");\\n        //cout<<ns;\\n        //split the string into vector using tokened string\\n        ss.str(ns);\\n        vector<string> ans;\\n        while(ss.good())\\n        {\\n            string token;\\n            getline(ss,token,'\\\\n');\\n            if(!token.empty())\\n            ans.push_back(token);\\n        }\\n        //copy(ans.begin(),ans.end(),ostream_iterator<string>(cout,\"\\\\n\"));\\n        return ans;\\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"109202",
			"view":"75",
			"top":"6",
			"title":"java solution, easy to understand",
			"vote":"1",
			"content":"```\\n    private boolean incomment;\\n    private String unfinish;\\n    private List<String> res;\\n\\n    private void addLine(String line) {\\n        unfinish = \"\";\\n        if (!line.isEmpty())\\n            res.add(line);\\n    }\\n    \\n    private void processIncomment(String line) {\\n        int ind = line.indexOf(\"*/\");\\n        if (ind == -1)\\n            return;\\n        incomment = false;\\n        processNotIncomment(line.substring(ind + 2));\\n    }\\n\\n    private void processNotIncomment(String line) {\\n        int ind = line.indexOf(\"/*\");\\n        int ind1 = line.indexOf(\"//\");\\n        if (ind == -1 && ind1 == -1) {\\n            addLine(unfinish + line);\\n            return;\\n        }\\n        if (ind1 != -1 && (ind == -1 || ind1 < ind)) {\\n            addLine(unfinish + line.substring(0, ind1));\\n            return;\\n        } \\n        incomment = true;\\n        unfinish += line.substring(0, ind);\\n        processIncomment(line.substring(ind + 2));\\n    }\\n    \\n    public List<String> removeComments(String[] source) {\\n        incomment = false;\\n        unfinish = \"\";\\n        res = new ArrayList<>();\\n        for (String line: source)\\n            if (incomment)\\n                processIncomment(line);\\n            else\\n                processNotIncomment(line);\\n        return res;\\n    }\\n\\n```"
		},
		{
			"lc_ans_id":"109204",
			"view":"73",
			"top":"7",
			"title":"Python Simple one-pass",
			"vote":"1",
			"content":"If we think about it, the only time a new line can be added to the result set is if the parsed line is not empty. \\n\\nFurthermore, we only have to check if we can add the current parsed line at the end of each input line. \\n\\nTherefore, at each end of input line we just need to check if the parsed line is not empty and if we're not currently in a comment block. \\n\\nWe just have to iterate over each character of each line and modify the flag value to keep track of whether we're in a comment block, and then handle accordingly when we reach the end of each line. \\n```   \\n def removeComments(self, source):\\n        result, parseLine, flag, fInd = [], [], False, -1\\n        for line in source:\\n            for i,c in enumerate(line):\\n                if not flag:\\n                    if c == '/' and i != len(line)-1 and line[i+1] in ('*', '/'): # comment start token\\n                        if line[i+1] == '/': # if line comment, skip to end\\n                            break\\n                        flag, fInd = True, i+1 # activate flag and record position\\n                    else:\\n                        parseLine.append(c) # valid char\\n                elif c == '/': # potential block end\\n                    prev = max(0, i-1)\\n                    flag = (fInd == prev) or (line[prev] != '*')\\n            if not flag: # a parsed line can only be complete at the end of a line\\n                if parseLine: # only append if line isn't empty\\n                    result.append(''.join(parseLine))\\n                    parseLine = []\\n            fInd = -1 # reset block comment start as the current line is done.\\n        return result\\n```"
		},
		{
			"lc_ans_id":"109196",
			"view":"18",
			"top":"8",
			"title":"C++ O(N) runtime, and in place modifications",
			"vote":"0",
			"content":"In a nutshell:\\n\\nFor line comments, immediately delete the rest of the line.\\nFor block comments, add all the start/end of block comments into a list\\n\\nCheck the list in reverse order, and remove/merge the lines with block comments\\nCheck if there are any empty lines and remove them.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> removeComments(vector<string>& source) {\\n        \\n        bool inBlockComment = false;\\n        \\n        struct Entry {\\n            int start_s_idx;\\n            int start_ch_idx;\\n            int end_s_idx;\\n            int end_ch_idx;\\n        };\\n        \\n        vector<Entry> entries;\\n        \\n        struct Entry entry;\\n        \\n        for (int i=0; i<source.size(); i++)\\n        {\\n            int j = 0;\\n            while (j<source[i].length())\\n            {\\n                if (!inBlockComment &&\\n                    j<source[i].length()-1 &&\\n                    source[i][j] == '/' &&\\n                    source[i][j+1] == '/' )\\n                {\\n                    source[i].erase(j);\\n                    break;\\n                }\\n                \\n                if (!inBlockComment &&\\n                    j<source[i].length()-1 &&\\n                    source[i][j] == '/' &&\\n                    source[i][j+1] == '*' )\\n                {\\n                    inBlockComment = true;\\n                    entry.start_s_idx = i;\\n                    entry.start_ch_idx = j;\\n                    j+=2;\\n                    continue;\\n                }\\n                \\n                if (inBlockComment &&\\n                    j<source[i].length()-1 &&\\n                    source[i][j] == '*' &&\\n                    source[i][j+1] == '/' )\\n                {\\n                    inBlockComment = false;\\n                    entry.end_s_idx = i;\\n                    entry.end_ch_idx = j;\\n                    entries.push_back(entry);\\n                    j+=2;\\n                    continue;\\n                }\\n                \\n                j++;\\n            \\n            }\\n        }\\n        \\n        for (int i=entries.size()-1; i>=0; i--)\\n        {\\n            if (entries[i].start_s_idx == entries[i].end_s_idx)\\n            {\\n                // block comment in same line\\n                source[entries[i].start_s_idx].erase(entries[i].start_ch_idx, entries[i].end_ch_idx - entries[i].start_ch_idx + 2);\\n            }\\n            else\\n            {\\n                // block comment on multi-line\\n                \\n                // merge first and last line (removing implicit new lines)\\n                \\n                source[entries[i].start_s_idx].erase(entries[i].start_ch_idx);\\n                source[entries[i].start_s_idx] += source[entries[i].end_s_idx].substr(entries[i].end_ch_idx + 2);                                             \\n                \\n\\t\\t\\t\\t//delete lines in between\\n                source.erase(source.begin() + entries[i].start_s_idx + 1, source.begin() + entries[i].end_s_idx + 1);\\n                                                \\n            }\\n        }\\n        \\n        //Check for empty lines\\n        \\n\\t\\tfor (int i = source.size() - 1; i >=0; i--)\\n\\t\\t\\tif (source[i] == \"\")\\n\\t\\t\\t\\tsource.erase(source.begin() + i);\\n        \\n        return source;\\n        \\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"109198",
			"view":"52",
			"top":"9",
			"title":"C++ stupid if-else",
			"vote":"0",
			"content":"Regex if more clear I think.  But you could just use `if-else` tediously go through the code.  Couple of WA before finally got it....  This is just a simple implemented of finite state automaton.  Simply put, just use `if-else` to code what you need to do in what situation. \\n\\n```c++\\nclass Solution\\n{\\n public:\\n  vector<string> removeComments(vector<string>& source)\\n  {\\n    vector<string> ret;\\n    char pre = 0;\\n    for (string& line : source) {\\n      string tmp;\\n      char last = pre;\\n      for (char ch : line) {\\n        if (0 == pre) {\\n          if ('/' == ch)\\n            pre = ch;\\n          else\\n            tmp += ch;\\n        } else if ('/' == pre) {\\n          if ('/' == ch) {\\n            pre = 0;\\n            break;\\n          } else if ('*' == ch) {\\n            pre = '(';\\n          } else {\\n            pre = 0;\\n            tmp += '/';\\n            tmp += ch;\\n          }\\n        } else if ('(' == pre) {\\n          if ('*' == ch) pre = ')';\\n        } else if (')' == pre) {\\n          if ('/' == ch)\\n            pre = 0;\\n          else if ('*' == ch)\\n            pre = ')';\\n          else\\n            pre = '(';\\n        }\\n      }\\n\\n      if (pre && '(' != pre) {\\n        tmp += pre;\\n        pre = 0;\\n      }\\n\\n      if (tmp.size()) {\\n        if (0 == last)\\n          ret.push_back(tmp);\\n        else\\n          ret.back() += tmp;\\n      }\\n    }\\n\\n    return ret;\\n  }\\n};\\n```"
		}
	],
	"id":"688",
	"title":"Remove Comments",
	"content":"<p>Given a C++ program, remove comments from it. The program <code>source</code> is an array where <code>source[i]</code> is the <code>i</code>-th line of the source code.  This represents the result of splitting the original source code string by the newline character <code>\\n</code>.</p>\r\n\r\n<p>In C++, there are two types of comments, line comments, and block comments.</p>\r\n<p>\r\nThe string <code>//</code> denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\r\n</p><p>\r\nThe string <code>/*</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>*/</code> should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string <code>/*/</code> does not yet end the block comment, as the ending would be overlapping the beginning.\r\n</p><p>\r\nThe first effective comment takes precedence over others: if the string <code>//</code> occurs in a block comment, it is ignored. Similarly, if the string <code>/*</code> occurs in a line or block comment, it is also ignored.\r\n</p><p>\r\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\r\n</p><p>\r\nThere will be no control characters, single quote, or double quote characters.  For example, <code>source = \"string s = \"/* Not a comment. */\";\"</code> will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\r\n</p><p>\r\nIt is guaranteed that every open block comment will eventually be closed, so <code>/*</code> outside of a line or block comment always starts a new comment.\r\n</p><p>\r\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\r\n</p>\r\n\r\n<p>After removing the comments from the source code, return the source code in the same format.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n\r\nThe line by line code is visualized as below:\r\n/*Test program */\r\nint main()\r\n{ \r\n  // variable declaration \r\nint a, b, c;\r\n/* This is a test\r\n   multiline  \r\n   comment for \r\n   testing */\r\na = b + c;\r\n}\r\n\r\n<b>Output:</b> [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n\r\nThe line by line code is visualized as below:\r\nint main()\r\n{ \r\n  \r\nint a, b, c;\r\na = b + c;\r\n}\r\n\r\n<b>Explanation:</b> \r\nThe string <code>/*</code> denotes a block comment, including line 1 and lines 6-9. The string <code>//</code> denotes line 4 as comments.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\n<b>Output:</b> [\"ab\"]\r\n<b>Explanation:</b> The original source string is \"a/*comment<b>\\n</b>line<b>\\n</b>more_comment*/b\", where we have bolded the newline characters.  After deletion, the <i>implicit</i> newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>source</code> is in the range <code>[1, 100]</code>.</li>\r\n<li>The length of <code>source[i]</code> is in the range <code>[0, 80]</code>.</li>\r\n<li>Every open block comment is eventually closed.</li>\r\n<li>There are no single-quote, double-quote, or control characters in the source code.</li>\r\n</p>",
	"frequency":"37",
	"ac_num":"2797"
}