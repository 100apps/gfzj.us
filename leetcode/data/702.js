{
	"difficulty":"3",
	"submit_num":"3299",
	"show_id":"736",
	"leetcode_id":"736",
	"answers":[
		{
			"lc_ans_id":"109721",
			"view":"769",
			"top":"0",
			"title":"C++ recursion solution with explaination",
			"vote":"12",
			"content":"If the expression is a variable, we look up in the map and return the variable value. If the expression is a value, we simply return its value.\\n\\nFor the \"let\" case, we first get the variable name, and the following expression. Then we evaluate the expression, and use a map to assign the expression value to the variable. For example, consider \"(let x (add 2 3) x)\", the variable is \"x\", and we evaluate the expression \"(add 2 3)\", and assign x = 5. For the last \"x\", we recursively call the help function, and get its value 5.\\n\\nFor the \"add\" case, we evaluate the value of the first expression, and the second expression, and add them together. For example, consider \"(add (add 2 3) (add 3 4))\", the first expression is \"(add 2 3)\", and the second expression is \"(add 3 4)\". We get 5 after evaluating \"(add 2 3)\", and get 7 after evaluating \"(add 3 4)\", and we will return 12.\\n\\nThe \"mult\" case is similar to the \"add\" case.\\n\\n```\\nclass Solution {\\npublic:\\n    int evaluate(string expression) {\\n        unordered_map<string,int> myMap;\\n        return help(expression,myMap);\\n    }\\n    \\n    int help(string expression,unordered_map<string,int> myMap) {\\n        if ((expression[0] == '-') || (expression[0] >= '0' && expression[0] <= '9'))\\n            return stoi(expression);\\n        else if (expression[0] != '(')\\n            return myMap[expression];\\n        //to get rid of the first '(' and the last ')'\\n        string s = expression.substr(1,expression.size()-2);\\n        int start = 0;\\n        string word = parse(s,start);\\n        if (word == \"let\") {\\n            while (true) {\\n                string variable = parse(s,start);\\n                //if there is no more expression, simply evaluate the variable\\n                if (start > s.size())\\n                    return help(variable,myMap);\\n                string temp = parse(s,start);\\n                myMap[variable] = help(temp,myMap);                    \\n            }\\n        }\\n        else if (word == \"add\") \\n            return help(parse(s,start),myMap) + help(parse(s,start),myMap);\\n        else if (word == \"mult\") \\n            return help(parse(s,start),myMap) * help(parse(s,start),myMap);\\n    }\\n    \\n    //function to seperate each expression\\n    string parse(string &s,int &start) {\\n        int end = start+1, temp = start, count = 1;\\n        if (s[start] == '(') {\\n            while (count != 0) {\\n                if (s[end] == '(')\\n                    count++;\\n                else if (s[end] == ')')\\n                    count--;\\n                end++;\\n            }\\n        }\\n        else {\\n            while (end < s.size() && s[end] != ' ')\\n                end++;\\n        }\\n        start = end+1;\\n        return s.substr(temp,end-temp);\\n    }\\n};\\n```"
		},
		{
			"lc_ans_id":"109724",
			"view":"123",
			"top":"1",
			"title":"Recursive Python with inline comments",
			"vote":"2",
			"content":"`symbols` is a key-value map of variables to its values, called a symbol table in compilers. In each call to `_evaluate`, we clone the current symbol table for overwriting without affecting the parent scope.\\n\\n```\\nclass Solution(object):\\n    def evaluate(self, expression):\\n        import re\\n        tokens = list(filter(lambda c: c.strip(), re.split('(\\\\(|\\\\)|-?\\\\w+)', expression)))\\n        INTEGER_REGEX = '^-?\\\\d+$'\\n        VARIABLE_REGEX = '^[a-z][a-z0-9]*'\\n        self.i = 0\\n        def _evaluate(symbols):\\n            symbols = symbols.copy() # Don't affect parent scope values.\\n            token = tokens[self.i]\\n            # Integer.\\n            if re.search(INTEGER_REGEX, token):\\n                return int(token)\\n            # Variable. Look up symbol table and return value.\\n            if re.search(VARIABLE_REGEX, token):\\n                return symbols[token]\\n            # Operator - let/add/mult expression.\\n            if token == '(':\\n                self.i += 1\\n                op = tokens[self.i]\\n                self.i += 1\\n                if op == 'let':\\n                    variable = None\\n                    while tokens[self.i] != ')':\\n                        if not variable:\\n                            # Test whether it is a variable.\\n                            if re.search(VARIABLE_REGEX, tokens[self.i]):\\n                                variable = tokens[self.i]\\n                            else:\\n                                variable = _evaluate(symbols)\\n                        else:\\n                            symbols[variable] = _evaluate(symbols)\\n                            variable = None\\n                        self.i += 1\\n                    # If result is a variable, look up variable table and convert into a value.\\n                    if re.search(VARIABLE_REGEX, str(variable)):\\n                        variable = symbols[variable]\\n                    return variable\\n                # Binary operators - add/mult\\n                left = _evaluate(symbols)\\n                self.i += 1\\n                right = _evaluate(symbols)\\n                self.i += 1 # Closing bracket\\n                if op == 'add':\\n                    return left + right\\n                elif op == 'mult':\\n                    return left * right\\n        return _evaluate({})\\n```"
		},
		{
			"lc_ans_id":"109730",
			"view":"183",
			"top":"2",
			"title":"4 lines",
			"vote":"2",
			"content":"    def evaluate(self, expression):\\n        add, mult = '({}+{})'.format, '({}*{})'.format\\n        let = lambda *a: 'next(' + a[-1] + ''.join(map(' for {} in [{}]'.format, a[:-1:2], a[1::2])) + ')'\\n        e = re.sub(r\"\\\\('(\\\\w+)' \", r'\\\\1(', re.sub('([^ ()]+)', r\"'\\\\1'\", expression)).replace(' ', ', ')\\n        return eval(eval(e))\\n\\nI turn an expression like  \\n`(let x 1 y 2 x (add x y) (mult x y))`\\ninto an expression like  \\n`let('x', '1', 'y', '2', 'x', add('x', 'y'), mult('x', 'y'))`\\nwhich evaluates to the expression  \\n`next((x*y) for x in [1] for y in [2] for x in [(x+y)])`\\nwhich evaluates to the desired output."
		},
		{
			"lc_ans_id":"109727",
			"view":"423",
			"top":"3",
			"title":"Java 16 ms Regression Solution with Explanation",
			"vote":"2",
			"content":"The code I wrote is so ugly, yet the idea besides it is very simple:\\n \\nIn a whole view, the code implements a regression idea: From an outer expression to an inner expression. We call eval(String exp, Map<Integer, Integer> upper) function regressively every time when we face a Lisp expression inside an outer Lisp function so that we could ignore the detail to deal with it.\\n\\nLet's explain the most two ugly implementations I took, though I have no idea to beautify it.\\n\\n\\nExplanation 1: The function readNext(String exp, int low){}\\n\\nThis function is used to do a simple work: to get the next  expression name/Variable/ Value/expresion. I implemented it so long since the expression name ends with a space, yet the expression ends when the '(' and ')' match. I want to return the current position as well as the nextStr, however only one variable is allowed to return, So I have to make nextStr global.\\n\\n\\nExplantion 2: The use of upperMap in eval(String exp, Map<String, Integer> upperMap){\\n      ...\\n     Map<String, Integer> map = new HashMap<>();\\n     map.putAll(upperMap);\\n     ...\\n}\\n\\n\\nLet's look at the testing case:\\n```\\nInput: (let x 2 (add (let x 3 (let x 4 x)) x))\\nOutput: 6\\nExplanation: Even though (let x 4 x) has a deeper scope, it is outside the context\\nof the final x in the add-expression.  That final x will equal 2.\\n```\\nPeople tend to return the output 8 since the inner expression \"(let x 4 x))\" has changed variable x to 4. The right logic is that the HashMap outside the inner expression will have effects in the inner one, yet the inner expression cannot affect the HashMap of outside expression\\n\\n\\nHere is the accepted code:\\n```\\nclass Solution {\\n    String nextStr = \"\";\\n    public int evaluate(String exp){\\n        return eval(exp.substring(1, exp.length() - 1), new HashMap<>());\\n    }\\n    \\n    public int eval(String exp, Map<String, Integer> upperMap) {\\n        int pos = 0;\\n        int len = exp.length() - 1;\\n        Map<String, Integer> map = new HashMap<>();\\n        map.putAll(upperMap);\\n        \\n        pos = readNext(exp, pos);\\n        \\n        if(nextStr.equals(\"add\")){\\n            \\n            pos = readNext(exp, pos);\\n            // we have to consider if nextStr a number, a variable or a expression\\n            int left = nextStr.indexOf(\"(\") == -1 ? map.containsKey(nextStr) ? map.get(nextStr) : Integer.parseInt(nextStr) : eval(nextStr.substring(1, nextStr.length() - 1), map);\\n            \\n            pos = readNext(exp, pos);\\n            int right = nextStr.indexOf(\"(\") == -1 ? map.containsKey(nextStr) ? map.get(nextStr) : Integer.parseInt(nextStr) : eval(nextStr.substring(1, nextStr.length() - 1), map);\\n            \\n            return left + right;\\n        }\\n        \\n        else if(nextStr.equals(\"mult\")){\\n            \\n            pos = readNext(exp, pos);\\n            int left = nextStr.indexOf(\"(\") == -1 ? map.containsKey(nextStr) ? map.get(nextStr) : Integer.parseInt(nextStr) : eval(nextStr.substring(1, nextStr.length() - 1), map);\\n            \\n            pos = readNext(exp, pos);\\n            int right = nextStr.indexOf(\"(\") == -1 ? map.containsKey(nextStr) ? map.get(nextStr) : Integer.parseInt(nextStr) : eval(nextStr.substring(1, nextStr.length() - 1), map);\\n            \\n            return left * right;\\n        }\\n        else{\\n            \\n            pos = readNext(exp, pos);\\n            // read the next Str one time, if there pos doesn't reach len, it means we are still in the process of assignment. Since if pos < len, we still have the next str (of nextStr) to match with nextStr\\n            while(pos < len){\\n                String var = nextStr;\\n                \\n                pos = readNext(exp, pos);\\n                int val = nextStr.indexOf(\"(\") == -1 ? map.containsKey(nextStr) ? map.get(nextStr) : Integer.parseInt(nextStr) : eval(nextStr.substring(1, nextStr.length() - 1), map);\\n                \\n                map.put(var, val);\\n                pos = readNext(exp, pos);\\n            }\\n            \\n            return nextStr.indexOf(\"(\") == -1 ? map.containsKey(nextStr) ? map.get(nextStr) : Integer.parseInt(nextStr) : eval(nextStr.substring(1, nextStr.length() - 1), map);\\n        }\\n    }\\n\\n    // read the next expression/variable/value\\n    public int readNext(String exp, int pos){\\n        int len = exp.length();\\n        int tmp = pos;\\n        int cnt = 0;\\n        // deal with expression\\n        if(exp.charAt(pos) == '('){\\n            pos++; cnt++;\\n            for(; pos < len; pos++){\\n                char ch = exp.charAt(pos);\\n                if(cnt == 0){\\n                    break;\\n                }\\n                if(ch == '('){\\n                    cnt++;\\n                }\\n                else if(ch == ')'){\\n                    cnt--;\\n                }  \\n            }\\n        }\\n        // deal with variable or value\\n        else{\\n            for(; pos < len; pos++){\\n                char ch = exp.charAt(pos);\\n                if(ch == ' ' || ch == ')'){\\n                    break;\\n                }\\n            }    \\n        }\\n        \\n        nextStr = exp.substring(tmp, pos);\\n        return pos + 1;\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"109709",
			"view":"290",
			"top":"4",
			"title":"python solution using stacks.",
			"vote":"2",
			"content":"Using a stack, when encountering '(', save the current tokens and variable states in the stack.\\n```\\ndef evaluate(self, expression):\\n    st, d, tokens = [], {}, ['']\\n\\n    def getval(x):\\n        return d.get(x, x)\\n\\n    def evaluate(tokens):\\n        if tokens[0] in ('add', 'mult'):\\n            tmp = map(int, map(getval, tokens[1:]))\\n            return str(tmp[0] + tmp[1] if tokens[0] == 'add' else tmp[0] * tmp[1])\\n        else: #let\\n            for i in xrange(1, len(tokens)-1, 2):\\n                if tokens[i+1]:\\n                    d[tokens[i]] = getval(tokens[i+1])\\n            return getval(tokens[-1])\\n\\n    for c in expression:\\n        if c == '(':\\n            if tokens[0] == 'let':\\n                evaluate(tokens)\\n            st.append((tokens, dict(d)))\\n            tokens =  ['']\\n        elif c == ' ':\\n            tokens.append('')\\n        elif c == ')':\\n            val = evaluate(tokens)\\n            tokens, d = st.pop()\\n            tokens[-1] += val\\n        else:\\n            tokens[-1] += c\\n    return int(tokens[0])\\n```"
		},
		{
			"lc_ans_id":"109718",
			"view":"44",
			"top":"5",
			"title":"Java modularized solution",
			"vote":"1",
			"content":"These type of problems are notorious for their complex and intertwined nature. A modularized approach would certainly help to clarify the problem. So here is how I would divide the original problem into different modules.\\n\\n1. For an input string `expression`, we have the function `evaluate` to resolve its value.\\n\\n2. The input `expression` must be one of the following three types of expressions -- `add`, `mult` and `let`. Correspondingly we will have three functions to evaluate each of them --`evaluateAdd`, `evaluateMult` and `evaluateLet`.\\n\\n3. All the three types of expressions can be thought of as composed by **operands**, where each operand can be an integer, a variable or another expression of the three types mentioned above (note the expression will be enclosed in parentheses).\\n\\n* An `add` expression contains `2` operands and is evaluated to be the sum of the two operands.\\n\\n* A `mult` expression also contains `2` operands and is evaluated to be the product of the two operands.\\n\\n* A `let` expression contains `2m + 1` operands and is evaluated to be the value of the last operand. The first `m` pairs of operands correspond to `m` assignments. For each pair, the first operand is a variable while the second can be an integer, a variable or another expression. **To simulate the assignment operations**, we will maintain a `HashMap`, which maps the variable to the assigned values (this also implies the `evaluate` function in step 1 should be delegated to a subroutine with an additional `HashMap` parameter). **To simulate the concept of scope**, the assigned values will be placed in a stack. Whenever the `let` expression returns, all assignments performed within it become invalid and should be popped out of the stack.\\n\\n4. From the analyses above, given an expression `e`, we need to identify its constituent operands. We will have two functions serving for this purpose.\\n\\n* `getOperand`: this function will obtain the string representation of the operand starting from the specified `offset` into the expression `e`. It will distinguish the three types of operands -- an integer, a variable or another expression (of type `add`, `mult` or `let`).\\n\\n* `evaluateOperand`: this function will evaluate the operand string obtained above. For an operand of integer type, it will parse the string as an integer; for an operand of variable type, it will look up its value in the hash map; for an operand of expression type, it will recursively call the `evaluate` function to resolve its value.\\n\\nPutting everything together, here is the modularized solution:\\n\\n```\\npublic int evaluate(String expression) {\\n    return evaluate(expression, new HashMap<>());\\n}\\n\\nprivate int evaluate(String e, Map<String, Deque<Integer>> map) {\\n    char c = e.charAt(1);          // the expression must start with \"(add \" or \"(mult \" or \"(let \". \\n        \\n    if (c == 'a') {                // \"add\" expression\\n        return evaluateAdd(e, map);\\n    } else if (c == 'm') {         // \"mult\" expression\\n        return evaluateMult(e, map);\\n    } else if (c == 'l') {         // \"let\" expression\\n        return evaluateLet(e, map);\\n    } else {\\n        return 0;                  // illegal expression so return 0\\n    }\\n}\\n    \\nprivate int evaluateAdd(String e, Map<String, Deque<Integer>> map) {\\n    int offset = 5;      // the expression starts with \"(add \", so offset starts at 5.\\n    String o1 = getOperand(e, offset);  // 1st operand\\n        \\n    offset += o1.length() + 1;\\n    String o2 = getOperand(e, offset);  // 2nd operand\\n        \\n    return evaluateOperand(o1, map) + evaluateOperand(o2, map);\\n}\\n    \\nprivate int evaluateMult(String e, Map<String, Deque<Integer>> map) {\\n    int offset = 6;      // the expression starts with \"(mult \", so offset starts at 6.\\n    String o1 = getOperand(e, offset);  // 1st operand\\n        \\n    offset += o1.length() + 1;\\n    String o2 = getOperand(e, offset);  // 2nd operand\\n        \\n    return evaluateOperand(o1, map) * evaluateOperand(o2, map);\\n}\\n    \\nprivate int evaluateLet(String e, Map<String, Deque<Integer>> map) {\\n    List<String> variables = new ArrayList<>();  // list of variables assigned in this \"let\" expression\\n    int res = 0;     // the result of this \"let\" expression\\n    int offset = 5;  // the expression starts with \"(let \", so offset starts at 5.\\n        \\n    while (offset < e.length()) {\\n        String o1 = getOperand(e, offset);  // 1st operand\\n        offset += o1.length() + 1;\\n            \\n        String o2 = getOperand(e, offset);  // 2nd operand\\n            \\n        if (o2 == null) {\\n            res = evaluateOperand(o1, map); // if 2nd operand is null, we reached the last operand\\n            break;\\n        }\\n            \\n        offset += o2.length() + 1;\\n\\n        variables.add(o1);  // record the variable\\n        \\n        if (!map.containsKey(o1)) map.put(o1, new ArrayDeque<>());\\n        \\n        map.get(o1).offerFirst(evaluateOperand(o2, map));  // do the assignment\\n    }\\n    \\n    // pop out assigned values before returning from this \"let\" expression\\n    for (int i = variables.size() - 1; i >= 0; i--) {\\n        String variable = variables.get(i);\\n        Deque<Integer> stack = map.get(variable);\\n        stack.pollFirst();\\n        if (stack.isEmpty()) map.remove(variable);\\n    }\\n        \\n    return res;\\n}\\n    \\nprivate String getOperand(String e, int offset) {\\n    if (offset >= e.length()) return null;  // invalid offset\\n    \\n    char c = e.charAt(offset);\\n    int start = offset;\\n        \\n    if (c == '-' || Character.isDigit(c)) {  // operand is an integer\\n        if (c == '-') offset++;\\n        while (offset < e.length() && Character.isDigit(e.charAt(offset))) offset++;\\n            \\n    } else if (Character.isLowerCase(c)) {  // operand is a variable\\n        while (offset < e.length() && Character.isLetterOrDigit(e.charAt(offset))) offset++;\\n            \\n    } else {                                // operand is another expression enclosed in parentheses\\n        for (int cnt = 0; offset < e.length();) {\\n            c = e.charAt(offset++);\\n            if (c == '(') cnt++;\\n            if (c == ')') cnt--;\\n            if (cnt == 0) break;\\n        }\\n    }\\n        \\n    return e.substring(start, offset);\\n}\\n    \\nprivate int evaluateOperand(String e, Map<String, Deque<Integer>> map) {\\n    char c = e.charAt(0);\\n        \\n    if (c == '-' || Character.isDigit(c)) {  // operand is an integer so parse it\\n        return Integer.parseInt(e);\\n            \\n    } else if (Character.isLowerCase(c)) {  // operand is a variable so look it up\\n        return map.get(e).peekFirst();\\n            \\n    } else {                               // operand is another expression so evaluate it recursively\\n        return evaluate(e, map);\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"109719",
			"view":"51",
			"top":"6",
			"title":"Java solution with explanation",
			"vote":"1",
			"content":" First, we need to parse the string with parenthese and space. e.g. (add 1 2)->{\"(\",\"add\",\"1\",\"2\",\")\"};\\n Then we start processing the expression. In this process, we use one stack to store operators, and use another one to store all the other strings. Everytime when a String \")\" comes in, we know that one inner expression is closed here, then we can evaluate it. After we are done, we replace the inner expression with this result, or return it if no operator left.\\n```\\nclass Solution {\\n    public int evaluate(String expression) {\\n        String[] expr=parse(expression);  // parse\\n        Stack<String> st=new Stack<>();\\n        Stack<String> op=new Stack<>();\\n        st.push(expr[0]);\\n        for(int i=1;i<expr.length;i++){\\n            if(expr[i-1].equals(\"(\")){\\n                op.push(expr[i]);\\n            }\\n            \\n// when \")\" comes in, evaluate the inner expression. If the variable is not an integer, we search for its value in the stack from top to bottom.\\n            else if(expr[i].equals(\")\")){\\n                String operator=op.pop();\\n                int ans;\\n                if(operator.equals(\"let\")){\\n                    String tmp=st.pop();\\n                    if(!isInteger(tmp)) tmp=findValue(st,tmp);\\n                    ans=Integer.parseInt(tmp);\\n                    while(!st.peek().equals(\"(\")) st.pop();\\n                    st.pop();\\n                }\\n                else{\\n                    String s1=st.pop();\\n                    String s2=st.pop();\\n                    st.pop();\\n                    if(!isInteger(s1)) s1=findValue(st,s1);\\n                    if(!isInteger(s2)) s2=findValue(st,s2);\\n                    if(operator.equals(\"add\")){\\n                        ans=Integer.parseInt(s1)+Integer.parseInt(s2);\\n                    }else{\\n                        ans=Integer.parseInt(s1)*Integer.parseInt(s2);\\n                    }\\n                } \\n                if(op.isEmpty()) return ans;\\n                else st.push(String.valueOf(ans));\\n            }\\n            else st.push(expr[i]);   \\n        }\\n        return 0;\\n    }\\n    private String[] parse(String expression){\\n        List<String> result=new ArrayList<>();\\n        int start=0;\\n        for(int i=0;i<expression.length();i++){\\n            if(expression.charAt(i)=='('){\\n                result.add(expression.substring(i,i+1));\\n                start=i+1;\\n            }\\n            if(expression.charAt(i)==')'){\\n                if(expression.charAt(i-1)!=')') result.add(expression.substring(start,i));\\n                result.add(expression.substring(i,i+1));\\n                start=i+1;                \\n            }\\n            if(expression.charAt(i)==' '){\\n                if(expression.charAt(i-1)!=')') result.add(expression.substring(start,i));\\n                start=i+1;\\n            }\\n        }\\n        return result.toArray(new String[result.size()]);\\n    }\\n// check whether a String is an integer\\n    private boolean isInteger(String s){\\n        try{\\n            Integer.parseInt(s);\\n        }catch(NumberFormatException e){\\n            return false;\\n        }catch(NullPointerException e){\\n            return false;\\n        }\\n        return true;\\n    }\\n// search for the value of non-integer String from top to bottom\\n    private String findValue(Stack<String> st, String s){\\n        List<String> ls=new ArrayList<>(st);\\n        for(int j=ls.size()-2;j>=0;j--){\\n            if(ls.get(j).equals(s)){\\n                s=ls.get(j+1);\\n                if(isInteger(s)) return s;\\n            }\\n        } \\n        return s;\\n    }\\n}\\n```"
		},
		{
			"lc_ans_id":"109732",
			"view":"74",
			"top":"7",
			"title":"I don't think this problem is good one for interview to be honest",
			"vote":"1",
			"content":"Such problem might be good for ACM contest, but definitely not good for interview. With such a long explanation of the problem itself, I don't think it is a good one for interview. Better to select some practical interview problem as contest problem. Just my two cents. Don't want Leetcode to be congested with lot of non-interview coding problem."
		},
		{
			"lc_ans_id":"109733",
			"view":"75",
			"top":"8",
			"title":"Python Easy-to-understand Recursive solution",
			"vote":"1",
			"content":"This is not the fastest way but very straight-forward to understand.\\n``` python\\nfrom typing import Dict\\n\\nclass Solution:\\n    def evaluate(self, expression):\\n        \"\"\"\\n        :type expression: str\\n        :rtype: int\\n        \"\"\"\\n        return self.eval_with_env(expression, {})\\n\\n    def match_parenthesis(self, expression : str) -> Dict[int, int]:\\n        parenthesis = {}\\n        stack = []\\n        for i in range(len(expression)):\\n            if expression[i] == '(':\\n                stack.append(i)\\n            elif expression[i] == ')':\\n                j = stack.pop()\\n                parenthesis[j] = i\\n        return parenthesis\\n\\n    def eval_with_env(self, expr : str, env : Dict[str, int]) -> int:\\n        if expr.startswith('('):\\n            parenthesis = self.match_parenthesis(expr)\\n            if expr.startswith(\"add\", 1): # (add operand1 operand2)\\n                if expr[5].isalpha() or expr[5].isnumeric() or expr[5] == '-':\\n                    sub_expr = expr[5:-1] # type: str\\n                    operand_1, operand_2 = sub_expr.split(\" \", 1)\\n                    return self.eval_with_env(operand_1, env.copy()) + self.eval_with_env(operand_2, env.copy())\\n                elif expr[5] == '(':\\n                    operand_1 = expr[5:parenthesis[5]+1]\\n                    operand_2 = expr[parenthesis[5]+2:-1]\\n                    return self.eval_with_env(operand_1, env.copy()) + self.eval_with_env(operand_2, env.copy())\\n            elif expr.startswith(\"mult\", 1): # (mult operand1 operand2)\\n                if expr[6].isalpha() or expr[6].isnumeric() or expr[6] == '-':\\n                    sub_expr = expr[6:-1] # type: str\\n                    operand_1, operand_2 = sub_expr.split(\" \", 1)\\n                    return self.eval_with_env(operand_1, env.copy()) * self.eval_with_env(operand_2, env.copy())\\n                elif expr[6] == '(':\\n                    operand_1 = expr[6:parenthesis[6]+1]\\n                    operand_2 = expr[parenthesis[6]+2:-1]\\n                    return self.eval_with_env(operand_1, env.copy()) * self.eval_with_env(operand_2, env.copy())\\n            elif expr.startswith(\"let\", 1): # (let identifier expr ... expr)\\n                rest = expr[5:-1]\\n                while True:\\n\\n                    identifier, rest = rest.split(\" \", 1) # type: str, str\\n\\n                    if rest[0].isnumeric() or rest[0] == '-':\\n                        value, rest = rest.split(\" \", 1)\\n                        env[identifier] = int(value)\\n                    elif rest[0].isalpha():\\n                        sub_expr, rest = rest.split(\" \", 1)\\n                        env[identifier] = self.eval_with_env(sub_expr, env.copy())\\n                    elif rest[0] == '(':\\n                        close_parenthesis_pos = self.match_parenthesis(rest)[0]\\n                        sub_expr = rest[:close_parenthesis_pos+1]\\n                        rest = rest[close_parenthesis_pos+2:]\\n                        env[identifier] = self.eval_with_env(sub_expr, env.copy())\\n\\n                    if rest[0] == '(' or rest[0].isnumeric() or  rest[0] == '-' or \\\\\\n                            (rest[0].isalpha() and rest.find(\" \") == -1):\\n                        return self.eval_with_env(rest, env.copy())\\n\\n        elif expr[0].isnumeric() or expr[0] == '-':\\n            return int(expr)\\n        elif expr[0].isalpha():\\n            expr = expr.strip()\\n            return env[expr]\\n```"
		},
		{
			"lc_ans_id":"109737",
			"view":"101",
			"top":"9",
			"title":"did you create hash in every call, you lose, 6ms",
			"vote":"1",
			"content":"I use up-query linked list, got this idea from my compilers class....\\n\\n    struct Q {\\n        Q* up;\\n        unordered_map<string, int> m;\\n        bool get(string n, int* v = nullptr) {\\n            if (m.count(n)) {\\n                if (v) *v = m[n];\\n                return true;\\n            }\\n            if (up) return up->get(n, v);\\n            return false;\\n        }\\n    \\n        void set(string n, int v) {\\n            m[n] = v;\\n        }\\n    \\n        Q(Q* up = nullptr) : up(up) {};\\n    };\\n    \\n    class Solution {\\n    public:\\n        int evaluate(string expression) {\\n            string::iterator b = expression.begin();\\n            Q q;\\n            return evaluate(b, expression.end(), &q);\\n        }\\n    \\n        int evaluate(string::iterator& b, string::iterator e, Q* q) {\\n            string f = next(b, e);\\n            if (f != \"(\") {\\n                int v;\\n                if (q->get(f, &v)) return v;\\n                return stol(f);\\n            }\\n    \\n            string op = next(b, e);\\n            int result = 0;\\n            if (op == \"add\") {\\n                int x = evaluate(b, e, q);\\n                int y = evaluate(b, e, q);\\n                result = x + y;\\n    \\n            } else if (op == \"mult\") {\\n                int x = evaluate(b, e, q);\\n                int y = evaluate(b, e, q);\\n                result = x * y;\\n    \\n            } else if (op == \"let\") {\\n                Q local(q);\\n                while (true) {\\n                    string var = next(b, e);\\n                    if (var[0] == '(' || var[0] == '-' || isdigit(var[0])) {\\n                        b -= var.size();\\n                        result = evaluate(b, e, &local);\\n                        break;\\n                    }\\n                    if (local.m.count(var)) {\\n                        string vval = next(b, e);\\n                        b -= vval.size();\\n                        if (vval == \")\") {\\n                            local.get(var, &result);\\n                            break;\\n                        }\\n                    }\\n                    int val = evaluate(b, e, &local);\\n                    local.set(var, val);\\n                }\\n            } else {\\n                result = stol(op);\\n    \\n            }\\n            next(b, e); // )\\n            return result;\\n        }\\n    \\n        string next(string::iterator& b, string::iterator e) {\\n            if (b == e) return \"\";\\n            while (*b == ' ') ++b;\\n            if (*b == '(') {\\n                ++b;\\n                return \"(\";\\n            }\\n            if (*b == ')') {\\n                ++b ;\\n                return \")\";\\n            }\\n            while (*b == ' ') ++b;\\n            string ret;\\n            while (*b != ' ' && *b != ')') ret.push_back(*b++);\\n            return ret;\\n        }\\n    };"
		}
	],
	"id":"702",
	"title":"Parse Lisp Expression",
	"content":"<p>\r\nYou are given a string <code>expression</code> representing a Lisp-like expression to return the integer value of.\r\n</p><p>\r\nThe syntax for these expressions is given as follows.\r\n</p><p>\r\n<li>An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.</li>\r\n</p><p>\r\n<li>(An integer could be positive or negative.)</li>\r\n</p><p>\r\n<li>A let-expression takes the form <code>(let v1 e1 v2 e2 ... vn en expr)</code>, where <code>let</code> is always the string <code>\"let\"</code>, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable <code>v1</code> is assigned the value of the expression <code>e1</code>, the second variable <code>v2</code> is assigned the value of the expression <code>e2</code>, and so on <b>sequentially</b>; and then the value of this let-expression is the value of the expression <code>expr</code>.</li>\r\n</p><p>\r\n<li>An add-expression takes the form <code>(add e1 e2)</code> where <code>add</code> is always the string <code>\"add\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the addition of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>A mult-expression takes the form <code>(mult e1 e2)</code> where <code>mult</code> is always the string <code>\"mult\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the multiplication of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.</li>\r\n</p><p>\r\n<li>Finally, there is the concept of scope.  When an expression of a variable name is evaluated, <b>within the context of that evaluation</b>, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.</li>\r\n</p>\r\n\r\n<p><b>Evaluation Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> (add 1 2)\r\n<b>Output:</b> 3\r\n\r\n<b>Input:</b> (mult 3 (add 2 3))\r\n<b>Output:</b> 15\r\n\r\n<b>Input:</b> (let x 2 (mult x 5))\r\n<b>Output:</b> 10\r\n\r\n<b>Input:</b> (let x 2 (mult x (let x 3 y 4 (add x y))))\r\n<b>Output:</b> 14\r\n<b>Explanation:</b> In the expression (add x y), when checking for the value of the variable x,\r\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\r\nSince x = 3 is found first, the value of x is 3.\r\n\r\n<b>Input:</b> (let x 3 x 2 x)\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Assignment in let statements is processed sequentially.\r\n\r\n<b>Input:</b> (let x 1 y 2 x (add x y) (add x y))\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The first (add x y) evaluates as 3, and is assigned to x.\r\nThe second (add x y) evaluates as 3+2 = 5.\r\n\r\n<b>Input:</b> (let x 2 (add (let x 3 (let x 4 x)) x))\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Even though (let x 4 x) has a deeper scope, it is outside the context\r\nof the final x in the add-expression.  That final x will equal 2.\r\n\r\n<b>Input:</b> (let a1 3 b2 (add a1 1) b2) \r\n<b>Output</b> 4\r\n<b>Explanation:</b> Variable names can contain digits after the first character.\r\n\r\n</pre>\r\n\r\n<p><b>Note:</b>\r\n<li>The given string <code>expression</code> is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.</li>\r\n<li>The length of <code>expression</code> is at most 2000.  (It is also non-empty, as that would not be a legal expression.)</li>\r\n<li>The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.</li>\r\n</p>",
	"frequency":"103",
	"ac_num":"1378"
}